<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.75"/>
    <errors>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alpha\boot\bootp.c" line="211"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alpha\boot\bootp.c" line="220"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;DEBUG_ADDRESSES;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;DEBUG_ADDRESSES;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alpha\boot\bootpz.c" line="373"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;DEBUG_ADDRESSES;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;DEBUG_ADDRESSES;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alpha\boot\bootpz.c" line="379"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;DEBUG_ADDRESSES;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;DEBUG_ADDRESSES;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alpha\boot\bootpz.c" line="433"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;DEBUG_ADDRESSES;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;DEBUG_ADDRESSES;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alpha\boot\bootpz.c" line="473"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;DEBUG_LAST_STEPS;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;DEBUG_LAST_STEPS;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alpha\boot\bootpz.c" line="373"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;DEBUG_LAST_STEPS;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;DEBUG_LAST_STEPS;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alpha\boot\bootpz.c" line="379"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;DEBUG_LAST_STEPS;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;DEBUG_LAST_STEPS;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alpha\boot\bootpz.c" line="433"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;DEBUG_LAST_STEPS;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;DEBUG_LAST_STEPS;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alpha\boot\bootpz.c" line="473"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alpha\boot\bootpz.c" line="373"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alpha\boot\bootpz.c" line="379"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alpha\boot\bootpz.c" line="433"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;INITRD_IMAGE_SIZE&amp;#039; since the value of &amp;#039;INITRD_IMAGE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alpha\boot\bootpz.c" line="473"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_magic&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_magic&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="38"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_type&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_type&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="39"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_subtype&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_subtype&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="39"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_typename&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_typename&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="40"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_packname&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_packname&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="41"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_secsize&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_secsize&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="42"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_nsectors&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_nsectors&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="43"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_ntracks&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_ntracks&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="44"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_ncylinders&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_ncylinders&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="45"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_secpercyl&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_secpercyl&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="46"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_secprtunit&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_secprtunit&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="47"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_sparespertrack&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_sparespertrack&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="48"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_sparespercyl&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_sparespercyl&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="49"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_acylinders&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_acylinders&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="50"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_rpm&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_rpm&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="51"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_interleave&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_interleave&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="51"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_trackskew&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_trackskew&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="51"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_cylskew&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_cylskew&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="51"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_headswitch&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_headswitch&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="52"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_trkseek&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_trkseek&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="52"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_flags&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_flags&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="52"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_drivedata&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_drivedata&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="53"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_spare&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_spare&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="54"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_magic2&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_magic2&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="55"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_checksum&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_checksum&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="56"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_npartitions&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_npartitions&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="57"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_bbsize&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_bbsize&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="58"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;disklabel::d_sbsize&amp;#039; is never used." verbose="struct member &amp;#039;disklabel::d_sbsize&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="58"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;d_partition::p_size&amp;#039; is never used." verbose="struct member &amp;#039;d_partition::p_size&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="61"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;d_partition::p_offset&amp;#039; is never used." verbose="struct member &amp;#039;d_partition::p_offset&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="62"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;d_partition::p_fsize&amp;#039; is never used." verbose="struct member &amp;#039;d_partition::p_fsize&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="63"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;d_partition::p_fstype&amp;#039; is never used." verbose="struct member &amp;#039;d_partition::p_fstype&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="64"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;d_partition::p_frag&amp;#039; is never used." verbose="struct member &amp;#039;d_partition::p_frag&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="65"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;d_partition::p_cpg&amp;#039; is never used." verbose="struct member &amp;#039;d_partition::p_cpg&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="66"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;__bootblock::bootblock_bytes&amp;#039; is never used." verbose="union member &amp;#039;__bootblock::bootblock_bytes&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="83"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::__pad1&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::__pad1&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="75"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::__pad2&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::__pad2&amp;#039; is never used.">
            <location file0="alpha/boot/tools/mkbb.c" file="alpha\boot\tools\mkbb.c" line="80"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 2) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;." verbose="%lu in format string (no. 2) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;.">
            <location file0="alpha/boot/tools/objstrip.c" file="alpha\boot\tools\objstrip.c" line="319"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;e_entry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;e_entry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/boot/tools/objstrip.c" file="alpha\boot\tools\objstrip.c" line="62"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/core_cia.c" file="alpha\kernel\core_cia.c" line="989"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;IRONGATE_jd&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;IRONGATE_jd&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="alpha/kernel/core_irongate.c" file="alpha\kernel\core_irongate.c" line="184"/>
            <location file0="alpha/kernel/core_irongate.c" file="alpha\kernel\core_irongate.c" line="186"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;IRONGATE_jd&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;IRONGATE_jd&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="alpha/kernel/core_irongate.c" file="alpha\kernel\core_irongate.c" line="190"/>
            <location file0="alpha/kernel/core_irongate.c" file="alpha\kernel\core_irongate.c" line="199"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;code&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;code&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/core_lca.c" file="alpha\kernel\core_lca.c" line="136"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;code&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;code&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/core_lca.c" file="alpha\kernel\core_lca.c" line="179"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;csrs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;csrs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/core_marvel.c" file="alpha\kernel\core_marvel.c" line="181"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|=&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="alpha/kernel/core_t2.c" file="alpha\kernel\core_t2.c" line="562"/>
            <location file0="alpha/kernel/core_t2.c" file="alpha\kernel\core_t2.c" line="562"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|=&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="alpha/kernel/core_t2.c" file="alpha\kernel\core_t2.c" line="563"/>
            <location file0="alpha/kernel/core_t2.c" file="alpha\kernel\core_t2.c" line="563"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|=&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="alpha/kernel/core_t2.c" file="alpha\kernel\core_t2.c" line="564"/>
            <location file0="alpha/kernel/core_t2.c" file="alpha\kernel\core_t2.c" line="564"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|=&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="alpha/kernel/core_t2.c" file="alpha\kernel\core_t2.c" line="565"/>
            <location file0="alpha/kernel/core_t2.c" file="alpha\kernel\core_t2.c" line="565"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|=&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="alpha/kernel/core_t2.c" file="alpha\kernel\core_t2.c" line="567"/>
            <location file0="alpha/kernel/core_t2.c" file="alpha\kernel\core_t2.c" line="567"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|=&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="alpha/kernel/core_t2.c" file="alpha\kernel\core_t2.c" line="568"/>
            <location file0="alpha/kernel/core_t2.c" file="alpha\kernel\core_t2.c" line="568"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;env&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;env&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/err_marvel.c" file="alpha\kernel\err_marvel.c" line="27"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="224"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="236"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="243"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="274"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="284"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="316"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="325"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="381"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="390"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="424"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="433"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="464"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="465"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="480"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="481"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="496"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="497"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="508"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="509"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="536"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="537"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="552"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="553"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="568"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="569"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="580"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="581"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="599"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="607"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="615"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="628"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="640"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/io.c" file="alpha\kernel\io.c" line="648"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/irq_pyxis.c" file="alpha\kernel\irq_pyxis.c" line="71"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/module.c" file="alpha\kernel\module.c" line="140"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/module.c" file="alpha\kernel\module.c" line="195"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;location&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;location&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/module.c" file="alpha\kernel\module.c" line="251"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;dirent&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;dirent&amp;#039; to itself.">
            <location file0="alpha/kernel/osf_sys.c" file="alpha\kernel\osf_sys.c" line="176"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;basep&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;basep&amp;#039; to itself.">
            <location file0="alpha/kernel/osf_sys.c" file="alpha\kernel\osf_sys.c" line="177"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;count&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;count&amp;#039; to itself.">
            <location file0="alpha/kernel/osf_sys.c" file="alpha\kernel\osf_sys.c" line="178"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __user*)dirent&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __user*)dirent&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="alpha/kernel/osf_sys.c" file="alpha\kernel\osf_sys.c" line="158"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;setargs::follow&amp;#039; is never used." verbose="struct member &amp;#039;setargs::follow&amp;#039; is never used.">
            <location file0="alpha/kernel/osf_sys.c" file="alpha\kernel\osf_sys.c" line="739"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;fsetargs::fd&amp;#039; is never used." verbose="struct member &amp;#039;fsetargs::fd&amp;#039; is never used.">
            <location file0="alpha/kernel/osf_sys.c" file="alpha\kernel\osf_sys.c" line="745"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;getargs::follow&amp;#039; is never used." verbose="struct member &amp;#039;getargs::follow&amp;#039; is never used.">
            <location file0="alpha/kernel/osf_sys.c" file="alpha\kernel\osf_sys.c" line="752"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;fgetargs::fd&amp;#039; is never used." verbose="struct member &amp;#039;fgetargs::fd&amp;#039; is never used.">
            <location file0="alpha/kernel/osf_sys.c" file="alpha\kernel\osf_sys.c" line="760"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;delargs::follow&amp;#039; is never used." verbose="struct member &amp;#039;delargs::follow&amp;#039; is never used.">
            <location file0="alpha/kernel/osf_sys.c" file="alpha\kernel\osf_sys.c" line="769"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;fdelargs::fd&amp;#039; is never used." verbose="struct member &amp;#039;fdelargs::fd&amp;#039; is never used.">
            <location file0="alpha/kernel/osf_sys.c" file="alpha\kernel\osf_sys.c" line="774"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="alpha/kernel/pci-sysfs.c" file="alpha\kernel\pci-sysfs.c" line="104"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed.">
            <location file0="alpha/kernel/pci_iommu.c" file="alpha\kernel\pci_iommu.c" line="474"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;idx_rubbish_bin&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;idx_rubbish_bin&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/perf_event.c" file="alpha\kernel\perf_event.c" line="681"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/process.c" file="alpha\kernel\process.c" line="394"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;schedule_frame&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;schedule_frame&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/process.c" file="alpha\kernel\process.c" line="412"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;displ&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;displ&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/ptrace.c" file="alpha\kernel\ptrace.c" line="194"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dsr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dsr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/setup.c" file="alpha\kernel\setup.c" line="1388"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;unk_system_string&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;unk_system_string&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/setup.c" file="alpha\kernel\setup.c" line="1389"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/setup.c" file="alpha\kernel\setup.c" line="1415"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::ide_en&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::ide_en&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="240"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::reserved1&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::reserved1&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="241"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::fdc_pwr&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::fdc_pwr&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="242"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::reserved2&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::reserved2&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="243"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::valid&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::valid&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="244"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::reserved1&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::reserved1&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="256"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::ppt_pwr&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::ppt_pwr&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="257"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::ppt_mode&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::ppt_mode&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="258"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::reserved2&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::reserved2&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="259"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::reserved3&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::reserved3&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="260"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::lock_crx&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::lock_crx&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="261"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous2::reserved1&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous2::reserved1&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="273"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous2::uart1_pwr&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous2::uart1_pwr&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="274"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous2::reserved2&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous2::reserved2&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="275"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous2::uart2_pwr&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous2::uart2_pwr&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="276"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous3::pwrgd_gamecs&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous3::pwrgd_gamecs&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="301"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous3::fdc_mode2&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous3::fdc_mode2&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="302"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous3::pin94_0&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous3::pin94_0&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="303"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous3::reserved1&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous3::reserved1&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="304"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous3::drvden&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous3::drvden&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="305"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous3::op_mode&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous3::op_mode&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="306"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous3::pin94_1&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous3::pin94_1&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="307"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous4::ppt_ext_mode&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous4::ppt_ext_mode&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="359"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous4::ppt_fdc&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous4::ppt_fdc&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="360"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous4::midi1&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous4::midi1&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="361"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous4::midi2&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous4::midi2&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="362"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous4::epp_type&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous4::epp_type&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="363"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous4::alt_io&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous4::alt_io&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="364"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous5::reserved1&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous5::reserved1&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="383"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous5::fdc_dma_mode&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous5::fdc_dma_mode&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="384"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous5::den_sel&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous5::den_sel&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="385"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous5::swap_drv&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous5::swap_drv&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="386"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous5::extx4&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous5::extx4&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="387"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous5::reserved2&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous5::reserved2&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="388"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous6::floppy_a&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous6::floppy_a&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="400"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous6::floppy_b&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous6::floppy_b&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="401"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous6::floppy_c&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous6::floppy_c&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="402"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous6::floppy_d&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous6::floppy_d&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="403"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous7::floppy_boot&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous7::floppy_boot&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="423"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous7::reserved1&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous7::reserved1&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="424"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous7::ppt_en&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous7::ppt_en&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="425"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous7::uart1_en&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous7::uart1_en&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="426"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous7::uart2_en&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous7::uart2_en&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="427"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous7::fdc_en&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous7::fdc_en&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="428"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous8::zero&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous8::zero&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="440"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous8::addrx7_4&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous8::addrx7_4&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="441"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous9::adra8&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous9::adra8&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="460"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous9::reserved1&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous9::reserved1&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="461"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous9::adrx_config&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous9::adrx_config&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="462"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous10::ecp_fifo_threshold&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous10::ecp_fifo_threshold&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="474"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous10::reserved1&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous10::reserved1&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="475"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous11::fdd0_drtx&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous11::fdd0_drtx&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="487"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous11::fdd1_drtx&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous11::fdd1_drtx&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="488"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous11::fdd2_drtx&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous11::fdd2_drtx&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="489"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous11::fdd3_drtx&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous11::fdd3_drtx&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="490"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous12::uart2_rcv_polarity&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous12::uart2_rcv_polarity&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="510"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous12::uart2_xmit_polarity&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous12::uart2_xmit_polarity&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="511"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous12::uart2_duplex&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous12::uart2_duplex&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="512"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous12::uart2_mode&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous12::uart2_mode&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="513"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous12::uart1_speed&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous12::uart1_speed&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="514"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous12::uart2_speed&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous12::uart2_speed&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="515"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous14::device_rev&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous14::device_rev&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="543"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous15::test0&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous15::test0&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="555"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous15::test1&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous15::test1&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="556"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous15::test2&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous15::test2&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="557"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous15::test3&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous15::test3&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="558"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous15::test4&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous15::test4&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="559"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous15::test5&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous15::test5&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="560"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous15::test6&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous15::test6&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="561"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous15::test7&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous15::test7&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="562"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous16::reserved1&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous16::reserved1&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="574"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous16::pll_gain&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous16::pll_gain&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="575"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous16::pll_stop&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous16::pll_stop&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="576"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous16::ace_stop&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous16::ace_stop&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="577"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous16::pll_clock_ctrl&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous16::pll_clock_ctrl&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="578"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous16::ir_test&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous16::ir_test&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="579"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous17::ir_loopback&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous17::ir_loopback&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="591"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous17::test_10ms&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous17::test_10ms&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="592"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous17::reserved1&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous17::reserved1&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="593"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous18::gamecs_config&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous18::gamecs_config&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="616"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous18::gamecs_addr9_4&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous18::gamecs_addr9_4&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="617"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous19::fdd0_drive_type&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous19::fdd0_drive_type&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="642"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous19::fdd1_drive_type&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous19::fdd1_drive_type&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="643"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous19::fdd2_drive_type&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous19::fdd2_drive_type&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="644"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous19::fdd3_drive_type&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous19::fdd3_drive_type&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="645"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous20::zero&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous20::zero&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="662"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous21::zero&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous21::zero&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="680"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous22::zero&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous22::zero&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="698"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous24::zero&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous24::zero&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="735"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous25::zero&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous25::zero&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="753"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous29::irqin_irq&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous29::irqin_irq&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="875"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous29::reserved1&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous29::reserved1&amp;#039; is never used.">
            <location file0="alpha/kernel/smc37c669.c" file="alpha\kernel\smc37c669.c" line="876"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;mycpu&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;mycpu&amp;#039; is assigned a value that is never used.">
            <location file0="alpha/kernel/smp.c" file="alpha\kernel\smp.c" line="272"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;need_cr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;need_cr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/srmcons.c" file="alpha\kernel\srmcons.c" line="115"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/sys_alcor.c" file="alpha\kernel\sys_alcor.c" line="89"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/sys_cabriolet.c" file="alpha\kernel\sys_cabriolet.c" line="71"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/sys_dp264.c" file="alpha\kernel\sys_dp264.c" line="208"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/sys_eb64p.c" file="alpha\kernel\sys_eb64p.c" line="69"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msi_data_off&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msi_data_off&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/sys_marvel.c" file="alpha\kernel\sys_marvel.c" line="347"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/sys_mikasa.c" file="alpha\kernel\sys_mikasa.c" line="69"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;IRONGATE0.dramms&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;IRONGATE0.dramms&amp;#039; to itself.">
            <location file0="alpha/kernel/sys_nautilus.c" file="alpha\kernel\sys_nautilus.c" line="168"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/sys_noritake.c" file="alpha\kernel\sys_noritake.c" line="77"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/sys_rx164.c" file="alpha\kernel\sys_rx164.c" line="73"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vector&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vector&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/kernel/sys_titan.c" file="alpha\kernel\sys_titan.c" line="255"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;i&amp;gt;40&amp;#039; is always false" verbose="Condition &amp;#039;i&amp;gt;40&amp;#039; is always false">
            <location file0="alpha/kernel/traps.c" file="alpha\kernel\traps.c" line="156"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dst&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dst&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="alpha/lib/srm_printk.c" file="alpha\lib\srm_printk.c" line="14"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::reserved&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::reserved&amp;#039; is never used.">
            <location file0="alpha/oprofile/op_model_ev67.c" file="alpha\oprofile\op_model_ev67.c" line="179"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::overcount&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::overcount&amp;#039; is never used.">
            <location file0="alpha/oprofile/op_model_ev67.c" file="alpha\oprofile\op_model_ev67.c" line="180"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::icache_miss&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::icache_miss&amp;#039; is never used.">
            <location file0="alpha/oprofile/op_model_ev67.c" file="alpha\oprofile\op_model_ev67.c" line="181"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;irq_build::ver&amp;#039; is never used." verbose="struct member &amp;#039;irq_build::ver&amp;#039; is never used.">
            <location file0="arc/kernel/intc-arcv2.c" file="arc\kernel\intc-arcv2.c" line="34"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;irq_build::irqs&amp;#039; is never used." verbose="struct member &amp;#039;irq_build::irqs&amp;#039; is never used.">
            <location file0="arc/kernel/intc-arcv2.c" file="arc\kernel\intc-arcv2.c" line="34"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;irq_build::exts&amp;#039; is never used." verbose="struct member &amp;#039;irq_build::exts&amp;#039; is never used.">
            <location file0="arc/kernel/intc-arcv2.c" file="arc\kernel\intc-arcv2.c" line="34"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;irq_build::pad&amp;#039; is never used." verbose="struct member &amp;#039;irq_build::pad&amp;#039; is never used.">
            <location file0="arc/kernel/intc-arcv2.c" file="arc\kernel\intc-arcv2.c" line="34"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;aux_irq_ctrl::res&amp;#039; is never used." verbose="struct member &amp;#039;aux_irq_ctrl::res&amp;#039; is never used.">
            <location file0="arc/kernel/intc-arcv2.c" file="arc\kernel\intc-arcv2.c" line="45"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;aux_irq_ctrl::res2&amp;#039; is never used." verbose="struct member &amp;#039;aux_irq_ctrl::res2&amp;#039; is never used.">
            <location file0="arc/kernel/intc-arcv2.c" file="arc\kernel\intc-arcv2.c" line="47"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;aux_irq_ctrl::res3&amp;#039; is never used." verbose="struct member &amp;#039;aux_irq_ctrl::res3&amp;#039; is never used.">
            <location file0="arc/kernel/intc-arcv2.c" file="arc\kernel\intc-arcv2.c" line="47"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;irq_build::pad&amp;#039; is never used." verbose="struct member &amp;#039;irq_build::pad&amp;#039; is never used.">
            <location file0="arc/kernel/intc-arcv2.c" file="arc\kernel\intc-arcv2.c" line="32"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;irq_build::exts&amp;#039; is never used." verbose="struct member &amp;#039;irq_build::exts&amp;#039; is never used.">
            <location file0="arc/kernel/intc-arcv2.c" file="arc\kernel\intc-arcv2.c" line="32"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;irq_build::irqs&amp;#039; is never used." verbose="struct member &amp;#039;irq_build::irqs&amp;#039; is never used.">
            <location file0="arc/kernel/intc-arcv2.c" file="arc\kernel\intc-arcv2.c" line="32"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;irq_build::ver&amp;#039; is never used." verbose="struct member &amp;#039;irq_build::ver&amp;#039; is never used.">
            <location file0="arc/kernel/intc-arcv2.c" file="arc\kernel\intc-arcv2.c" line="32"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;aux_irq_ctrl::res3&amp;#039; is never used." verbose="struct member &amp;#039;aux_irq_ctrl::res3&amp;#039; is never used.">
            <location file0="arc/kernel/intc-arcv2.c" file="arc\kernel\intc-arcv2.c" line="41"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;aux_irq_ctrl::res2&amp;#039; is never used." verbose="struct member &amp;#039;aux_irq_ctrl::res2&amp;#039; is never used.">
            <location file0="arc/kernel/intc-arcv2.c" file="arc\kernel\intc-arcv2.c" line="41"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;aux_irq_ctrl::res&amp;#039; is never used." verbose="struct member &amp;#039;aux_irq_ctrl::res&amp;#039; is never used.">
            <location file0="arc/kernel/intc-arcv2.c" file="arc\kernel\intc-arcv2.c" line="43"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ARC_COMPACT_IRQ_LEVELS&amp;#039; since the value of &amp;#039;CONFIG_ARC_COMPACT_IRQ_LEVELS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ARC_COMPACT_IRQ_LEVELS&amp;#039; since the value of &amp;#039;CONFIG_ARC_COMPACT_IRQ_LEVELS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arc\kernel\intc-compact.c" line="32"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous0::pad&amp;#039; is never used." verbose="union member &amp;#039;Anonymous0::pad&amp;#039; is never used.">
            <location file0="arc/kernel/mcip.c" file="arc\kernel\mcip.c" line="161"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous0::pad2&amp;#039; is never used." verbose="union member &amp;#039;Anonymous0::pad2&amp;#039; is never used.">
            <location file0="arc/kernel/mcip.c" file="arc\kernel\mcip.c" line="161"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arc/kernel/mcip.c" file="arc\kernel\mcip.c" line="63"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::sentinel&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::sentinel&amp;#039; is never used.">
            <location file0="arc/kernel/perf_event.c" file="arc\kernel\perf_event.c" line="518"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ino&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ino&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arc/kernel/troubleshoot.c" file="arc\kernel\troubleshoot.c" line="102"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ino&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ino&amp;#039; is assigned a value that is never used.">
            <location file0="arc/kernel/troubleshoot.c" file="arc\kernel\troubleshoot.c" line="125"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dev&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dev&amp;#039; is assigned a value that is never used.">
            <location file0="arc/kernel/troubleshoot.c" file="arc\kernel\troubleshoot.c" line="124"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arc/kernel/troubleshoot.c" file="arc\kernel\troubleshoot.c" line="259"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arc/kernel/troubleshoot.c" file="arc\kernel\troubleshoot.c" line="261"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arc/kernel/troubleshoot.c" file="arc\kernel\troubleshoot.c" line="254"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arc/kernel/troubleshoot.c" file="arc\kernel\troubleshoot.c" line="255"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arc/kernel/troubleshoot.c" file="arc\kernel\troubleshoot.c" line="256"/>
        </error>
        <error id="invalidTestForOverflow" severity="warning" msg="Invalid test for overflow &amp;#039;ptr+len&amp;lt;ptr&amp;#039;. Condition is always false unless there is overflow, and overflow is UB." verbose="Invalid test for overflow &amp;#039;ptr+len&amp;lt;ptr&amp;#039;. Condition is always false unless there is overflow, and overflow is UB.">
            <location file0="arc/kernel/unwind.c" file="arc\kernel\unwind.c" line="777"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tableSize&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tableSize&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arc/kernel/unwind.c" file="arc\kernel\unwind.c" line="1165"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous3::p32u&amp;#039; is never used." verbose="union member &amp;#039;Anonymous3::p32u&amp;#039; is never used.">
            <location file0="arc/kernel/unwind.c" file="arc\kernel\unwind.c" line="640"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous3::p32s&amp;#039; is never used." verbose="union member &amp;#039;Anonymous3::p32s&amp;#039; is never used.">
            <location file0="arc/kernel/unwind.c" file="arc\kernel\unwind.c" line="641"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous4::p16&amp;#039; is never used." verbose="union member &amp;#039;Anonymous4::p16&amp;#039; is never used.">
            <location file0="arc/kernel/unwind.c" file="arc\kernel\unwind.c" line="875"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arc/kernel/unwind.c" file="arc\kernel\unwind.c" line="706"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;table_size&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;table_size&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="arc/kernel/unwind.c" file="arc\kernel\unwind.c" line="425"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_slc_cfg::way&amp;#039; is never used." verbose="struct member &amp;#039;bcr_slc_cfg::way&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="85"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_slc_cfg::pad&amp;#039; is never used." verbose="struct member &amp;#039;bcr_slc_cfg::pad&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="85"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_clust_cfg::num_cores&amp;#039; is never used." verbose="struct member &amp;#039;bcr_clust_cfg::num_cores&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="94"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_clust_cfg::num_entries&amp;#039; is never used." verbose="struct member &amp;#039;bcr_clust_cfg::num_entries&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="94"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_clust_cfg::pad&amp;#039; is never used." verbose="struct member &amp;#039;bcr_clust_cfg::pad&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="94"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_volatile::disable&amp;#039; is never used." verbose="struct member &amp;#039;bcr_volatile::disable&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="103"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_volatile::order&amp;#039; is never used." verbose="struct member &amp;#039;bcr_volatile::order&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="103"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_volatile::pad&amp;#039; is never used." verbose="struct member &amp;#039;bcr_volatile::pad&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="103"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_cache::pad&amp;#039; is never used." verbose="struct member &amp;#039;bcr_cache::pad&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="152"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="281"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="328"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="409"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ARC_CACHE_VIPT_ALIASING&amp;#039; since the value of &amp;#039;CONFIG_ARC_CACHE_VIPT_ALIASING&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ARC_CACHE_VIPT_ALIASING&amp;#039; since the value of &amp;#039;CONFIG_ARC_CACHE_VIPT_ALIASING&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arc\mm\cache.c" line="1086"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ARC_HAS_DCACHE&amp;#039; since the value of &amp;#039;CONFIG_ARC_HAS_DCACHE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ARC_HAS_DCACHE&amp;#039; since the value of &amp;#039;CONFIG_ARC_HAS_DCACHE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arc\mm\cache.c" line="54"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ARC_HAS_DCACHE&amp;#039; since the value of &amp;#039;CONFIG_ARC_HAS_DCACHE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ARC_HAS_DCACHE&amp;#039; since the value of &amp;#039;CONFIG_ARC_HAS_DCACHE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arc\mm\cache.c" line="1070"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ARC_HAS_ICACHE&amp;#039; since the value of &amp;#039;CONFIG_ARC_HAS_ICACHE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ARC_HAS_ICACHE&amp;#039; since the value of &amp;#039;CONFIG_ARC_HAS_ICACHE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arc\mm\cache.c" line="53"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ARC_HAS_ICACHE&amp;#039; since the value of &amp;#039;CONFIG_ARC_HAS_ICACHE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ARC_HAS_ICACHE&amp;#039; since the value of &amp;#039;CONFIG_ARC_HAS_ICACHE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arc\mm\cache.c" line="1039"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ARC_HAS_ICACHE;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_ARC_HAS_ICACHE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ARC_HAS_ICACHE;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_ARC_HAS_ICACHE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arc\mm\cache.c" line="53"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ARC_HAS_ICACHE;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_ARC_HAS_ICACHE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ARC_HAS_ICACHE;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_ARC_HAS_ICACHE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arc\mm\cache.c" line="1039"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_slc_cfg::pad&amp;#039; is never used." verbose="struct member &amp;#039;bcr_slc_cfg::pad&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="83"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_slc_cfg::way&amp;#039; is never used." verbose="struct member &amp;#039;bcr_slc_cfg::way&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="83"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_clust_cfg::pad&amp;#039; is never used." verbose="struct member &amp;#039;bcr_clust_cfg::pad&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="92"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_clust_cfg::num_entries&amp;#039; is never used." verbose="struct member &amp;#039;bcr_clust_cfg::num_entries&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="92"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_clust_cfg::num_cores&amp;#039; is never used." verbose="struct member &amp;#039;bcr_clust_cfg::num_cores&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="92"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_volatile::pad&amp;#039; is never used." verbose="struct member &amp;#039;bcr_volatile::pad&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="101"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_volatile::order&amp;#039; is never used." verbose="struct member &amp;#039;bcr_volatile::order&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="101"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_volatile::disable&amp;#039; is never used." verbose="struct member &amp;#039;bcr_volatile::disable&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="101"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;bcr_cache::pad&amp;#039; is never used." verbose="struct member &amp;#039;bcr_cache::pad&amp;#039; is never used.">
            <location file0="arc/mm/cache.c" file="arc\mm\cache.c" line="150"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;is_non_coh&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;is_non_coh&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="arc/mm/dma.c" file="arc\mm\dma.c" line="111"/>
            <location file0="arc/mm/dma.c" file="arc\mm\dma.c" line="113"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arc/mm/mmap.c" file="arc\mm\mmap.c" line="35"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SMP;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; since the value of &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SMP;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; since the value of &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arc\mm\tlb.c" line="287"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SMP;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; since the value of &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SMP;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; since the value of &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arc\mm\tlb.c" line="862"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SMP;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; since the value of &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SMP;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; since the value of &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arc\mm\tlb.c" line="911"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; since the value of &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; since the value of &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arc\mm\tlb.c" line="287"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; since the value of &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; since the value of &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arc\mm\tlb.c" line="862"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; since the value of &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; since the value of &amp;#039;CONFIG_TRANSPARENT_HUGEPAGE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arc\mm\tlb.c" line="911"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;ver::pad&amp;#039; is never used." verbose="union member &amp;#039;ver::pad&amp;#039; is never used.">
            <location file0="arc/plat-axs10x/axs10x.c" file="arc\plat-axs10x\axs10x.c" line="114"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;pll_reg::pad&amp;#039; is never used." verbose="union member &amp;#039;pll_reg::pad&amp;#039; is never used.">
            <location file0="arc/plat-axs10x/axs10x.c" file="arc\plat-axs10x\axs10x.c" line="354"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)3758166016&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)3758166016&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arc/plat-axs10x/axs10x.c" file="arc\plat-axs10x\axs10x.c" line="313"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;aperture::pad&amp;#039; is never used." verbose="struct member &amp;#039;aperture::pad&amp;#039; is never used.">
            <location file0="arc/plat-axs10x/axs10x.c" file="arc\plat-axs10x\axs10x.c" line="176"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;ver::pad&amp;#039; is never used." verbose="union member &amp;#039;ver::pad&amp;#039; is never used.">
            <location file0="arc/plat-axs10x/axs10x.c" file="arc\plat-axs10x\axs10x.c" line="112"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;pll_reg::pad&amp;#039; is never used." verbose="union member &amp;#039;pll_reg::pad&amp;#039; is never used.">
            <location file0="arc/plat-axs10x/axs10x.c" file="arc\plat-axs10x\axs10x.c" line="352"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fill&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fill&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/boot/compressed/decompress.c" file="..\lib\zlib_inflate\inftrees.c" line="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dist&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dist&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/boot/compressed/decompress.c" file="..\lib\zlib_inflate\inflate.c" line="111"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/boot/compressed/decompress.c" file="..\lib\zlib_inflate\inflate.c" line="412"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/boot/compressed/decompress.c" file="..\lib\xz\xz_crc32.c" line="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/boot/compressed/decompress.c" file="..\lib\xz\xz_dec_stream.c" line="188"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;copy_size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;copy_size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/boot/compressed/decompress.c" file="..\lib\xz\xz_dec_lzma2.c" line="406"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;match_byte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;match_byte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/boot/compressed/decompress.c" file="..\lib\xz\xz_dec_lzma2.c" line="650"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;match_bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;match_bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/boot/compressed/decompress.c" file="..\lib\xz\xz_dec_lzma2.c" line="651"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/boot/compressed/decompress.c" file="..\lib\xz\xz_dec_lzma2.c" line="653"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;limit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;limit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/boot/compressed/decompress.c" file="..\lib\xz\xz_dec_lzma2.c" line="729"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/boot/compressed/decompress.c" file="..\lib\xz\xz_dec_lzma2.c" line="775"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pos_state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pos_state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/boot/compressed/decompress.c" file="..\lib\xz\xz_dec_lzma2.c" line="819"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/boot/compressed/decompress.c" file="..\lib\xz\xz_dec_lzma2.c" line="967"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/boot/compressed/string.c" file="arm\boot\compressed\string.c" line="113"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cluster&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cluster&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/common/bL_switcher.c" file="arm\common\bL_switcher.c" line="294"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;completer_cookie&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;completer_cookie&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/common/bL_switcher.c" file="arm\common\bL_switcher.c" line="296"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gic_id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gic_id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/common/bL_switcher.c" file="arm\common\bL_switcher.c" line="471"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;stack&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;stack&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/bL_switcher.c" file="arm\common\bL_switcher.c" line="135"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf.safe&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf.safe&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/dmabounce.c" file="arm\common\dmabounce.c" line="440"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf.ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf.ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/dmabounce.c" file="arm\common\dmabounce.c" line="440"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf.ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf.ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/dmabounce.c" file="arm\common\dmabounce.c" line="441"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf.safe&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf.safe&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/dmabounce.c" file="arm\common\dmabounce.c" line="441"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf.ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf.ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/dmabounce.c" file="arm\common\dmabounce.c" line="487"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf.safe&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf.safe&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/dmabounce.c" file="arm\common\dmabounce.c" line="487"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf.safe&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf.safe&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/dmabounce.c" file="arm\common\dmabounce.c" line="488"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf.ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf.ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/dmabounce.c" file="arm\common\dmabounce.c" line="488"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bits_pd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bits_pd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/common/it8152.c" file="arm\common\it8152.c" line="112"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bits_lp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bits_lp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/common/it8152.c" file="arm\common\it8152.c" line="112"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bits_ld&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bits_ld&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/common/it8152.c" file="arm\common\it8152.c" line="112"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="147"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="709"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="711"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="714"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="716"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="722"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="724"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="729"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="731"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="736"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="738"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="756"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="758"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="761"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="763"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="776"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="778"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="781"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="783"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="785"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="787"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="791"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="808"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="810"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="813"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="815"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="817"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="819"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="823"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="836"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="838"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="841"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="843"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="845"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="847"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="851"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="858"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="860"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="863"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="865"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="868"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="870"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="874"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mapbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/common/locomo.c" file="arm\common\locomo.c" line="876"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="329"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1464"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1465"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sa1111_save_data::skcr&amp;#039; is never used." verbose="struct member &amp;#039;sa1111_save_data::skcr&amp;#039; is never used.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1031"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sa1111_save_data::skpcr&amp;#039; is never used." verbose="struct member &amp;#039;sa1111_save_data::skpcr&amp;#039; is never used.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1032"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sa1111_save_data::skcdr&amp;#039; is never used." verbose="struct member &amp;#039;sa1111_save_data::skcdr&amp;#039; is never used.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1033"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sa1111_save_data::skaud&amp;#039; is never used." verbose="struct member &amp;#039;sa1111_save_data::skaud&amp;#039; is never used.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1034"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sa1111_save_data::skpwm0&amp;#039; is never used." verbose="struct member &amp;#039;sa1111_save_data::skpwm0&amp;#039; is never used.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1035"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sa1111_save_data::skpwm1&amp;#039; is never used." verbose="struct member &amp;#039;sa1111_save_data::skpwm1&amp;#039; is never used.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1036"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sa1111_save_data::intpol0&amp;#039; is never used." verbose="struct member &amp;#039;sa1111_save_data::intpol0&amp;#039; is never used.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1041"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sa1111_save_data::intpol1&amp;#039; is never used." verbose="struct member &amp;#039;sa1111_save_data::intpol1&amp;#039; is never used.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1042"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sa1111_save_data::inten0&amp;#039; is never used." verbose="struct member &amp;#039;sa1111_save_data::inten0&amp;#039; is never used.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1043"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sa1111_save_data::inten1&amp;#039; is never used." verbose="struct member &amp;#039;sa1111_save_data::inten1&amp;#039; is never used.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1044"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sa1111_save_data::wakepol0&amp;#039; is never used." verbose="struct member &amp;#039;sa1111_save_data::wakepol0&amp;#039; is never used.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1045"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sa1111_save_data::wakepol1&amp;#039; is never used." verbose="struct member &amp;#039;sa1111_save_data::wakepol1&amp;#039; is never used.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1046"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sa1111_save_data::wakeen0&amp;#039; is never used." verbose="struct member &amp;#039;sa1111_save_data::wakeen0&amp;#039; is never used.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1047"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sa1111_save_data::wakeen1&amp;#039; is never used." verbose="struct member &amp;#039;sa1111_save_data::wakeen1&amp;#039; is never used.">
            <location file0="arm/common/sa1111.c" file="arm\common\sa1111.c" line="1048"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous0::unused&amp;#039; is never used." verbose="union member &amp;#039;Anonymous0::unused&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="75"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::video_num_cols&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::video_num_cols&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="56"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::video_num_rows&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::video_num_rows&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="57"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::video_x&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::video_x&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="58"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::video_y&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::video_y&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="59"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::memc_control_reg&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::memc_control_reg&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="60"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::sounddefault&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::sounddefault&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="61"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::adfsdrives&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::adfsdrives&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="62"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::bytes_per_char_h&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::bytes_per_char_h&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="63"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::bytes_per_char_v&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::bytes_per_char_v&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="64"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::pages_in_bank&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::pages_in_bank&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="65"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::pages_in_vram&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::pages_in_vram&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="66"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::mem_fclk_21285&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::mem_fclk_21285&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="73"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous2::paths&amp;#039; is never used." verbose="union member &amp;#039;Anonymous2::paths&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="79"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous3::magic&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous3::magic&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="82"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous3::n&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous3::n&amp;#039; is never used.">
            <location file0="arm/kernel/atags_compat.c" file="arm\kernel\atags_compat.c" line="83"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kernel/bios32.c" file="arm\kernel\bios32.c" line="157"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kernel/bios32.c" file="arm\kernel\bios32.c" line="283"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kernel/bios32.c" file="arm\kernel\bios32.c" line="515"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/crash_dump.c" file="arm\kernel\crash_dump.c" line="53"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/crash_dump.c" file="arm\kernel\crash_dump.c" line="61"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always false because &amp;#039;else if&amp;#039; condition matches previous condition at line 19." verbose="Expression is always false because &amp;#039;else if&amp;#039; condition matches previous condition at line 19.">
            <location file0="arm/kernel/elf.c" file="arm\kernel\elf.c" line="26"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/fiq.c" file="arm\kernel\fiq.c" line="100"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kernel/hw_breakpoint.c" file="arm\kernel\hw_breakpoint.c" line="361"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kernel/hw_breakpoint.c" file="arm\kernel\hw_breakpoint.c" line="427"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/io.c" file="arm\kernel\io.c" line="53"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/io.c" file="arm\kernel\io.c" line="71"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/io.c" file="arm\kernel\io.c" line="86"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/kgdb.c" file="arm\kernel\kgdb.c" line="58"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/kgdb.c" file="arm\kernel\kgdb.c" line="76"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kernel/machine_kexec.c" file="arm\kernel\machine_kexec.c" line="42"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/module-plts.c" file="arm\kernel\module-plts.c" line="237"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/module.c" file="arm\kernel\module.c" line="340"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;mod_unwind_map::unw_sec&amp;#039; is never used." verbose="struct member &amp;#039;mod_unwind_map::unw_sec&amp;#039; is never used.">
            <location file0="arm/kernel/module.c" file="arm\kernel\module.c" line="332"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;mod_unwind_map::txt_sec&amp;#039; is never used." verbose="struct member &amp;#039;mod_unwind_map::txt_sec&amp;#039; is never used.">
            <location file0="arm/kernel/module.c" file="arm\kernel\module.c" line="333"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/module.c" file="arm\kernel\module.c" line="359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kernel/perf_event_v7.c" file="arm\kernel\perf_event_v7.c" line="1749"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kernel/perf_event_v7.c" file="arm\kernel\perf_event_v7.c" line="2128"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/kernel/process.c" file="arm\kernel\process.c" line="150"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/kernel/process.c" file="arm\kernel\process.c" line="151"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/kernel/process.c" file="arm\kernel\process.c" line="152"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/kernel/process.c" file="arm\kernel\process.c" line="153"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;buf&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;buf&amp;#039; is assigned a value that is never used.">
            <location file0="arm/kernel/process.c" file="arm\kernel\process.c" line="154"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;thumb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;thumb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kernel/signal.c" file="arm\kernel\signal.c" line="393"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/signal.c" file="arm\kernel\signal.c" line="761"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;scu_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;scu_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/smp_scu.c" file="arm\kernel\smp_scu.c" line="104"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;scu_base+8&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;scu_base+8&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/smp_scu.c" file="arm\kernel\smp_scu.c" line="104"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;scu_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;scu_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/smp_scu.c" file="arm\kernel\smp_scu.c" line="106"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;scu_base+8&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;scu_base+8&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/smp_scu.c" file="arm\kernel\smp_scu.c" line="106"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;scu_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;scu_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/smp_scu.c" file="arm\kernel\smp_scu.c" line="49"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;scu_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;scu_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/smp_scu.c" file="arm\kernel\smp_scu.c" line="53"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;scu_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;scu_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/smp_scu.c" file="arm\kernel\smp_scu.c" line="59"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;scu_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;scu_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/smp_scu.c" file="arm\kernel\smp_scu.c" line="76"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kernel/smp_twd.c" file="arm\kernel\smp_twd.c" line="201"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kernel/traps.c" file="arm\kernel\traps.c" line="644"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __user*)instruction_pointer(regs)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __user*)instruction_pointer(regs)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/traps.c" file="arm\kernel\traps.c" line="633"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __user*)instruction_pointer(regs)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __user*)instruction_pointer(regs)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/traps.c" file="arm\kernel\traps.c" line="792"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)vectors&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)vectors&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/traps.c" file="arm\kernel\traps.c" line="965"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/vdso.c" file="arm\kernel\vdso.c" line="118"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/vdso.c" file="arm\kernel\vdso.c" line="119"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kernel/vdso.c" file="arm\kernel\vdso.c" line="131"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kvm/mmio.c" file="arm\kvm\mmio.c" line="107"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kvm/mmio.c" file="arm\kvm\mmio.c" line="108"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mask&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mask&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kvm/mmio.c" file="arm\kvm\mmio.c" line="109"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kvm/mmio.c" file="arm\kvm\mmio.c" line="177"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="598"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="641"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="661"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pud&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pud&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="702"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="705"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pud&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pud&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="1012"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="1035"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pte++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pte++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="236"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="275"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="312"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="348"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pte++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pte++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="365"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="392"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="419"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="437"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pte++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pte++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="504"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="529"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="554"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="583"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="654"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="693"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="738"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="786"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pte++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pte++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="1311"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="1346"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="1375"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="1412"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="836"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from+virt_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from+virt_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="836"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/kvm/mmu.c" file="arm\kvm\mmu.c" line="871"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mpidr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mpidr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/kvm/psci.c" file="arm\kvm\psci.c" line="146"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-davinci/aemif.c" file="arm\mach-davinci\aemif.c" line="49"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-davinci/aemif.c" file="arm\mach-davinci\aemif.c" line="55"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-davinci/aemif.c" file="arm\mach-davinci\aemif.c" line="139"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-davinci/aemif.c" file="arm\mach-davinci\aemif.c" line="142"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-davinci/board-da850-evm.c" file="arm\mach-davinci\board-da850-evm.c" line="362"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;button&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;button&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-davinci/board-da850-evm.c" file="arm\mach-davinci\board-da850-evm.c" line="477"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;led&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;led&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-davinci/board-da850-evm.c" file="arm\mach-davinci\board-da850-evm.c" line="712"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;data&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;data&amp;#039; is assigned a value that is never used.">
            <location file0="arm/mach-davinci/board-dm646x-evm.c" file="arm\mach-davinci\board-dm646x-evm.c" line="159"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;rate&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;rate&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="arm/mach-davinci/clock.c" file="arm\mach-davinci\clock.c" line="569"/>
            <location file0="arm/mach-davinci/clock.c" file="arm\mach-davinci\clock.c" line="572"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;diff&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;diff&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-davinci/da850.c" file="arm\mach-davinci\da850.c" line="1195"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-davinci/mux.c" file="arm\mach-davinci\mux.c" line="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reg_orig&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reg_orig&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-davinci/mux.c" file="arm\mach-davinci\mux.c" line="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-davinci/mux.c" file="arm\mach-davinci\mux.c" line="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-davinci/mux.c" file="arm\mach-davinci\mux.c" line="121"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-davinci/pm.c" file="arm\mach-davinci\pm.c" line="37"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;wdtcr&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;wdtcr&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="arm/mach-davinci/time.c" file="arm\mach-davinci\time.c" line="485"/>
            <location file0="arm/mach-davinci/time.c" file="arm\mach-davinci\time.c" line="486"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ebsa110/io.c" file="arm\mach-ebsa110\io.c" line="237"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ebsa110/io.c" file="arm\mach-ebsa110\io.c" line="241"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ebsa110/io.c" file="arm\mach-ebsa110\io.c" line="279"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ebsa110/io.c" file="arm\mach-ebsa110\io.c" line="299"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ebsa110/io.c" file="arm\mach-ebsa110\io.c" line="314"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ebsa110/io.c" file="arm\mach-ebsa110\io.c" line="331"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ebsa110/io.c" file="arm\mach-ebsa110\io.c" line="335"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ebsa110/io.c" file="arm\mach-ebsa110\io.c" line="367"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ebsa110/io.c" file="arm\mach-ebsa110\io.c" line="387"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ebsa110/io.c" file="arm\mach-ebsa110\io.c" line="418"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ebsa110/io.c" file="arm\mach-ebsa110\io.c" line="439"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ebsa110/io.c" file="arm\mach-ebsa110\io.c" line="463"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ebsa110/io.c" file="arm\mach-ebsa110\io.c" line="484"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ebsa110/io.c" file="arm\mach-ebsa110\io.c" line="503"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ISAIO_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ebsa110/io.c" file="arm\mach-ebsa110\io.c" line="515"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mclk_rate&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mclk_rate&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-ep93xx/clock.c" file="arm\mach-ep93xx\clock.c" line="424"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-ep93xx/core.c" file="arm\mach-ep93xx\core.c" line="178"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-exynos/exynos.c" file="arm\mach-exynos\exynos.c" line="159"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ARM_EXYNOS_CPUIDLE;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_SMP&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ARM_EXYNOS_CPUIDLE;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_SMP&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\mach-exynos\exynos.c" line="220"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_PM_SLEEP&amp;#039; since the value of &amp;#039;CONFIG_PM_SLEEP&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_PM_SLEEP&amp;#039; since the value of &amp;#039;CONFIG_PM_SLEEP&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\mach-exynos\firmware.c" line="183"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/mach-footbridge/ebsa285.c" file="arm\mach-footbridge\ebsa285.c" line="73"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;i&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;i&amp;#039; is assigned a value that is never used.">
            <location file0="arm/mach-footbridge/netwinder-hw.c" file="arm\mach-footbridge\netwinder-hw.c" line="493"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;i&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;i&amp;#039; is assigned a value that is never used.">
            <location file0="arm/mach-footbridge/netwinder-hw.c" file="arm\mach-footbridge\netwinder-hw.c" line="509"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;i&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;i&amp;#039; is assigned a value that is never used.">
            <location file0="arm/mach-footbridge/netwinder-hw.c" file="arm\mach-footbridge\netwinder-hw.c" line="546"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-gemini/gpio.c" file="arm\mach-gemini\gpio.c" line="53"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-gemini/gpio.c" file="arm\mach-gemini\gpio.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-hisi/hotplug.c" file="arm\mach-hisi\hotplug.c" line="241"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;np&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;np&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-hisi/hotplug.c" file="arm\mach-hisi\hotplug.c" line="242"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-imx/gpc.c" file="arm\mach-imx\gpc.c" line="527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-imx/iomux-v3.c" file="arm\mach-imx\iomux-v3.c" line="70"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SUSPEND&amp;#039; since the value of &amp;#039;CONFIG_SUSPEND&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SUSPEND&amp;#039; since the value of &amp;#039;CONFIG_SUSPEND&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\mach-imx\pm-imx6.c" line="683"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)(335544320)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)(335544320)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-integrator/integrator_ap.c" file="arm\mach-integrator\integrator_ap.c" line="87"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)(335544320)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)(335544320)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-integrator/integrator_ap.c" file="arm\mach-integrator\integrator_ap.c" line="95"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)(335544320)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)(335544320)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-integrator/integrator_ap.c" file="arm\mach-integrator\integrator_ap.c" line="96"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)(335544320)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)(335544320)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-integrator/integrator_ap.c" file="arm\mach-integrator\integrator_ap.c" line="98"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-iop13xx/setup.c" file="arm\mach-iop13xx\setup.c" line="222"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;query&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;query&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-iop13xx/setup.c" file="arm\mach-iop13xx\setup.c" line="223"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-ixp4xx/ixp4xx_qmgr.c" file="arm\mach-ixp4xx\ixp4xx_qmgr.c" line="59"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-ixp4xx/ixp4xx_qmgr.c" file="arm\mach-ixp4xx\ixp4xx_qmgr.c" line="92"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-ixp4xx/ixp4xx_qmgr.c" file="arm\mach-ixp4xx\ixp4xx_qmgr.c" line="114"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/mach-ks8695/pci.c" file="arm\mach-ks8695\pci.c" line="146"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/mach-ks8695/pci.c" file="arm\mach-ks8695\pci.c" line="147"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/mach-ks8695/pci.c" file="arm\mach-ks8695\pci.c" line="148"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/mach-ks8695/pci.c" file="arm\mach-ks8695\pci.c" line="149"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/mach-ks8695/pci.c" file="arm\mach-ks8695\pci.c" line="150"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-mmp/clock.c" file="arm\mach-mmp\clock.c" line="108"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;reg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;reg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-mxs/mach-mxs.c" file="arm\mach-mxs\mach-mxs.c" line="67"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;reg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;reg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-mxs/mach-mxs.c" file="arm\mach-mxs\mach-mxs.c" line="72"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;reg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;reg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-mxs/mach-mxs.c" file="arm\mach-mxs\mach-mxs.c" line="77"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-netx/xc.c" file="arm\mach-netx\xc.c" line="106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;adr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;adr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-netx/xc.c" file="arm\mach-netx\xc.c" line="106"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-netx/xc.c" file="arm\mach-netx\xc.c" line="175"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irq_num&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irq_num&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap1/ams-delta-fiq.c" file="arm\mach-omap1\ams-delta-fiq.c" line="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fiq_count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fiq_count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap1/ams-delta-fiq.c" file="arm\mach-omap1\ams-delta-fiq.c" line="48"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;err&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;err&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="arm/mach-omap1/board-sx1.c" file="arm\mach-omap1\board-sx1.c" line="100"/>
            <location file0="arm/mach-omap1/board-sx1.c" file="arm\mach-omap1\board-sx1.c" line="106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;uclk&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;uclk&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap1/clock.c" file="arm\mach-omap1\clock.c" line="658"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/mach-omap1/clock.c" file="arm\mach-omap1\clock.c" line="47"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pa&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pa&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap1/clock.c" file="arm\mach-omap1\clock.c" line="1202"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;l&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;l&amp;#039; is assigned a value that is never used.">
            <location file0="arm/mach-omap1/dma.c" file="arm\mach-omap1\dma.c" line="233"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reg_orig&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reg_orig&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap1/mux.c" file="arm\mach-omap1\mux.c" line="352"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap1/mux.c" file="arm\mach-omap1\mux.c" line="352"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pu_pd_orig&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pu_pd_orig&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap1/mux.c" file="arm\mach-omap1\mux.c" line="352"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pu_pd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pu_pd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap1/mux.c" file="arm\mach-omap1\mux.c" line="352"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pull_orig&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pull_orig&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap1/mux.c" file="arm\mach-omap1\mux.c" line="353"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pull&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pull&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap1/mux.c" file="arm\mach-omap1\mux.c" line="353"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;low&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;low&amp;#039; is assigned a value that is never used.">
            <location file0="arm/mach-omap2/clkt2xxx_dpllcore.c" file="arm\mach-omap2\clkt2xxx_dpllcore.c" line="95"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;hwsup&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;hwsup&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="arm/mach-omap2/cm33xx.c" file="arm\mach-omap2\cm33xx.c" line="328"/>
            <location file0="arm/mach-omap2/cm33xx.c" file="arm\mach-omap2\cm33xx.c" line="330"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="arm/mach-omap2/control.c" file="arm\mach-omap2\control.c" line="185"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="arm/mach-omap2/control.c" file="arm\mach-omap2\control.c" line="198"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;cpo&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;cpo&amp;#039; is assigned a value that is never used.">
            <location file0="arm/mach-omap2/control.c" file="arm\mach-omap2\control.c" line="579"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses.">
            <location file0="arm/mach-omap2/display.c" file="arm\mach-omap2\display.c" line="558"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;onenand_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;onenand_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-omap2/gpmc-onenand.c" file="arm\mach-omap2\gpmc-onenand.c" line="101"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;onenand_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;onenand_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-omap2/gpmc-onenand.c" file="arm\mach-omap2\gpmc-onenand.c" line="103"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;onenand_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;onenand_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-omap2/gpmc-onenand.c" file="arm\mach-omap2\gpmc-onenand.c" line="149"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;onenand_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;onenand_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-omap2/gpmc-onenand.c" file="arm\mach-omap2\gpmc-onenand.c" line="155"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;val&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;val&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="arm/mach-omap2/mux.c" file="arm\mach-omap2\mux.c" line="537"/>
            <location file0="arm/mach-omap2/mux.c" file="arm\mach-omap2\mux.c" line="539"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;val&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;val&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="arm/mach-omap2/mux.c" file="arm\mach-omap2\mux.c" line="554"/>
            <location file0="arm/mach-omap2/mux.c" file="arm\mach-omap2\mux.c" line="556"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/omap_device.c" file="arm\mach-omap2\omap_device.c" line="239"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/omap_device.c" file="arm\mach-omap2\omap_device.c" line="405"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/omap_device.c" file="arm\mach-omap2\omap_device.c" line="433"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;os&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;os&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/omap_hwmod.c" file="arm\mach-omap2\omap_hwmod.c" line="933"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;os&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;os&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/omap_hwmod.c" file="arm\mach-omap2\omap_hwmod.c" line="1057"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;os&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;os&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/omap_hwmod.c" file="arm\mach-omap2\omap_hwmod.c" line="1098"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;clkdm_act&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;clkdm_act&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/omap_hwmod.c" file="arm\mach-omap2\omap_hwmod.c" line="1555"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/omap_hwmod.c" file="arm\mach-omap2\omap_hwmod.c" line="2699"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;res&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;res&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/omap_hwmod.c" file="arm\mach-omap2\omap_hwmod.c" line="2794"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;os&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;os&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/omap_hwmod.c" file="arm\mach-omap2\omap_hwmod.c" line="4100"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;os&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;os&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/omap_hwmod.c" file="arm\mach-omap2\omap_hwmod.c" line="4125"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr_cnt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr_cnt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/omap_hwmod.c" file="arm\mach-omap2\omap_hwmod.c" line="4127"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)(*ml)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)(*ml)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-omap2/omap_hwmod.c" file="arm\mach-omap2\omap_hwmod.c" line="3351"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;regval&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;regval&amp;#039; is assigned a value that is never used.">
            <location file0="arm/mach-omap2/omap_phy_internal.c" file="arm\mach-omap2\omap_phy_internal.c" line="87"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;regval&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;regval&amp;#039; is assigned a value that is never used.">
            <location file0="arm/mach-omap2/omap_phy_internal.c" file="arm\mach-omap2\omap_phy_internal.c" line="141"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;v&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;v&amp;#039; is assigned a value that is never used.">
            <location file0="arm/mach-omap2/pdata-quirks.c" file="arm\mach-omap2\pdata-quirks.c" line="216"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;v&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;v&amp;#039; is assigned a value that is never used.">
            <location file0="arm/mach-omap2/pdata-quirks.c" file="arm\mach-omap2\pdata-quirks.c" line="227"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;mpu_next_state&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;mpu_next_state&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="arm/mach-omap2/pm34xx.c" file="arm\mach-omap2\pm34xx.c" line="204"/>
            <location file0="arm/mach-omap2/pm34xx.c" file="arm\mach-omap2\pm34xx.c" line="210"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;per_going_off&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;per_going_off&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/pm34xx.c" file="arm\mach-omap2\pm34xx.c" line="207"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/pm44xx.c" file="arm\mach-omap2\pm44xx.c" line="214"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;from&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;from&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/pm44xx.c" file="arm\mach-omap2\pm44xx.c" line="215"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;to&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;to&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/pm44xx.c" file="arm\mach-omap2\pm44xx.c" line="215"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/pm44xx.c" file="arm\mach-omap2\pm44xx.c" line="60"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;trace_state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;trace_state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/powerdomain.c" file="arm\mach-omap2\powerdomain.c" line="190"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irq_num&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irq_num&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/prm3xxx.c" file="arm\mach-omap2\prm3xxx.c" line="750"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/prm_common.c" file="arm\mach-omap2\prm_common.c" line="211"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;v&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;v&amp;#039; is assigned a value that is never used.">
            <location file0="arm/mach-omap2/prminst44xx.c" file="arm\mach-omap2\prminst44xx.c" line="198"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-omap2/voltage.c" file="arm\mach-omap2\voltage.c" line="364"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-orion5x/kurobox_pro-setup.c" file="arm\mach-orion5x\kurobox_pro-setup.c" line="204"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-orion5x/terastation_pro2-setup.c" file="arm\mach-orion5x\terastation_pro2-setup.c" line="188"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-orion5x/ts78xx-setup.c" file="arm\mach-orion5x\ts78xx-setup.c" line="130"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-pxa/balloon3.c" file="arm\mach-pxa\balloon3.c" line="553"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;balloon3_ctl_set&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;balloon3_ctl_set&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-pxa/balloon3.c" file="arm\mach-pxa\balloon3.c" line="632"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;balloon3_ctl_clr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;balloon3_ctl_clr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-pxa/balloon3.c" file="arm\mach-pxa\balloon3.c" line="632"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-pxa/cm-x270.c" file="arm\mach-pxa\cm-x270.c" line="214"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="arm/mach-pxa/magician.c" file="arm\mach-pxa\magician.c" line="581"/>
            <location file0="arm/mach-pxa/magician.c" file="arm\mach-pxa\magician.c" line="583"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gpio&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gpio&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-pxa/mfp-pxa2xx.c" file="arm\mach-pxa\mfp-pxa2xx.c" line="160"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gpio&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gpio&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-pxa/mfp-pxa2xx.c" file="arm\mach-pxa\mfp-pxa2xx.c" line="324"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;d&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;d&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-pxa/mfp-pxa2xx.c" file="arm\mach-pxa\mfp-pxa2xx.c" line="325"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;val&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;val&amp;#039; is assigned a value that is never used.">
            <location file0="arm/mach-pxa/pcm990-baseboard.c" file="arm\mach-pxa\pcm990-baseboard.c" line="376"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-pxa/pcm990-baseboard.c" file="arm\mach-pxa\pcm990-baseboard.c" line="482"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-pxa/pm.c" file="arm\mach-pxa\pm.c" line="26"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;ASCR&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;ASCR&amp;#039; to itself.">
            <location file0="arm/mach-pxa/pxa3xx.c" file="arm\mach-pxa\pxa3xx.c" line="81"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;ARSR&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;ARSR&amp;#039; to itself.">
            <location file0="arm/mach-pxa/pxa3xx.c" file="arm\mach-pxa\pxa3xx.c" line="82"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;ASCR&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;ASCR&amp;#039; to itself.">
            <location file0="arm/mach-pxa/pxa3xx.c" file="arm\mach-pxa\pxa3xx.c" line="117"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;ARSR&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;ARSR&amp;#039; to itself.">
            <location file0="arm/mach-pxa/pxa3xx.c" file="arm\mach-pxa\pxa3xx.c" line="118"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-rockchip/platsmp.c" file="arm\mach-rockchip\platsmp.c" line="84"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-rpc/dma.c" file="arm\mach-rpc\dma.c" line="60"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-rpc/dma.c" file="arm\mach-rpc\dma.c" line="60"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;IOMD_ECTCR&amp;#039; since the value of &amp;#039;IOMD_ECTCR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;IOMD_ECTCR&amp;#039; since the value of &amp;#039;IOMD_ECTCR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\mach-rpc\ecard.c" line="728"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irqno&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irqno&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-s3c24xx/bast-irq.c" file="arm\mach-s3c24xx\bast-irq.c" line="108"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-s3c24xx/bast-irq.c" file="arm\mach-s3c24xx\bast-irq.c" line="109"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-s3c24xx/iotiming-s3c2410.c" file="arm\mach-s3c24xx\iotiming-s3c2410.c" line="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-s3c24xx/iotiming-s3c2410.c" file="arm\mach-s3c24xx\iotiming-s3c2410.c" line="430"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bankcon&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bankcon&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-s3c24xx/iotiming-s3c2410.c" file="arm\mach-s3c24xx\iotiming-s3c2410.c" line="467"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-s3c24xx/iotiming-s3c2412.c" file="arm\mach-s3c24xx\iotiming-s3c2412.c" line="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-s3c24xx/iotiming-s3c2412.c" file="arm\mach-s3c24xx\iotiming-s3c2412.c" line="190"/>
        </error>
        <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with numeric constant." verbose="Redundant code: Found a statement that begins with numeric constant.">
            <location file0="arm/mach-s3c24xx/mach-amlm5900.c" file="arm\mach-s3c24xx\mach-amlm5900.c" line="176"/>
        </error>
        <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with numeric constant." verbose="Redundant code: Found a statement that begins with numeric constant.">
            <location file0="arm/mach-s3c24xx/mach-bast.c" file="arm\mach-s3c24xx\mach-bast.c" line="590"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-s3c24xx/mach-h1940.c" file="arm\mach-s3c24xx\mach-h1940.c" line="583"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;retries&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;retries&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-s3c24xx/mach-h1940.c" file="arm\mach-s3c24xx\mach-h1940.c" line="583"/>
        </error>
        <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with numeric constant." verbose="Redundant code: Found a statement that begins with numeric constant.">
            <location file0="arm/mach-s3c24xx/mach-h1940.c" file="arm\mach-s3c24xx\mach-h1940.c" line="737"/>
        </error>
        <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with numeric constant." verbose="Redundant code: Found a statement that begins with numeric constant.">
            <location file0="arm/mach-s3c24xx/mach-jive.c" file="arm\mach-s3c24xx\mach-jive.c" line="540"/>
        </error>
        <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with numeric constant." verbose="Redundant code: Found a statement that begins with numeric constant.">
            <location file0="arm/mach-s3c24xx/mach-n30.c" file="arm\mach-s3c24xx\mach-n30.c" line="580"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses.">
            <location file0="arm/mach-s3c24xx/mach-osiris-dvs.c" file="arm\mach-s3c24xx\mach-osiris-dvs.c" line="77"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses.">
            <location file0="arm/mach-s3c24xx/mach-osiris-dvs.c" file="arm\mach-s3c24xx\mach-osiris-dvs.c" line="78"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses.">
            <location file0="arm/mach-s3c24xx/mach-osiris-dvs.c" file="arm\mach-s3c24xx\mach-osiris-dvs.c" line="88"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses.">
            <location file0="arm/mach-s3c24xx/mach-osiris-dvs.c" file="arm\mach-s3c24xx\mach-osiris-dvs.c" line="89"/>
        </error>
        <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with numeric constant." verbose="Redundant code: Found a statement that begins with numeric constant.">
            <location file0="arm/mach-s3c24xx/mach-otom.c" file="arm\mach-s3c24xx\mach-otom.c" line="113"/>
        </error>
        <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with numeric constant." verbose="Redundant code: Found a statement that begins with numeric constant.">
            <location file0="arm/mach-s3c24xx/mach-qt2410.c" file="arm\mach-s3c24xx\mach-qt2410.c" line="328"/>
        </error>
        <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with numeric constant." verbose="Redundant code: Found a statement that begins with numeric constant.">
            <location file0="arm/mach-s3c24xx/mach-smdk2410.c" file="arm\mach-s3c24xx\mach-smdk2410.c" line="111"/>
        </error>
        <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with numeric constant." verbose="Redundant code: Found a statement that begins with numeric constant.">
            <location file0="arm/mach-s3c24xx/mach-smdk2413.c" file="arm\mach-s3c24xx\mach-smdk2413.c" line="117"/>
        </error>
        <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with numeric constant." verbose="Redundant code: Found a statement that begins with numeric constant.">
            <location file0="arm/mach-s3c24xx/mach-smdk2416.c" file="arm\mach-s3c24xx\mach-smdk2416.c" line="235"/>
        </error>
        <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with numeric constant." verbose="Redundant code: Found a statement that begins with numeric constant.">
            <location file0="arm/mach-s3c24xx/mach-smdk2443.c" file="arm\mach-s3c24xx\mach-smdk2443.c" line="132"/>
        </error>
        <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with numeric constant." verbose="Redundant code: Found a statement that begins with numeric constant.">
            <location file0="arm/mach-s3c24xx/mach-tct_hammer.c" file="arm\mach-s3c24xx\mach-tct_hammer.c" line="150"/>
        </error>
        <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with numeric constant." verbose="Redundant code: Found a statement that begins with numeric constant.">
            <location file0="arm/mach-s3c24xx/mach-vr1000.c" file="arm\mach-s3c24xx\mach-vr1000.c" line="335"/>
        </error>
        <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with numeric constant." verbose="Redundant code: Found a statement that begins with numeric constant.">
            <location file0="arm/mach-s3c24xx/mach-vstms.c" file="arm\mach-s3c24xx\mach-vstms.c" line="155"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-s3c24xx/pm-s3c2410.c" file="arm\mach-s3c24xx\pm-s3c2410.c" line="63"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-s3c24xx/pm-s3c2410.c" file="arm\mach-s3c24xx\pm-s3c2410.c" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-s3c24xx/simtec-usb.c" file="arm\mach-s3c24xx\simtec-usb.c" line="85"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SERIAL_SAMSUNG_UARTS&amp;#039; since the value of &amp;#039;CONFIG_SERIAL_SAMSUNG_UARTS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SERIAL_SAMSUNG_UARTS&amp;#039; since the value of &amp;#039;CONFIG_SERIAL_SAMSUNG_UARTS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\mach-s3c64xx\irq-pm.c" line="66"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SERIAL_SAMSUNG_UARTS&amp;#039; since the value of &amp;#039;CONFIG_SERIAL_SAMSUNG_UARTS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SERIAL_SAMSUNG_UARTS&amp;#039; since the value of &amp;#039;CONFIG_SERIAL_SAMSUNG_UARTS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\mach-s3c64xx\irq-pm.c" line="77"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SERIAL_SAMSUNG_UARTS&amp;#039; since the value of &amp;#039;CONFIG_SERIAL_SAMSUNG_UARTS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SERIAL_SAMSUNG_UARTS&amp;#039; since the value of &amp;#039;CONFIG_SERIAL_SAMSUNG_UARTS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\mach-s3c64xx\irq-pm.c" line="101"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-s3c64xx/mach-crag6410-module.c" file="arm\mach-s3c64xx\mach-crag6410-module.c" line="414"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-s3c64xx/mach-smartq.c" file="arm\mach-s3c64xx\mach-smartq.c" line="109"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;retry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;retry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-s3c64xx/pm.c" file="arm\mach-s3c64xx\pm.c" line="65"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;bsr&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;bsr&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="arm/mach-sa1100/assabet.c" file="arm\mach-sa1100\assabet.c" line="666"/>
            <location file0="arm/mach-sa1100/assabet.c" file="arm\mach-sa1100\assabet.c" line="669"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bcr_state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bcr_state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-sa1100/assabet.c" file="arm\mach-sa1100\assabet.c" line="312"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-sa1100/clock.c" file="arm\mach-sa1100\clock.c" line="73"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-sa1100/clock.c" file="arm\mach-sa1100\clock.c" line="93"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-sa1100/jornada720_ssp.c" file="arm\mach-sa1100\jornada720_ssp.c" line="92"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-sa1100/neponset.c" file="arm\mach-sa1100\neponset.c" line="221"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)NANO_PCI_CONFIG_SPACE_VIRT&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)NANO_PCI_CONFIG_SPACE_VIRT&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-sa1100/pci-nanoengine.c" file="arm\mach-sa1100\pci-nanoengine.c" line="40"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;is_allowed&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;is_allowed&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-shmobile/platsmp-apmu.c" file="arm\mach-shmobile\platsmp-apmu.c" line="102"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ioaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ioaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-socfpga/ocram.c" file="arm\mach-socfpga\ocram.c" line="113"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ioaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ioaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-socfpga/ocram.c" file="arm\mach-socfpga\ocram.c" line="118"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ioaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ioaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mach-socfpga/ocram.c" file="arm\mach-socfpga\ocram.c" line="133"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-spear/pl080.c" file="arm\mach-spear\pl080.c" line="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mach-tango/platsmp.c" file="arm\mach-tango\platsmp.c" line="22"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="arm\mach-tegra\cpuidle-tegra114.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="arm\mach-tegra\cpuidle-tegra114.c" line="0"/>
        </error>
        <error id="syntaxError" severity="error" msg="Invalid number of character &amp;#039;(&amp;#039; when these macros are defined: &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039;." verbose="Invalid number of character &amp;#039;(&amp;#039; when these macros are defined: &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039;.">
            <location file0="arm/mach-tegra/cpuidle-tegra114.c" file="arm\mach-tegra\sleep.h" line="102"/>
        </error>
        <error id="syntaxError" severity="error" msg="Invalid number of character &amp;#039;(&amp;#039; when these macros are defined: &amp;#039;__ASSEMBLY__&amp;#039;." verbose="Invalid number of character &amp;#039;(&amp;#039; when these macros are defined: &amp;#039;__ASSEMBLY__&amp;#039;.">
            <location file0="arm/mach-tegra/cpuidle-tegra114.c" file="arm\mach-tegra\sleep.h" line="102"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="arm\mach-tegra\cpuidle-tegra20.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="arm\mach-tegra\cpuidle-tegra20.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="arm\mach-tegra\cpuidle-tegra30.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="arm\mach-tegra\cpuidle-tegra30.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ARCH_TEGRA_2x_SOC&amp;#039; since the value of &amp;#039;CONFIG_ARCH_TEGRA_2x_SOC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ARCH_TEGRA_2x_SOC&amp;#039; since the value of &amp;#039;CONFIG_ARCH_TEGRA_2x_SOC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\mach-tegra\hotplug.c" line="71"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="arm\mach-tegra\hotplug.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_HOTPLUG_CPU&amp;#039; since the value of &amp;#039;CONFIG_HOTPLUG_CPU&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_HOTPLUG_CPU&amp;#039; since the value of &amp;#039;CONFIG_HOTPLUG_CPU&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\mach-tegra\hotplug.c" line="61"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="arm\mach-tegra\hotplug.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="arm\mach-tegra\pm.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="arm\mach-tegra\pm.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="arm\mach-tegra\reset.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="arm\mach-tegra\reset.c" line="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ARCH_TEGRA_2x_SOC&amp;#039; since the value of &amp;#039;CONFIG_ARCH_TEGRA_2x_SOC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ARCH_TEGRA_2x_SOC&amp;#039; since the value of &amp;#039;CONFIG_ARCH_TEGRA_2x_SOC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\mach-tegra\tegra.c" line="132"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;CONFIG_HAVE_ARM_SCU;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="arm\mach-tegra\tegra.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="arm\mach-tegra\tegra.c" line="0"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/mach-ux500/pm.c" file="arm\mach-ux500\pm.c" line="144"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/mach-vexpress/spc.c" file="arm\mach-vexpress\spc.c" line="367"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mode&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mode&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/alignment.c" file="arm\mm\alignment.c" line="164"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;&amp;#039; was not checked because its code equals another one.">
            <location file="arm\mm\cache-l2x0-pmu.c" line="0"/>
        </error>
        <error id="cppcheckError" severity="error" msg="Internal error. Token::astOperand1() cyclic dependency." verbose="Internal error. Token::astOperand1() cyclic dependency.">
            <location file0="arm/mm/cache-l2x0-pmu.c" file="arm\mm\cache-l2x0-pmu.c" line="440"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="79"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="90"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="116"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="118"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="148"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="149"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="150"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="201"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="300"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="301"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="309"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="441"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="638"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="842"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;range_end&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;range_end&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="1590"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="1677"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="1678"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="1952"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/cache-l2x0.c" file="arm\mm\cache-l2x0.c" line="1954"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;set_way&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;set_way&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/cache-xsc3l2.c" file="arm\mm\cache-xsc3l2.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;set_way&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;set_way&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/cache-xsc3l2.c" file="arm\mm\cache-xsc3l2.c" line="180"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/dma-mapping.c" file="arm\mm\dma-mapping.c" line="317"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/dma-mapping.c" file="arm\mm\dma-mapping.c" line="337"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/dma-mapping.c" file="arm\mm\dma-mapping.c" line="1115"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/mm/dma-mapping.c" file="arm\mm\dma-mapping.c" line="1124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/dma-mapping.c" file="arm\mm\dma-mapping.c" line="1577"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;delta&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;delta&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/dump.c" file="arm\mm\dump.c" line="248"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/dump.c" file="arm\mm\dump.c" line="288"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/dump.c" file="arm\mm\dump.c" line="301"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/dump.c" file="arm\mm\dump.c" line="327"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/dump.c" file="arm\mm\dump.c" line="349"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/mm/fault.c" file="arm\mm\fault.c" line="259"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;idx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;idx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/highmem.c" file="arm\mm\highmem.c" line="122"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/highmem.c" file="arm\mm\highmem.c" line="122"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/mm/idmap.c" file="arm\mm\idmap.c" line="86"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/mm/idmap.c" file="arm\mm\idmap.c" line="113"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm/mm/idmap.c" file="arm\mm\idmap.c" line="59"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;__io&amp;#039; since the value of &amp;#039;__io&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;__io&amp;#039; since the value of &amp;#039;__io&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\mm\iomap.c" line="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vm&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vm&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/ioremap.c" file="arm\mm\ioremap.c" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vm&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vm&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/ioremap.c" file="arm\mm\ioremap.c" line="81"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/mmap.c" file="arm\mm\mmap.c" line="67"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/mm/mmap.c" file="arm\mm\mmap.c" line="134"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_HIGHMEM&amp;#039; since the value of &amp;#039;CONFIG_HIGHMEM&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_HIGHMEM&amp;#039; since the value of &amp;#039;CONFIG_HIGHMEM&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\mm\mmu.c" line="1353"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FLUSH_BASE&amp;#039; since the value of &amp;#039;FLUSH_BASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FLUSH_BASE&amp;#039; since the value of &amp;#039;FLUSH_BASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\mm\mmu.c" line="1562"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FLUSH_BASE_MINICACHE&amp;#039; since the value of &amp;#039;FLUSH_BASE_MINICACHE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FLUSH_BASE_MINICACHE&amp;#039; since the value of &amp;#039;FLUSH_BASE_MINICACHE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\mm\mmu.c" line="1569"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;negCount&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;negCount&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/nwfpe/softfloat.c" file="arm\nwfpe\softfloat-macros" line="320"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;b1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;b1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/nwfpe/softfloat.c" file="arm\nwfpe\softfloat-macros" line="562"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;isTiny&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;isTiny&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/nwfpe/softfloat.c" file="arm\nwfpe\softfloat.c" line="235"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;isTiny&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;isTiny&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/nwfpe/softfloat.c" file="arm\nwfpe\softfloat.c" line="424"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aSign&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aSign&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/nwfpe/softfloat.c" file="arm\nwfpe\softfloat.c" line="1124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aSig64&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aSig64&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/nwfpe/softfloat.c" file="arm\nwfpe\softfloat.c" line="1631"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bSig64&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bSig64&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/nwfpe/softfloat.c" file="arm\nwfpe\softfloat.c" line="1631"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;q64&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;q64&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/nwfpe/softfloat.c" file="arm\nwfpe\softfloat.c" line="1631"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rem&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rem&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/nwfpe/softfloat.c" file="arm\nwfpe\softfloat.c" line="1772"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;term&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;term&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/nwfpe/softfloat.c" file="arm\nwfpe\softfloat.c" line="1772"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aSign&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aSign&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/nwfpe/softfloat.c" file="arm\nwfpe\softfloat.c" line="2270"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;bSign&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;bSign&amp;#039; is assigned a value that is never used.">
            <location file0="arm/nwfpe/softfloat.c" file="arm\nwfpe\softfloat.c" line="1640"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;bSign&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;bSign&amp;#039; is assigned a value that is never used.">
            <location file0="arm/nwfpe/softfloat.c" file="arm\nwfpe\softfloat.c" line="2789"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aSign&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aSign&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/nwfpe/softfloat.c" file="arm\nwfpe\softfloat.c" line="3310"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/plat-omap/dma.c" file="arm\plat-omap\dma.c" line="180"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/plat-omap/dmtimer.c" file="arm\plat-omap\dmtimer.c" line="421"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/plat-orion/gpio.c" file="arm\plat-orion\gpio.c" line="562"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/plat-orion/gpio.c" file="arm\plat-orion\gpio.c" line="563"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/plat-orion/gpio.c" file="arm\plat-orion\gpio.c" line="568"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/plat-orion/gpio.c" file="arm\plat-orion\gpio.c" line="569"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/plat-orion/gpio.c" file="arm\plat-orion\gpio.c" line="587"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="57"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="62"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="67"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="77"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="224"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="226"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="247"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="249"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="254"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;wa_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;wa_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="272"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="298"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="302"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="306"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base+6396&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base+6396&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="306"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="310"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base+6396&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base+6396&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/plat-orion/pcie.c" file="arm\plat-orion\pcie.c" line="310"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/plat-samsung/gpio-samsung.c" file="arm\plat-samsung\gpio-samsung.c" line="1381"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/plat-samsung/gpio-samsung.c" file="arm\plat-samsung\gpio-samsung.c" line="1400"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/plat-samsung/gpio-samsung.c" file="arm\plat-samsung\gpio-samsung.c" line="1420"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/plat-samsung/gpio-samsung.c" file="arm\plat-samsung\gpio-samsung.c" line="1422"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/plat-samsung/gpio-samsung.c" file="arm\plat-samsung\gpio-samsung.c" line="1461"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/plat-samsung/gpio-samsung.c" file="arm\plat-samsung\gpio-samsung.c" line="1462"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ourchip&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ourchip&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/plat-samsung/pm-gpio.c" file="arm\plat-samsung\pm-gpio.c" line="365"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ourchip&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ourchip&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/plat-samsung/pm-gpio.c" file="arm\plat-samsung\pm-gpio.c" line="412"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_THUMB2_KERNEL&amp;#039; since the value of &amp;#039;CONFIG_THUMB2_KERNEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_THUMB2_KERNEL&amp;#039; since the value of &amp;#039;CONFIG_THUMB2_KERNEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\probes\kprobes\core.c" line="156"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/probes/kprobes/test-core.c" file="arm\probes\kprobes\test-core.c" line="632"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/probes/kprobes/test-core.c" file="arm\probes\kprobes\test-core.c" line="685"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;result&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;result&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/probes/kprobes/test-core.c" file="arm\probes\kprobes\test-core.c" line="749"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;xol_page_kaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;xol_page_kaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm/probes/uprobes/core.c" file="arm\probes\uprobes\core.c" line="132"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/vfp/vfpdouble.c" file="arm\vfp\vfpdouble.c" line="1473"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_VFPv3&amp;#039; since the value of &amp;#039;CONFIG_VFPv3&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_VFPv3&amp;#039; since the value of &amp;#039;CONFIG_VFPv3&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm\vfp\vfpmodule.c" line="850"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="arm/vfp/vfpsingle.c" file="arm\vfp\vfpsingle.c" line="1504"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm/xen/p2m.c" file="arm\xen\p2m.c" line="74"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)&amp;amp;(alt).alt_offset&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)&amp;amp;(alt).alt_offset&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/alternative.c" file="arm64\kernel\alternative.c" line="53"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)&amp;amp;(alt).orig_offset&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)&amp;amp;(alt).orig_offset&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/alternative.c" file="arm64\kernel\alternative.c" line="140"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)&amp;amp;(alt).alt_offset&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)&amp;amp;(alt).alt_offset&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/alternative.c" file="arm64\kernel\alternative.c" line="141"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/alternative.c" file="arm64\kernel\alternative.c" line="200"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses.">
            <location file0="arm64/kernel/cacheinfo.c" file="arm64\kernel\cacheinfo.c" line="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ctype&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ctype&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/kernel/cacheinfo.c" file="arm64\kernel\cacheinfo.c" line="90"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/kernel/hibernate.c" file="arm64\kernel\hibernate.c" line="162"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;dst_pte++,src_pte++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;dst_pte++,src_pte++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm64/kernel/hibernate.c" file="arm64\kernel\hibernate.c" line="411"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;dst_pmd++,src_pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;dst_pmd++,src_pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm64/kernel/hibernate.c" file="arm64\kernel\hibernate.c" line="462"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;dst_pud++,src_pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;dst_pud++,src_pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm64/kernel/hibernate.c" file="arm64\kernel\hibernate.c" line="513"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;dst_pgd++,src_pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;dst_pgd++,src_pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm64/kernel/hibernate.c" file="arm64\kernel\hibernate.c" line="541"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/kernel/hw_breakpoint.c" file="arm64\kernel\hw_breakpoint.c" line="216"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/io.c" file="arm64\kernel\io.c" line="32"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/io.c" file="arm64\kernel\io.c" line="33"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/io.c" file="arm64\kernel\io.c" line="40"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/io.c" file="arm64\kernel\io.c" line="41"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/io.c" file="arm64\kernel\io.c" line="48"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/io.c" file="arm64\kernel\io.c" line="49"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/io.c" file="arm64\kernel\io.c" line="64"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/io.c" file="arm64\kernel\io.c" line="65"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/io.c" file="arm64\kernel\io.c" line="72"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/io.c" file="arm64\kernel\io.c" line="73"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/io.c" file="arm64\kernel\io.c" line="80"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/io.c" file="arm64\kernel\io.c" line="81"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/io.c" file="arm64\kernel\io.c" line="101"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/io.c" file="arm64\kernel\io.c" line="108"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/io.c" file="arm64\kernel\io.c" line="115"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/kgdb.c" file="arm64\kernel\kgdb.c" line="122"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/kgdb.c" file="arm64\kernel\kgdb.c" line="140"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/module-plts.c" file="arm64\kernel\module-plts.c" line="207"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/module.c" file="arm64\kernel\module.c" line="242"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/module.c" file="arm64\kernel\module.c" line="480"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;kbuf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;kbuf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/ptrace.c" file="arm64\kernel\ptrace.c" line="963"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ubuf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ubuf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/ptrace.c" file="arm64\kernel\ptrace.c" line="975"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;kbuf&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;kbuf&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/ptrace.c" file="arm64\kernel\ptrace.c" line="1012"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ubuf&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ubuf&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/ptrace.c" file="arm64\kernel\ptrace.c" line="1024"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;aux&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;aux&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/signal.c" file="arm64\kernel\signal.c" line="217"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;aux&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;aux&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/signal.c" file="arm64\kernel\signal.c" line="228"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;compat_ucontext::__unused&amp;#039; is never used." verbose="struct member &amp;#039;compat_ucontext::__unused&amp;#039; is never used.">
            <location file0="arm64/kernel/signal32.c" file="arm64\kernel\signal32.c" line="66"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;BUS_MCEERR_AO&amp;#039; since the value of &amp;#039;BUS_MCEERR_AO&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;BUS_MCEERR_AO&amp;#039; since the value of &amp;#039;BUS_MCEERR_AO&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm64\kernel\signal32.c" line="190"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses.">
            <location file0="arm64/kernel/smp.c" file="arm64\kernel\smp.c" line="104"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/kernel/sys_compat.c" file="arm64\kernel\sys_compat.c" line="34"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)vpage&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)vpage&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/vdso.c" file="arm64\kernel\vdso.c" line="76"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)vpage&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)vpage&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/kernel/vdso.c" file="arm64\kernel\vdso.c" line="80"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: clidr" verbose="Uninitialized variable: clidr">
            <location file0="arm64/kvm/sys_regs.c" file="arm64\kvm\sys_regs.c" line="2755"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: clidr.val" verbose="Uninitialized struct member: clidr.val">
            <location file0="arm64/kvm/sys_regs.c" file="arm64\kvm\sys_regs.c" line="2756"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/mm/dma-mapping.c" file="arm64\mm\dma-mapping.c" line="278"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/mm/dma-mapping.c" file="arm64\mm\dma-mapping.c" line="279"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/mm/dma-mapping.c" file="arm64\mm\dma-mapping.c" line="296"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/mm/dma-mapping.c" file="arm64\mm\dma-mapping.c" line="297"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/mm/dma-mapping.c" file="arm64\mm\dma-mapping.c" line="335"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/mm/dma-mapping.c" file="arm64\mm\dma-mapping.c" line="336"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/mm/dma-mapping.c" file="arm64\mm\dma-mapping.c" line="350"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/mm/dma-mapping.c" file="arm64\mm\dma-mapping.c" line="351"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;delta&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;delta&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/mm/dump.c" file="arm64\mm\dump.c" line="223"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/mm/dump.c" file="arm64\mm\dump.c" line="270"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/mm/dump.c" file="arm64\mm\dump.c" line="283"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/mm/dump.c" file="arm64\mm\dump.c" line="305"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/mm/dump.c" file="arm64\mm\dump.c" line="329"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cpte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cpte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="arm64/mm/hugetlbpage.c" file="arm64\mm\hugetlbpage.c" line="309"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_BLK_DEV_INITRD&amp;#039; since the value of &amp;#039;CONFIG_BLK_DEV_INITRD&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_BLK_DEV_INITRD&amp;#039; since the value of &amp;#039;CONFIG_BLK_DEV_INITRD&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm64\mm\init.c" line="251"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ZONE_DMA&amp;#039; since the value of &amp;#039;CONFIG_ZONE_DMA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ZONE_DMA&amp;#039; since the value of &amp;#039;CONFIG_ZONE_DMA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="arm64\mm\init.c" line="324"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pte++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pte++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm64/mm/mmu.c" file="arm64\mm\mmu.c" line="131"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm64/mm/mmu.c" file="arm64\mm\mmu.c" line="201"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm64/mm/mmu.c" file="arm64\mm\mmu.c" line="284"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="arm64/mm/mmu.c" file="arm64\mm\mmu.c" line="320"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)dt_virt_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)dt_virt_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="arm64/mm/mmu.c" file="arm64\mm\mmu.c" line="820"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer.">
            <location file0="arm64/mm/numa.c" file="arm64\mm\numa.c" line="76"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/kernel/module.c" file="avr32\kernel\module.c" line="103"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/kernel/module.c" file="avr32\kernel\module.c" line="104"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/kernel/module.c" file="avr32\kernel\module.c" line="131"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)dstsec.sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)dstsec.sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/kernel/module.c" file="avr32\kernel\module.c" line="192"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="184"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="279"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="280"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="281"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="282"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="283"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="285"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="286"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="287"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="288"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="289"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="290"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="291"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="292"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="293"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="294"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="avr32/kernel/process.c" file="avr32\kernel\process.c" line="132"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mul&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mul&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="131"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pll_in&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pll_in&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="138"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="218"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;div&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;div&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="423"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;div&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;div&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="644"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="211"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="222"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="234"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="239"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="256"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="264"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="290"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="305"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="321"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="391"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="402"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="410"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="426"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="462"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="474"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="485"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="493"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="509"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="520"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="528"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="544"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="555"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="563"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="612"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="623"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="631"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="647"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="666"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="679"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="703"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="716"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="2772"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="2783"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="2788"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="2842"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="2843"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="2844"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/at32ap700x.c" file="avr32\mach-at32ap\at32ap700x.c" line="2845"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/clock.c" file="avr32\mach-at32ap\clock.c" line="305"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/clock.c" file="avr32\mach-at32ap\clock.c" line="306"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/clock.c" file="avr32\mach-at32ap\clock.c" line="307"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/clock.c" file="avr32\mach-at32ap\clock.c" line="308"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/clock.c" file="avr32\mach-at32ap\clock.c" line="309"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/clock.c" file="avr32\mach-at32ap\clock.c" line="310"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/clock.c" file="avr32\mach-at32ap\clock.c" line="311"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/clock.c" file="avr32\mach-at32ap\clock.c" line="312"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/clock.c" file="avr32\mach-at32ap\clock.c" line="313"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)PM_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/clock.c" file="avr32\mach-at32ap\clock.c" line="322"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="avr32/mach-at32ap/extint.c" file="avr32\mach-at32ap\extint.c" line="166"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;psr&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;psr&amp;#039; is assigned a value that is never used.">
            <location file0="avr32/mach-at32ap/pio.c" file="avr32\mach-at32ap\pio.c" line="414"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)SDRAMC_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)SDRAMC_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/pm.c" file="avr32\mach-at32ap\pm.c" line="132"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)SDRAMC_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)SDRAMC_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/pm.c" file="avr32\mach-at32ap\pm.c" line="135"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)SDRAMC_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)SDRAMC_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/pm.c" file="avr32\mach-at32ap\pm.c" line="154"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem __force*)SDRAMC_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem __force*)SDRAMC_BASE&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="avr32/mach-at32ap/pm.c" file="avr32\mach-at32ap\pm.c" line="157"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="avr32/mm/tlb.c" file="avr32\mm\tlb.c" line="251"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dir&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dir&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="avr32/oprofile/op_model_avr32.c" file="avr32\oprofile\op_model_avr32.c" line="113"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ctr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ctr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="avr32/oprofile/op_model_avr32.c" file="avr32\oprofile\op_model_avr32.c" line="143"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pdst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pdst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/kernel/bfin_dma.c" file="blackfin\kernel\bfin_dma.c" line="649"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;psrc&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;psrc&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/kernel/bfin_dma.c" file="blackfin\kernel\bfin_dma.c" line="649"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CH_MEM_STREAM3_SRC;CONFIG_BF60x&amp;#039; since the value of &amp;#039;CH_MEM_STREAM3_SRC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CH_MEM_STREAM3_SRC;CONFIG_BF60x&amp;#039; since the value of &amp;#039;CH_MEM_STREAM3_SRC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\bfin_dma.c" line="53"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/kernel/bfin_gpio.c" file="blackfin\kernel\bfin_gpio.c" line="858"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/kernel/bfin_gpio.c" file="blackfin\kernel\bfin_gpio.c" line="1259"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bank&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bank&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/kernel/bfin_gpio.c" file="blackfin\kernel\bfin_gpio.c" line="653"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bank&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bank&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/kernel/bfin_gpio.c" file="blackfin\kernel\bfin_gpio.c" line="699"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="blackfin/kernel/cplbinfo.c" file="blackfin\kernel\cplbinfo.c" line="94"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="blackfin/kernel/cplbinfo.c" file="blackfin\kernel\cplbinfo.c" line="145"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;BFIN_UART_DLL&amp;#039; since the value of &amp;#039;BFIN_UART_DLL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;BFIN_UART_DLL&amp;#039; since the value of &amp;#039;BFIN_UART_DLL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1599"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CAN0_MC1;CAN0_MC1;CAN1_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN0_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CAN0_MC1;CAN0_MC1;CAN1_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN0_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="822"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CAN0_MC1;CAN0_MC1;CAN1_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN1_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CAN0_MC1;CAN0_MC1;CAN1_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN1_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="825"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CAN0_MC1;CAN0_MC1;CAN1_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CAN0_MC1;CAN0_MC1;CAN1_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="819"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN0_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN0_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="822"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN1_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN1_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="825"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="819"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1;CAN1_MC1&amp;#039; since the value of &amp;#039;CAN0_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1;CAN1_MC1&amp;#039; since the value of &amp;#039;CAN0_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="822"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1;CAN1_MC1&amp;#039; since the value of &amp;#039;CAN1_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1;CAN1_MC1&amp;#039; since the value of &amp;#039;CAN1_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="825"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1;CAN1_MC1&amp;#039; since the value of &amp;#039;CAN_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1;CAN1_MC1&amp;#039; since the value of &amp;#039;CAN_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="819"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN0_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN0_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="822"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN1_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN1_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="825"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CAN0_MC1;CAN1_MC1;CAN_MC1;CAN_MC1&amp;#039; since the value of &amp;#039;CAN_MC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="819"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI0_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI0_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1089"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI1_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI1_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1092"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI2_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI2_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1095"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI0_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI0_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1089"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI1_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI1_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1092"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI2_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI2_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1095"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS;EPPI1_STATUS&amp;#039; since the value of &amp;#039;EPPI0_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS;EPPI1_STATUS&amp;#039; since the value of &amp;#039;EPPI0_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1089"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS;EPPI1_STATUS&amp;#039; since the value of &amp;#039;EPPI1_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS;EPPI1_STATUS&amp;#039; since the value of &amp;#039;EPPI1_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1092"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS;EPPI1_STATUS&amp;#039; since the value of &amp;#039;EPPI2_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS;EPPI1_STATUS&amp;#039; since the value of &amp;#039;EPPI2_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1095"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI0_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI0_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1089"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI1_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI1_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1092"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI2_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EPPI0_STATUS;EPPI1_STATUS;EPPI2_STATUS;EPPI2_STATUS&amp;#039; since the value of &amp;#039;EPPI2_STATUS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1095"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FIO0_FLAG_D&amp;#039; since the value of &amp;#039;FIO0_FLAG_D&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FIO0_FLAG_D&amp;#039; since the value of &amp;#039;FIO0_FLAG_D&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1818"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FIO1_FLAG_D&amp;#039; since the value of &amp;#039;FIO1_FLAG_D&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FIO1_FLAG_D&amp;#039; since the value of &amp;#039;FIO1_FLAG_D&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1821"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FIO2_FLAG_D&amp;#039; since the value of &amp;#039;FIO2_FLAG_D&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FIO2_FLAG_D&amp;#039; since the value of &amp;#039;FIO2_FLAG_D&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1824"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FIO_FLAG_D&amp;#039; since the value of &amp;#039;FIO_FLAG_D&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FIO_FLAG_D&amp;#039; since the value of &amp;#039;FIO_FLAG_D&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1818"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;HMDMA0_CONTROL&amp;#039; since the value of &amp;#039;HMDMA0_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;HMDMA0_CONTROL&amp;#039; since the value of &amp;#039;HMDMA0_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1135"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PINT0_MASK_SET&amp;#039; since the value of &amp;#039;PINT0_MASK_SET&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PINT0_MASK_SET&amp;#039; since the value of &amp;#039;PINT0_MASK_SET&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1340"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PPI0_CONTROL;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI0_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PPI0_CONTROL;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI0_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1383"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PPI0_CONTROL;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI1_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PPI0_CONTROL;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI1_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1386"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PPI0_CONTROL;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PPI0_CONTROL;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1380"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI0_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI0_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1383"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI1_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI1_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1386"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1380"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL;PPI1_CONTROL&amp;#039; since the value of &amp;#039;PPI0_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL;PPI1_CONTROL&amp;#039; since the value of &amp;#039;PPI0_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1383"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL;PPI1_CONTROL&amp;#039; since the value of &amp;#039;PPI1_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL;PPI1_CONTROL&amp;#039; since the value of &amp;#039;PPI1_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1386"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL;PPI1_CONTROL&amp;#039; since the value of &amp;#039;PPI_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL;PPI1_CONTROL&amp;#039; since the value of &amp;#039;PPI_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1380"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI0_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI0_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1383"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI1_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI1_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1386"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PPI0_CONTROL;PPI1_CONTROL;PPI_CONTROL;PPI_CONTROL&amp;#039; since the value of &amp;#039;PPI_CONTROL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1380"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;SPI0_REGBASE&amp;#039; since the value of &amp;#039;SPI0_REGBASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;SPI0_REGBASE&amp;#039; since the value of &amp;#039;SPI0_REGBASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1561"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;SPI1_REGBASE&amp;#039; since the value of &amp;#039;SPI1_REGBASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;SPI1_REGBASE&amp;#039; since the value of &amp;#039;SPI1_REGBASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1564"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;SPI2_REGBASE&amp;#039; since the value of &amp;#039;SPI2_REGBASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;SPI2_REGBASE&amp;#039; since the value of &amp;#039;SPI2_REGBASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1567"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;SPORT0_STAT&amp;#039; since the value of &amp;#039;SPORT0_STAT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;SPORT0_STAT&amp;#039; since the value of &amp;#039;SPORT0_STAT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="535"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TIMER11_CONFIG&amp;#039; since the value of &amp;#039;TIMER11_CONFIG&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TIMER11_CONFIG&amp;#039; since the value of &amp;#039;TIMER11_CONFIG&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1130"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TIMER3_CONFIG&amp;#039; since the value of &amp;#039;TIMER3_CONFIG&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TIMER3_CONFIG&amp;#039; since the value of &amp;#039;TIMER3_CONFIG&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1118"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TIMER8_CONFIG&amp;#039; since the value of &amp;#039;TIMER8_CONFIG&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TIMER8_CONFIG&amp;#039; since the value of &amp;#039;TIMER8_CONFIG&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1125"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TIMER_ENABLE&amp;#039; since the value of &amp;#039;TIMER_ENABLE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TIMER_ENABLE&amp;#039; since the value of &amp;#039;TIMER_ENABLE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1101"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TIMER_ENABLE0&amp;#039; since the value of &amp;#039;TIMER_ENABLE0&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TIMER_ENABLE0&amp;#039; since the value of &amp;#039;TIMER_ENABLE0&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1104"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TIMER_ENABLE1&amp;#039; since the value of &amp;#039;TIMER_ENABLE1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TIMER_ENABLE1&amp;#039; since the value of &amp;#039;TIMER_ENABLE1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1107"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI0_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI0_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1590"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI1_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI1_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1593"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1587"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI0_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI0_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1590"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI1_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI1_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1593"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1587"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV;TWI1_CLKDIV&amp;#039; since the value of &amp;#039;TWI0_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV;TWI1_CLKDIV&amp;#039; since the value of &amp;#039;TWI0_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1590"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV;TWI1_CLKDIV&amp;#039; since the value of &amp;#039;TWI1_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV;TWI1_CLKDIV&amp;#039; since the value of &amp;#039;TWI1_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1593"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV;TWI1_CLKDIV&amp;#039; since the value of &amp;#039;TWI_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV;TWI1_CLKDIV&amp;#039; since the value of &amp;#039;TWI_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1587"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI0_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI0_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1590"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI1_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI1_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1593"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TWI0_CLKDIV;TWI1_CLKDIV;TWI_CLKDIV;TWI_CLKDIV&amp;#039; since the value of &amp;#039;TWI_CLKDIV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1587"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;UART0_DLL&amp;#039; since the value of &amp;#039;UART0_DLL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;UART0_DLL&amp;#039; since the value of &amp;#039;UART0_DLL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1602"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;UART1_DLL&amp;#039; since the value of &amp;#039;UART1_DLL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;UART1_DLL&amp;#039; since the value of &amp;#039;UART1_DLL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1605"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;UART2_DLL&amp;#039; since the value of &amp;#039;UART2_DLL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;UART2_DLL&amp;#039; since the value of &amp;#039;UART2_DLL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1608"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;UART3_DLL&amp;#039; since the value of &amp;#039;UART3_DLL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;UART3_DLL&amp;#039; since the value of &amp;#039;UART3_DLL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\debug-mmrs.c" line="1611"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/kernel/kgdb.c" file="blackfin\kernel\kgdb.c" line="393"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/kernel/module.c" file="blackfin\kernel\module.c" line="201"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/kernel/module.c" file="blackfin\kernel\module.c" line="295"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/kernel/process.c" file="blackfin\kernel\process.c" line="164"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ACCESS_CHECK;COREB_L1_CODE_START&amp;#039; since the value of &amp;#039;COREB_L1_CODE_START&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ACCESS_CHECK;COREB_L1_CODE_START&amp;#039; since the value of &amp;#039;COREB_L1_CODE_START&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\process.c" line="412"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ACCESS_CHECK;COREB_L1_CODE_START&amp;#039; since the value of &amp;#039;COREB_L1_CODE_START&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ACCESS_CHECK;COREB_L1_CODE_START&amp;#039; since the value of &amp;#039;COREB_L1_CODE_START&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\process.c" line="554"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;COREB_L1_CODE_START&amp;#039; since the value of &amp;#039;COREB_L1_CODE_START&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;COREB_L1_CODE_START&amp;#039; since the value of &amp;#039;COREB_L1_CODE_START&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\process.c" line="412"/>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &amp;#039;case_default&amp;#039; is not used. Should this be a &amp;#039;case&amp;#039; of the enclosing switch()?" verbose="Label &amp;#039;case_default&amp;#039; is not used. Should this be a &amp;#039;case&amp;#039; of the enclosing switch()?">
            <location file0="blackfin/kernel/ptrace.c" file="blackfin\kernel\ptrace.c" line="481"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;reg_ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;reg_ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/kernel/ptrace.c" file="blackfin\kernel\ptrace.c" line="73"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;reg_offset&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;reg_offset&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/kernel/ptrace.c" file="blackfin\kernel\ptrace.c" line="128"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_EBIU_MBSCTLVAL&amp;#039; since the value of &amp;#039;CONFIG_EBIU_MBSCTLVAL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_EBIU_MBSCTLVAL&amp;#039; since the value of &amp;#039;CONFIG_EBIU_MBSCTLVAL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\setup.c" line="1150"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/kernel/trace.c" file="blackfin\kernel\trace.c" line="1030"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;err&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;err&amp;#039; is assigned a value that is never used.">
            <location file0="blackfin/kernel/trace.c" file="blackfin\kernel\trace.c" line="1059"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/kernel/trace.c" file="blackfin\kernel\trace.c" line="851"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fault&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fault&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/kernel/trace.c" file="blackfin\kernel\trace.c" line="851"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/kernel/trace.c" file="blackfin\kernel\trace.c" line="852"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/kernel/trace.c" file="blackfin\kernel\trace.c" line="853"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="blackfin/kernel/trace.c" file="blackfin\kernel\trace.c" line="730"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PAGE_SIZE_16MB&amp;#039; since the value of &amp;#039;PAGE_SIZE_16MB&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PAGE_SIZE_16MB&amp;#039; since the value of &amp;#039;PAGE_SIZE_16MB&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\cplb-nompu\cplbinit.c" line="54"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PAGE_SIZE_16MB&amp;#039; since the value of &amp;#039;PAGE_SIZE_16MB&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PAGE_SIZE_16MB&amp;#039; since the value of &amp;#039;PAGE_SIZE_16MB&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\kernel\cplb-nompu\cplbmgr.c" line="213"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;port&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;port&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mach-bf538/ext-gpio.c" file="blackfin\mach-bf538\ext-gpio.c" line="21"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;port&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;port&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mach-bf538/ext-gpio.c" file="blackfin\mach-bf538\ext-gpio.c" line="22"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;port&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;port&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mach-bf538/ext-gpio.c" file="blackfin\mach-bf538\ext-gpio.c" line="23"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;port&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;port&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mach-bf538/ext-gpio.c" file="blackfin\mach-bf538\ext-gpio.c" line="24"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;port&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;port&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mach-bf538/ext-gpio.c" file="blackfin\mach-bf538\ext-gpio.c" line="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;drate&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;drate&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/mach-bf609/clock.c" file="blackfin\mach-bf609\clock.c" line="224"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;drate&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;drate&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/mach-bf609/clock.c" file="blackfin\mach-bf609\clock.c" line="256"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CLKBUFOE&amp;#039; since the value of &amp;#039;CLKBUFOE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CLKBUFOE&amp;#039; since the value of &amp;#039;CLKBUFOE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\mach-common\clocks-init.c" line="101"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="failed to evaluate #if condition" verbose="failed to evaluate #if condition">
            <location file="blackfin\mach-common\clocks-init.c" line="28"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_MEM_EBIU_DDRQUE&amp;#039; since the value of &amp;#039;CONFIG_MEM_EBIU_DDRQUE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_MEM_EBIU_DDRQUE&amp;#039; since the value of &amp;#039;CONFIG_MEM_EBIU_DDRQUE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\mach-common\clocks-init.c" line="122"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="blackfin/mach-common/ints-priority.c" file="blackfin\mach-common\ints-priority.c" line="857"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/mach-common/ints-priority.c" file="blackfin\mach-common\ints-priority.c" line="838"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/mach-common/ints-priority.c" file="blackfin\mach-common\ints-priority.c" line="839"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reg_sctl&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reg_sctl&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="blackfin/mach-common/ints-priority.c" file="blackfin\mach-common\ints-priority.c" line="431"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;sstat&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;sstat&amp;#039; is assigned a value that is never used.">
            <location file0="blackfin/mach-common/ints-priority.c" file="blackfin\mach-common\ints-priority.c" line="503"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ient" verbose="Unused variable: ient">
            <location file0="blackfin/mach-common/ints-priority.c" file="blackfin\mach-common\ints-priority.c" line="1447"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: prio" verbose="Unused variable: prio">
            <location file0="blackfin/mach-common/ints-priority.c" file="blackfin\mach-common\ints-priority.c" line="1447"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_PM;IRQ_CAN0_RX&amp;#039; since the value of &amp;#039;IRQ_CAN0_RX&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_PM;IRQ_CAN0_RX&amp;#039; since the value of &amp;#039;IRQ_CAN0_RX&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\mach-common\ints-priority.c" line="254"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_PM;IRQ_CAN1_RX&amp;#039; since the value of &amp;#039;IRQ_CAN1_RX&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_PM;IRQ_CAN1_RX&amp;#039; since the value of &amp;#039;IRQ_CAN1_RX&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\mach-common\ints-priority.c" line="260"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_PM;IRQ_RTC&amp;#039; since the value of &amp;#039;IRQ_RTC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_PM;IRQ_RTC&amp;#039; since the value of &amp;#039;IRQ_RTC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\mach-common\ints-priority.c" line="248"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_PM;IRQ_USB_INT0&amp;#039; since the value of &amp;#039;IRQ_USB_INT0&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_PM;IRQ_USB_INT0&amp;#039; since the value of &amp;#039;IRQ_USB_INT0&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="blackfin\mach-common\ints-priority.c" line="266"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mm/isram-driver.c" file="blackfin\mm\isram-driver.c" line="128"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mm/isram-driver.c" file="blackfin\mm\isram-driver.c" line="167"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mm/isram-driver.c" file="blackfin\mm\isram-driver.c" line="176"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mm/isram-driver.c" file="blackfin\mm\isram-driver.c" line="189"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mm/isram-driver.c" file="blackfin\mm\isram-driver.c" line="193"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mm/isram-driver.c" file="blackfin\mm\isram-driver.c" line="194"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mm/isram-driver.c" file="blackfin\mm\isram-driver.c" line="199"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mm/isram-driver.c" file="blackfin\mm\isram-driver.c" line="212"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;size&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;size&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="blackfin/mm/sram-alloc.c" file="blackfin\mm\sram-alloc.c" line="305"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)get_l1_scratch_start_cpu(cpu)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)get_l1_scratch_start_cpu(cpu)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mm/sram-alloc.c" file="blackfin\mm\sram-alloc.c" line="89"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pslot.paddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pslot.paddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mm/sram-alloc.c" file="blackfin\mm\sram-alloc.c" line="345"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;plast.paddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;plast.paddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mm/sram-alloc.c" file="blackfin\mm\sram-alloc.c" line="444"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;plast.paddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;plast.paddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mm/sram-alloc.c" file="blackfin\mm\sram-alloc.c" line="456"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pslot.paddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pslot.paddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mm/sram-alloc.c" file="blackfin\mm\sram-alloc.c" line="916"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pslot.paddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pslot.paddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="blackfin/mm/sram-alloc.c" file="blackfin\mm\sram-alloc.c" line="927"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="c6x/kernel/module.c" file="c6x\kernel\module.c" line="55"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="c6x/kernel/module.c" file="c6x\kernel\module.c" line="67"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;iexcept_num&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;iexcept_num&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="c6x/kernel/traps.c" file="c6x\kernel\traps.c" line="275"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="c6x/kernel/traps.c" file="c6x\kernel\traps.c" line="382"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="c6x/lib/checksum.c" file="c6x\lib\checksum.c" line="25"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="c6x/lib/checksum.c" file="c6x\lib\checksum.c" line="25"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used.">
            <location file0="c6x/platforms/cache.c" file="c6x\platforms\cache.c" line="240"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used.">
            <location file0="c6x/platforms/cache.c" file="c6x\platforms\cache.c" line="254"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ccfg&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ccfg&amp;#039; is assigned a value that is never used.">
            <location file0="c6x/platforms/cache.c" file="c6x\platforms\cache.c" line="326"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;dscr_ops::init&amp;#039; is never used." verbose="struct member &amp;#039;dscr_ops::init&amp;#039; is never used.">
            <location file0="c6x/platforms/dscr.c" file="c6x\platforms\dscr.c" line="108"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="c6x/platforms/megamod-pic.c" file="c6x\platforms\megamod-pic.c" line="104"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="c6x/platforms/megamod-pic.c" file="c6x\platforms\megamod-pic.c" line="106"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ptable_head&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ptable_head&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="cris/arch-v10/drivers/axisflashmap.c" file="cris\arch-v10\drivers\axisflashmap.c" line="312"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ptable_head+sizeof(*ptable_head)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ptable_head+sizeof(*ptable_head)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="cris/arch-v10/drivers/axisflashmap.c" file="cris\arch-v10\drivers\axisflashmap.c" line="312"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!mtd_cs&amp;#039; is always true" verbose="Condition &amp;#039;!mtd_cs&amp;#039; is always true">
            <location file0="cris/arch-v10/drivers/axisflashmap.c" file="cris\arch-v10\drivers\axisflashmap.c" line="201"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;eeprom_type::retry_cnt_read&amp;#039; is never used." verbose="struct member &amp;#039;eeprom_type::retry_cnt_read&amp;#039; is never used.">
            <location file0="cris/arch-v10/drivers/eeprom.c" file="cris\arch-v10\drivers\eeprom.c" line="78"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;p&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;p&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="cris/arch-v10/drivers/gpio.c" file="cris\arch-v10\drivers\gpio.c" line="683"/>
            <location file0="cris/arch-v10/drivers/gpio.c" file="cris\arch-v10\drivers\gpio.c" line="685"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v10/drivers/sync_serial.c" file="cris\arch-v10\drivers\sync_serial.c" line="1123"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;f&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;f&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v10/kernel/fasttimer.c" file="cris\arch-v10\kernel\fasttimer.c" line="411"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;d&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;d&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v10/kernel/fasttimer.c" file="cris\arch-v10\kernel\fasttimer.c" line="412"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v10/kernel/kgdb.c" file="cris\arch-v10\kernel\kgdb.c" line="433"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v10/kernel/kgdb.c" file="cris\arch-v10\kernel\kgdb.c" line="498"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v10/kernel/kgdb.c" file="cris\arch-v10\kernel\kgdb.c" line="499"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v10/kernel/kgdb.c" file="cris\arch-v10\kernel\kgdb.c" line="566"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;status&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;status&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v10/kernel/kgdb.c" file="cris\arch-v10\kernel\kgdb.c" line="734"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v10/kernel/ptrace.c" file="cris\arch-v10\kernel\ptrace.c" line="159"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v10/kernel/setup.c" file="cris\arch-v10\kernel\setup.c" line="91"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v10/kernel/setup.c" file="cris\arch-v10\kernel\setup.c" line="92"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v10/kernel/setup.c" file="cris\arch-v10\kernel\setup.c" line="93"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v10/kernel/setup.c" file="cris\arch-v10\kernel\setup.c" line="94"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v10/kernel/setup.c" file="cris\arch-v10\kernel\setup.c" line="95"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v10/kernel/setup.c" file="cris\arch-v10\kernel\setup.c" line="96"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v10/kernel/setup.c" file="cris\arch-v10\kernel\setup.c" line="97"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v10/kernel/setup.c" file="cris\arch-v10\kernel\setup.c" line="98"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ptable_head&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ptable_head&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="cris/arch-v32/drivers/axisflashmap.c" file="cris\arch-v32\drivers\axisflashmap.c" line="464"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ptable_head+sizeof(*ptable_head)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ptable_head+sizeof(*ptable_head)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="cris/arch-v32/drivers/axisflashmap.c" file="cris\arch-v32\drivers\axisflashmap.c" line="464"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!mtd_cs&amp;#039; is always true" verbose="Condition &amp;#039;!mtd_cs&amp;#039; is always true">
            <location file0="cris/arch-v32/drivers/axisflashmap.c" file="cris\arch-v32\drivers\axisflashmap.c" line="247"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmplen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmplen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v32/drivers/cryptocop.c" file="cris\arch-v32\drivers\cryptocop.c" line="2961"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;iop_alloc_ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;iop_alloc_ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="cris/arch-v32/drivers/cryptocop.c" file="cris\arch-v32\drivers\cryptocop.c" line="950"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;iop_alloc_ptr+31&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;iop_alloc_ptr+31&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="cris/arch-v32/drivers/cryptocop.c" file="cris\arch-v32\drivers\cryptocop.c" line="950"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;iop_alloc_ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;iop_alloc_ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="cris/arch-v32/drivers/cryptocop.c" file="cris\arch-v32\drivers\cryptocop.c" line="2750"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;iop_alloc_ptr+31&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;iop_alloc_ptr+31&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="cris/arch-v32/drivers/cryptocop.c" file="cris\arch-v32\drivers\cryptocop.c" line="2750"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;spdl_err&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;spdl_err&amp;#039; is assigned a value that is never used.">
            <location file0="cris/arch-v32/drivers/cryptocop.c" file="cris\arch-v32\drivers\cryptocop.c" line="3632"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v32/drivers/cryptocop.c" file="cris\arch-v32\drivers\cryptocop.c" line="4036"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;idx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;idx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v32/drivers/sync_serial.c" file="cris\arch-v32\drivers\sync_serial.c" line="1721"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;IGNORE_MASK&amp;#039; since the value of &amp;#039;IGNORE_MASK&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;IGNORE_MASK&amp;#039; since the value of &amp;#039;IGNORE_MASK&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="cris\arch-v32\kernel\irq.c" line="443"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v32/kernel/kgdb.c" file="cris\arch-v32\kernel\kgdb.c" line="692"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v32/kernel/kgdb.c" file="cris\arch-v32\kernel\kgdb.c" line="723"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v32/kernel/kgdb.c" file="cris\arch-v32\kernel\kgdb.c" line="778"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v32/kernel/kgdb.c" file="cris\arch-v32\kernel\kgdb.c" line="779"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v32/kernel/kgdb.c" file="cris\arch-v32\kernel\kgdb.c" line="851"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v32/kernel/kgdb.c" file="cris\arch-v32\kernel\kgdb.c" line="945"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;trig_bits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;trig_bits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v32/kernel/kgdb.c" file="cris\arch-v32\kernel\kgdb.c" line="945"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rw_bits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rw_bits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v32/kernel/kgdb.c" file="cris\arch-v32\kernel\kgdb.c" line="945"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;trig_mask&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;trig_mask&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v32/kernel/kgdb.c" file="cris\arch-v32\kernel\kgdb.c" line="946"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: intr_mask" verbose="Unused variable: intr_mask">
            <location file0="cris/arch-v32/kernel/kgdb.c" file="cris\arch-v32\kernel\kgdb.c" line="1737"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ser_intr_mask" verbose="Unused variable: ser_intr_mask">
            <location file0="cris/arch-v32/kernel/kgdb.c" file="cris\arch-v32\kernel\kgdb.c" line="1738"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;copied&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;copied&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/arch-v32/kernel/ptrace.c" file="cris\arch-v32\kernel\ptrace.c" line="166"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v32/kernel/setup.c" file="cris\arch-v32\kernel\setup.c" line="103"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v32/kernel/setup.c" file="cris\arch-v32\kernel\setup.c" line="104"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v32/kernel/setup.c" file="cris\arch-v32\kernel\setup.c" line="105"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v32/kernel/setup.c" file="cris\arch-v32\kernel\setup.c" line="106"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v32/kernel/setup.c" file="cris\arch-v32\kernel\setup.c" line="107"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v32/kernel/setup.c" file="cris\arch-v32\kernel\setup.c" line="108"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v32/kernel/setup.c" file="cris\arch-v32\kernel\setup.c" line="109"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="cris/arch-v32/kernel/setup.c" file="cris\arch-v32\kernel\setup.c" line="110"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;masked_intr&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;masked_intr&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="cris/arch-v32/mach-a3/arbiter.c" file="cris\arch-v32\mach-a3\arbiter.c" line="614"/>
            <location file0="cris/arch-v32/mach-a3/arbiter.c" file="cris\arch-v32\mach-a3\arbiter.c" line="629"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;masked_intr&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;masked_intr&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="cris/arch-v32/mach-a3/arbiter.c" file="cris\arch-v32\mach-a3\arbiter.c" line="683"/>
            <location file0="cris/arch-v32/mach-a3/arbiter.c" file="cris\arch-v32\mach-a3\arbiter.c" line="698"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="cris/boot/compressed/misc.c" file="cris\boot\compressed\misc.c" line="209"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tmp_int" verbose="Unused variable: tmp_int">
            <location file0="cris/boot/tools/build.c" file="cris\boot\tools\build.c" line="109"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tmp_long" verbose="Unused variable: tmp_long">
            <location file0="cris/boot/tools/build.c" file="cris\boot\tools\build.c" line="110"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="cris/kernel/module.c" file="cris\kernel\module.c" line="62"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ETRAX_CMDLINE&amp;#039; since the value of &amp;#039;CONFIG_ETRAX_CMDLINE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ETRAX_CMDLINE&amp;#039; since the value of &amp;#039;CONFIG_ETRAX_CMDLINE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="cris\kernel\setup.c" line="165"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;stack_trace_data::trace&amp;#039; is never used." verbose="struct member &amp;#039;stack_trace_data::trace&amp;#039; is never used.">
            <location file0="cris/kernel/stacktrace.c" file="cris\kernel\stacktrace.c" line="30"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;stack_trace_data::no_sched_functions&amp;#039; is never used." verbose="struct member &amp;#039;stack_trace_data::no_sched_functions&amp;#039; is never used.">
            <location file0="cris/kernel/stacktrace.c" file="cris\kernel\stacktrace.c" line="31"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;stack_trace_data::skip&amp;#039; is never used." verbose="struct member &amp;#039;stack_trace_data::skip&amp;#039; is never used.">
            <location file0="cris/kernel/stacktrace.c" file="cris\kernel\stacktrace.c" line="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/kernel/debug-stub.c" file="frv\kernel\debug-stub.c" line="168"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;cctr&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;cctr&amp;#039; is assigned a value that is never used.">
            <location file0="frv/kernel/dma.c" file="frv\kernel\dma.c" line="499"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;ix&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;ix&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="frv/kernel/gdb-io.c" file="frv\kernel\gdb-io.c" line="130"/>
            <location file0="frv/kernel/gdb-io.c" file="frv\kernel\gdb-io.c" line="131"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nix&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nix&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/kernel/gdb-io.c" file="frv\kernel\gdb-io.c" line="116"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="287"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xmitcsum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xmitcsum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="288"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="290"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;error&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;error&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="290"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="413"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="414"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="462"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;qty&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;qty&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="705"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::hsr0&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::hsr0&amp;#039; is never used.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="149"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::pcsr&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::pcsr&amp;#039; is never used.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="149"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::esr0&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::esr0&amp;#039; is never used.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="149"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::ear0&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::ear0&amp;#039; is never used.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="149"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::epcr0&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::epcr0&amp;#039; is never used.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="149"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::tplr&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::tplr&amp;#039; is never used.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="151"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::tppr&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::tppr&amp;#039; is never used.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="151"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::tpxr&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::tpxr&amp;#039; is never used.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="151"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::cxnr&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::cxnr&amp;#039; is never used.">
            <location file0="frv/kernel/gdb-stub.c" file="frv\kernel\gdb-stub.c" line="151"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;*&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;*&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="frv/kernel/pm.c" file="frv\kernel\pm.c" line="168"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/kernel/process.c" file="frv\kernel\process.c" line="190"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/kernel/ptrace.c" file="frv\kernel\ptrace.c" line="291"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="frv/kernel/setup.c" file="frv\kernel\setup.c" line="1120"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="frv/kernel/setup.c" file="frv\kernel\setup.c" line="1121"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="frv/kernel/setup.c" file="frv\kernel\setup.c" line="1122"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="frv/kernel/setup.c" file="frv\kernel\setup.c" line="1123"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="frv/kernel/setup.c" file="frv\kernel\setup.c" line="1124"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="frv/kernel/setup.c" file="frv\kernel\setup.c" line="1125"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="frv/kernel/setup.c" file="frv\kernel\setup.c" line="1126"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;format&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;format&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/kernel/traps.c" file="frv\kernel\traps.c" line="674"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="frv/kernel/traps.c" file="frv\kernel\traps.c" line="591"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="frv/kernel/traps.c" file="frv\kernel\traps.c" line="644"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/lib/checksum.c" file="frv\lib\checksum.c" line="184"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/lib/checksum.c" file="frv\lib\checksum.c" line="184"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="105"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1+2048&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1+2048&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="105"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="109"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="110"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="142"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1+2048&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1+2048&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="142"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="146"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="147"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1+136&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1+136&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="147"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="155"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1+2048&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1+2048&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="155"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="159"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="160"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1+136&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1+136&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="160"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="168"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1+2048&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1+2048&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="168"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="172"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__region_CS1&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="frv/mb93090-mb00/pci-vdk.c" file="frv\mb93090-mb00\pci-vdk.c" line="173"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;_p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;_p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/mm/mmu-context.c" file="frv\mm\mmu-context.c" line="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cxn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cxn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/mm/mmu-context.c" file="frv\mm\mmu-context.c" line="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;loop&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;loop&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="frv/mm/pgalloc.c" file="frv\mm\pgalloc.c" line="65"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="h8300/kernel/kgdb.c" file="h8300\kernel\kgdb.c" line="49"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="h8300/kernel/kgdb.c" file="h8300\kernel\kgdb.c" line="55"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="h8300/kernel/kgdb.c" file="h8300\kernel\kgdb.c" line="81"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="h8300/kernel/kgdb.c" file="h8300\kernel\kgdb.c" line="86"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="h8300/kernel/process.c" file="h8300\kernel\process.c" line="147"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="h8300/kernel/traps.c" file="h8300\kernel\traps.c" line="135"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="hexagon/kernel/kgdb.c" file="hexagon\kernel\kgdb.c" line="99"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="hexagon/kernel/kgdb.c" file="hexagon\kernel\kgdb.c" line="112"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="hexagon/kernel/module.c" file="hexagon\kernel\module.c" line="97"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="hexagon/kernel/module.c" file="hexagon\kernel\module.c" line="98"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;loc_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;loc_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="hexagon/kernel/module.c" file="hexagon\kernel\module.c" line="115"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="hexagon/kernel/process.c" file="hexagon\kernel\process.c" line="160"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;retval&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;retval&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="hexagon/kernel/smp.c" file="hexagon\kernel\smp.c" line="117"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)thread&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)thread&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="hexagon/kernel/smp.c" file="hexagon\kernel\smp.c" line="212"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="hexagon/kernel/traps.c" file="hexagon\kernel\traps.c" line="108"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)fp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)fp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="hexagon/kernel/traps.c" file="hexagon\kernel\traps.c" line="188"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="hexagon/lib/checksum.c" file="hexagon\lib\checksum.c" line="101"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;uncleared&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;uncleared&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="hexagon/mm/uaccess.c" file="hexagon\mm\uaccess.c" line="37"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="hexagon/mm/uaccess.c" file="hexagon\mm\uaccess.c" line="50"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: ioc" verbose="Null pointer dereference: ioc">
            <location file0="ia64/hp/common/sba_iommu.c" file="ia64\hp\common\sba_iommu.c" line="1039"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: ioc" verbose="Null pointer dereference: ioc">
            <location file0="ia64/hp/common/sba_iommu.c" file="ia64\hp\common\sba_iommu.c" line="1095"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: ioc" verbose="Null pointer dereference: ioc">
            <location file0="ia64/hp/common/sba_iommu.c" file="ia64\hp\common\sba_iommu.c" line="1160"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: ioc" verbose="Null pointer dereference: ioc">
            <location file0="ia64/hp/common/sba_iommu.c" file="ia64\hp\common\sba_iommu.c" line="1657"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/hp/common/sba_iommu.c" file="ia64\hp\common\sba_iommu.c" line="1081"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: ioc" verbose="Null pointer dereference: ioc">
            <location file0="ia64/hp/common/sba_iommu.c" file="ia64\hp\common\sba_iommu.c" line="1258"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/hp/sim/hpsim_console.c" file="ia64\hp\sim\hpsim_console.c" line="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ifap&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ifap&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/hp/sim/simeth.c" file="ia64\hp\sim\simeth.c" line="291"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;skb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;skb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/hp/sim/simeth.c" file="ia64\hp\sim\simeth.c" line="463"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fname&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fname&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/hp/sim/simscsi.c" file="ia64\hp\sim\simscsi.c" line="232"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;disk_size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;disk_size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/hp/sim/simscsi.c" file="ia64\hp\sim\simscsi.c" line="233"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/hp/sim/simscsi.c" file="ia64\hp\sim\simscsi.c" line="234"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/hp/sim/simserial.c" file="ia64\hp\sim\simserial.c" line="226"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::tv_usec&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::tv_usec&amp;#039; is never used.">
            <location file0="ia64/hp/sim/boot/fw-emu.c" file="ia64\hp\sim\boot\fw-emu.c" line="128"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/acpi.c" file="ia64\kernel\acpi.c" line="909"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;illegal_op_return::arg2&amp;#039; is never used." verbose="struct member &amp;#039;illegal_op_return::arg2&amp;#039; is never used.">
            <location file0="ia64/kernel/brl_emu.c" file="ia64\kernel\brl_emu.c" line="19"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;illegal_op_return::arg3&amp;#039; is never used." verbose="struct member &amp;#039;illegal_op_return::arg3&amp;#039; is never used.">
            <location file0="ia64/kernel/brl_emu.c" file="ia64\kernel\brl_emu.c" line="19"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/crash_dump.c" file="ia64\kernel\crash_dump.c" line="48"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/crash_dump.c" file="ia64\kernel\crash_dump.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;md&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;md&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="366"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;md&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;md&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="673"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;md&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;md&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="770"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;md&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;md&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="813"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;md&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;md&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="837"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="372"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="375"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="678"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="681"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="774"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="777"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="817"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="820"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="842"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="847"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="1148"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="1159"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="1174"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;q&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;q&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="1175"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="1257"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="1260"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="1285"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;q&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;q&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="1286"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;efi_map_start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="1431"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/efi.c" file="ia64\kernel\efi.c" line="1436"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rte_index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rte_index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/iosapic.c" file="ia64\kernel\iosapic.c" line="313"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rte_index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rte_index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/iosapic.c" file="ia64\kernel\iosapic.c" line="335"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;isa_irq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;isa_irq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/iosapic.c" file="ia64\kernel\iosapic.c" line="1199"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;redir&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;redir&amp;#039; is assigned a value that is never used.">
            <location file0="ia64/kernel/iosapic.c" file="ia64\kernel\iosapic.c" line="255"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rte_index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rte_index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/iosapic.c" file="ia64\kernel\iosapic.c" line="359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;iosapic&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;iosapic&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/iosapic.c" file="ia64\kernel\iosapic.c" line="362"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vector&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vector&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/irq_ia64.c" file="ia64\kernel\irq_ia64.c" line="117"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/mca.c" file="ia64\kernel\mca.c" line="211"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/mca.c" file="ia64\kernel\mca.c" line="256"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/mca.c" file="ia64\kernel\mca.c" line="257"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;printed_len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;printed_len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/mca.c" file="ia64\kernel\mca.c" line="259"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/mca.c" file="ia64\kernel\mca.c" line="1384"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;first_time&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;first_time&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/mca.c" file="ia64\kernel\mca.c" line="2122"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;poll_time&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;poll_time&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/mca.c" file="ia64\kernel\mca.c" line="1757"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/module.c" file="ia64\kernel\module.c" line="942"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/module.c" file="ia64\kernel\module.c" line="509"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)plt&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)plt&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/module.c" file="ia64\kernel\module.c" line="621"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)plt&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)plt&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/module.c" file="ia64\kernel\module.c" line="626"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)target_sec.sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)target_sec.sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/module.c" file="ia64\kernel\module.c" line="990"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;paravirt_nr_irqs_max::ia64_native_nr_irqs&amp;#039; is never used." verbose="union member &amp;#039;paravirt_nr_irqs_max::ia64_native_nr_irqs&amp;#039; is never used.">
            <location file0="ia64/kernel/nr-irqs.c" file="ia64\kernel\nr-irqs.c" line="18"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="ia64/kernel/palinfo.c" file="ia64\kernel\palinfo.c" line="1103"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="ia64/kernel/palinfo.c" file="ia64\kernel\palinfo.c" line="1126"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/palinfo.c" file="ia64\kernel\palinfo.c" line="353"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/palinfo.c" file="ia64\kernel\palinfo.c" line="354"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting a negative value is undefined behaviour" verbose="Shifting a negative value is undefined behaviour">
            <location file0="ia64/kernel/palinfo.c" file="ia64\kernel\palinfo.c" line="926"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;palinfo_entry_t::entry&amp;#039; is never used." verbose="struct member &amp;#039;palinfo_entry_t::entry&amp;#039; is never used.">
            <location file0="ia64/kernel/palinfo.c" file="ia64\kernel\palinfo.c" line="51"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="ia64/kernel/palinfo.c" file="ia64\kernel\palinfo.c" line="644"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="ia64/kernel/palinfo.c" file="ia64\kernel\palinfo.c" line="646"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="ia64/kernel/palinfo.c" file="ia64\kernel\palinfo.c" line="654"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="ia64/kernel/palinfo.c" file="ia64\kernel\palinfo.c" line="656"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="ia64/kernel/palinfo.c" file="ia64\kernel\palinfo.c" line="743"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="ia64/kernel/palinfo.c" file="ia64\kernel\palinfo.c" line="744"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="ia64/kernel/palinfo.c" file="ia64\kernel\palinfo.c" line="745"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="4698"/>
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="4702"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="843"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="867"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="1202"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="1345"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;new_seed&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;new_seed&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="2968"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="3853"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tregs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tregs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="4348"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tregs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tregs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="4446"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start_cycles&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start_cycles&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;total_cycles&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;total_cycles&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;min&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;min&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6107"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;max&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;max&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6107"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6109"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6191"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;psr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;psr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6237"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6238"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;regs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;regs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6332"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dcr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dcr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6333"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)(long)nr_cpu_ids&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)(long)nr_cpu_ids&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6159"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)(long)nr_cpu_ids&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)(long)nr_cpu_ids&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6241"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;pfm_context_flags_t::reserved&amp;#039; is never used." verbose="struct member &amp;#039;pfm_context_flags_t::reserved&amp;#039; is never used.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="274"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;ibr_mask_reg_t::ibr_mask&amp;#039; is never used." verbose="struct member &amp;#039;ibr_mask_reg_t::ibr_mask&amp;#039; is never used.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="452"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;ibr_mask_reg_t::ibr_plm&amp;#039; is never used." verbose="struct member &amp;#039;ibr_mask_reg_t::ibr_plm&amp;#039; is never used.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="453"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;ibr_mask_reg_t::ibr_ig&amp;#039; is never used." verbose="struct member &amp;#039;ibr_mask_reg_t::ibr_ig&amp;#039; is never used.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="454"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;dbr_mask_reg_t::dbr_mask&amp;#039; is never used." verbose="struct member &amp;#039;dbr_mask_reg_t::dbr_mask&amp;#039; is never used.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="460"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;dbr_mask_reg_t::dbr_plm&amp;#039; is never used." verbose="struct member &amp;#039;dbr_mask_reg_t::dbr_plm&amp;#039; is never used.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="461"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;dbr_mask_reg_t::dbr_ig&amp;#039; is never used." verbose="struct member &amp;#039;dbr_mask_reg_t::dbr_ig&amp;#039; is never used.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="462"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;pfm_stats_t::pad&amp;#039; is never used." verbose="struct member &amp;#039;pfm_stats_t::pad&amp;#039; is never used.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="512"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;is_system&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;is_system&amp;#039; is assigned a value that is never used.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="2012"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="5837"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6273"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6274"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6275"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="6336"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="7389"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="7390"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="ia64/kernel/perfmon.c" file="ia64\kernel\perfmon.c" line="7391"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;task==0&amp;#039; is redundant or there is possible null pointer dereference: task." verbose="Either the condition &amp;#039;task==0&amp;#039; is redundant or there is possible null pointer dereference: task.">
            <location file0="ia64/kernel/perfmon_default_smpl.c" file="ia64\kernel\perfmon_default_smpl.c" line="115"/>
            <location file0="ia64/kernel/perfmon_default_smpl.c" file="ia64\kernel\perfmon_default_smpl.c" line="113"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/perfmon_default_smpl.c" file="ia64\kernel\perfmon_default_smpl.c" line="120"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/perfmon_default_smpl.c" file="ia64\kernel\perfmon_default_smpl.c" line="121"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;cur&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;cur&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/perfmon_default_smpl.c" file="ia64\kernel\perfmon_default_smpl.c" line="192"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used.">
            <location file0="ia64/kernel/process.c" file="ia64\kernel\process.c" line="510"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;w0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;w0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="182"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cfm&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cfm&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="348"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;regnum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;regnum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="460"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rnat_addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rnat_addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="460"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;regnum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;regnum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="531"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="618"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="646"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="1491"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="2062"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;min_copy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;min_copy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="2062"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="2062"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="2134"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="2134"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="2134"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)&amp;amp;pt.r2&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)&amp;amp;pt.r2&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="1504"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)&amp;amp;pt.r8&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)&amp;amp;pt.r8&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="1524"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)&amp;amp;pt.r12&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)&amp;amp;pt.r12&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/ptrace.c" file="ia64\kernel\ptrace.c" line="1529"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data_saved&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data_saved&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/salinfo.c" file="ia64\kernel\salinfo.c" line="223"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/salinfo.c" file="ia64\kernel\salinfo.c" line="225"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;salinfo_entry_t::entry&amp;#039; is never used." verbose="struct member &amp;#039;salinfo_entry_t::entry&amp;#039; is never used.">
            <location file0="ia64/kernel/salinfo.c" file="ia64\kernel\salinfo.c" line="63"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;cpu_data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;cpu_data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/setup.c" file="ia64\kernel\setup.c" line="1108"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous2::reserved&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous2::reserved&amp;#039; is never used.">
            <location file0="ia64/kernel/setup.c" file="ia64\kernel\setup.c" line="912"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;(ifs&amp;amp;9223372036854775808UL)==0&amp;#039; is always true" verbose="Condition &amp;#039;(ifs&amp;amp;9223372036854775808UL)==0&amp;#039; is always true">
            <location file0="ia64/kernel/signal.c" file="ia64\kernel\signal.c" line="275"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/signal.c" file="ia64\kernel\signal.c" line="336"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/smpboot.c" file="ia64\kernel\smpboot.c" line="196"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/smpboot.c" file="ia64\kernel\smpboot.c" line="225"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/smpboot.c" file="ia64\kernel\smpboot.c" line="225"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tm&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tm&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/smpboot.c" file="ia64\kernel\smpboot.c" line="225"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/smpboot.c" file="ia64\kernel\smpboot.c" line="296"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;adj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;adj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/smpboot.c" file="ia64\kernel\smpboot.c" line="296"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;adjust_latency&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;adjust_latency&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/smpboot.c" file="ia64\kernel\smpboot.c" line="296"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;done&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;done&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/smpboot.c" file="ia64\kernel\smpboot.c" line="296"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bound&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bound&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/smpboot.c" file="ia64\kernel\smpboot.c" line="297"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;bound&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;bound&amp;#039; is assigned a value that is never used.">
            <location file0="ia64/kernel/smpboot.c" file="ia64\kernel\smpboot.c" line="338"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;new_cpei_cpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;new_cpei_cpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/smpboot.c" file="ia64\kernel\smpboot.c" line="664"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/smpboot.c" file="ia64\kernel\smpboot.c" line="665"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mask&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mask&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/smpboot.c" file="ia64\kernel\smpboot.c" line="666"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;last&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;last&amp;#039; is assigned a value that is never used.">
            <location file0="ia64/kernel/smpboot.c" file="ia64\kernel\smpboot.c" line="654"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;itc_drift&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;itc_drift&amp;#039; is assigned a value that is never used.">
            <location file0="ia64/kernel/time.c" file="ia64\kernel\time.c" line="309"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 1) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." verbose="%u in format string (no. 1) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;.">
            <location file0="ia64/kernel/topology.c" file="ia64\kernel\topology.c" line="218"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 1) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." verbose="%u in format string (no. 1) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;.">
            <location file0="ia64/kernel/topology.c" file="ia64\kernel\topology.c" line="266"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;this_object&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;this_object&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/topology.c" file="ia64\kernel\topology.c" line="399"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="ia64\kernel\topology.c" line="283"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="ia64\kernel\topology.c" line="284"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="ia64\kernel\topology.c" line="285"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="ia64\kernel\topology.c" line="286"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="ia64\kernel\topology.c" line="287"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="ia64\kernel\topology.c" line="288"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="ia64\kernel\topology.c" line="289"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;define_one_ro&amp;#039; since the value of &amp;#039;define_one_ro&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="ia64\kernel\topology.c" line="290"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;die_counter&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;die_counter&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/traps.c" file="ia64\kernel\traps.c" line="54"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/traps.c" file="ia64\kernel\traps.c" line="357"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;illegal_op_return::arg1&amp;#039; is never used." verbose="struct member &amp;#039;illegal_op_return::arg1&amp;#039; is never used.">
            <location file0="ia64/kernel/traps.c" file="ia64\kernel\traps.c" line="485"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;illegal_op_return::arg2&amp;#039; is never used." verbose="struct member &amp;#039;illegal_op_return::arg2&amp;#039; is never used.">
            <location file0="ia64/kernel/traps.c" file="ia64\kernel\traps.c" line="485"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;illegal_op_return::arg3&amp;#039; is never used." verbose="struct member &amp;#039;illegal_op_return::arg3&amp;#039; is never used.">
            <location file0="ia64/kernel/traps.c" file="ia64\kernel\traps.c" line="485"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/unaligned.c" file="ia64\kernel\unaligned.c" line="587"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/unaligned.c" file="ia64\kernel\unaligned.c" line="654"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)current&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)current&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/unaligned.c" file="ia64\kernel\unaligned.c" line="325"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)current&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)current&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/kernel/unaligned.c" file="ia64\kernel\unaligned.c" line="420"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;load_store_t::qp&amp;#039; is never used." verbose="struct member &amp;#039;load_store_t::qp&amp;#039; is never used.">
            <location file0="ia64/kernel/unaligned.c" file="ia64\kernel\unaligned.c" line="171"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;load_store_t::hint&amp;#039; is never used." verbose="struct member &amp;#039;load_store_t::hint&amp;#039; is never used.">
            <location file0="ia64/kernel/unaligned.c" file="ia64\kernel\unaligned.c" line="176"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;load_store_t::pad&amp;#039; is never used." verbose="struct member &amp;#039;load_store_t::pad&amp;#039; is never used.">
            <location file0="ia64/kernel/unaligned.c" file="ia64\kernel\unaligned.c" line="181"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;addr&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;addr&amp;#039; is assigned a value that is never used.">
            <location file0="ia64/kernel/unaligned.c" file="ia64\kernel\unaligned.c" line="622"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/unwind.c" file="ia64\kernel\unwind.c" line="304"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/unwind.c" file="ia64\kernel\unwind.c" line="961"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;kind&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;kind&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/unwind.c" file="ia64\kernel\unwind.c" line="988"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/unwind.c" file="ia64\kernel\unwind.c" line="1572"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/unwind.c" file="ia64\kernel\unwind.c" line="1872"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;UNW_DEBUG&amp;#039; since the value of &amp;#039;UNW_DEBUG&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;UNW_DEBUG&amp;#039; since the value of &amp;#039;UNW_DEBUG&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="ia64\kernel\unwind.c" line="58"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/unwind.c" file="ia64\kernel\unwind_decoder.c" line="69"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byte1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byte1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/unwind.c" file="ia64\kernel\unwind_decoder.c" line="320"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byte2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byte2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/unwind.c" file="ia64\kernel\unwind_decoder.c" line="320"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/unwind.c" file="ia64\kernel\unwind_decoder.c" line="321"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/unwind.c" file="ia64\kernel\unwind_decoder.c" line="483"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ecount&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ecount&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/kernel/unwind.c" file="ia64\kernel\unwind_decoder.c" line="483"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/lib/io.c" file="ia64\lib\io.c" line="17"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/lib/io.c" file="ia64\lib\io.c" line="33"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/lib/io.c" file="ia64\lib\io.c" line="50"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;cpu_data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;cpu_data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/mm/contig.c" file="ia64\mm\contig.c" line="143"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/mm/discontig.c" file="ia64\mm\discontig.c" line="680"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;re&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;re&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/mm/discontig.c" file="ia64\mm\discontig.c" line="680"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/mm/discontig.c" file="ia64\mm\discontig.c" line="651"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;cpu_data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;cpu_data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="ia64/mm/discontig.c" file="ia64\mm\discontig.c" line="179"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/mm/hugetlbpage.c" file="ia64\mm\hugetlbpage.c" line="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pud&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pud&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/mm/hugetlbpage.c" file="ia64\mm\hugetlbpage.c" line="57"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/mm/hugetlbpage.c" file="ia64\mm\hugetlbpage.c" line="58"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flush_bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flush_bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/mm/tlb.c" file="ia64\mm\tlb.c" line="75"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used.">
            <location file0="ia64/mm/tlb.c" file="ia64\mm\tlb.c" line="420"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bridge&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bridge&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/pci/fixup.c" file="ia64\pci\fixup.c" line="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;res&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;res&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/pci/pci.c" file="ia64\pci\pci.c" line="280"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/pci/pci.c" file="ia64\pci\pci.c" line="281"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/bte_error.c" file="ia64\sn\kernel\bte_error.c" line="41"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/bte_error.c" file="ia64\sn\kernel\bte_error.c" line="155"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;notify&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;notify&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/bte_error.c" file="ia64\sn\kernel\bte_error.c" line="206"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;devfn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;devfn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/io_acpi_init.c" file="ia64\sn\kernel\io_acpi_init.c" line="342"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;function&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;function&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/io_acpi_init.c" file="ia64\sn\kernel\io_acpi_init.c" line="343"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/io_acpi_init.c" file="ia64\sn\kernel\io_acpi_init.c" line="344"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/io_acpi_init.c" file="ia64\sn\kernel\io_acpi_init.c" line="486"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prom_bussoft_ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prom_bussoft_ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/io_acpi_init.c" file="ia64\sn\kernel\io_acpi_init.c" line="532"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prom_bussoft_ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prom_bussoft_ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/io_init.c" file="ia64\sn\kernel\io_init.c" line="306"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: sn_irq_info" verbose="Unused variable: sn_irq_info">
            <location file0="ia64/sn/kernel/irq.c" file="ia64\sn\kernel\irq.c" line="226"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cnode&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cnode&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/setup.c" file="ia64\sn\kernel\setup.c" line="233"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;set_cpu0_number&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;set_cpu0_number&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/setup.c" file="ia64\sn\kernel\setup.c" line="633"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;buddy_nasid&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;buddy_nasid&amp;#039; is assigned a value that is never used.">
            <location file0="ia64/sn/kernel/setup.c" file="ia64\sn\kernel\setup.c" line="774"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/tiocx.c" file="ia64\sn\kernel\tiocx.c" line="123"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;widget&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;widget&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/tiocx.c" file="ia64\sn\kernel\tiocx.c" line="345"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;count&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;count&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="ia64/sn/kernel/tiocx.c" file="ia64\sn\kernel\tiocx.c" line="531"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used.">
            <location file0="ia64/sn/kernel/tiocx.c" file="ia64\sn\kernel\tiocx.c" line="428"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;stat&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;stat&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn2_smp.c" file="ia64\sn\kernel\sn2\sn2_smp.c" line="582"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;this_rack&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;this_rack&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="122"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;this_bay&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;this_bay&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="122"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;this_slot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;this_slot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="122"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;this_slab&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;this_slab&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="122"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="220"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;e&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;e&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="222"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sz&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sz&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="503"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="504"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;e&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;e&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="505"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="507"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slice&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slice&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="510"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="511"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptdata&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptdata&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="512"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="513"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nasid_msb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nasid_msb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="524"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;seq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;seq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/kernel/sn2/sn_hwperf.c" file="ia64\sn\kernel\sn2\sn_hwperf.c" line="1193"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;phys_addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;phys_addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/pci/pci_dma.c" file="ia64\sn\pci\pci_dma.c" line="297"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;map==0&amp;#039; is redundant or there is possible null pointer dereference: map." verbose="Either the condition &amp;#039;map==0&amp;#039; is redundant or there is possible null pointer dereference: map.">
            <location file0="ia64/sn/pci/tioca_provider.c" file="ia64\sn\pci\tioca_provider.c" line="535"/>
            <location file0="ia64/sn/pci/tioca_provider.c" file="ia64\sn\pci\tioca_provider.c" line="540"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/pci/tioce_provider.c" file="ia64\sn\pci\tioce_provider.c" line="525"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="ia64/sn/pci/tioce_provider.c" file="ia64\sn\pci\tioce_provider.c" line="460"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ps&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ps&amp;#039; is assigned a value that is never used.">
            <location file0="ia64/sn/pci/tioce_provider.c" file="ia64\sn\pci\tioce_provider.c" line="888"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/pci/pcibr/pcibr_ate.c" file="ia64\sn\pci\pcibr\pcibr_ate.c" line="196"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/pci/pcibr/pcibr_dma.c" file="ia64\sn\pci\pcibr\pcibr_dma.c" line="279"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/pci/pcibr/pcibr_provider.c" file="ia64\sn\pci\pcibr\pcibr_provider.c" line="120"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;common&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;common&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/pci/pcibr/pcibr_provider.c" file="ia64\sn\pci\pcibr\pcibr_provider.c" line="124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pcibus_info&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pcibus_info&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/pci/pcibr/pcibr_provider.c" file="ia64\sn\pci\pcibr\pcibr_provider.c" line="221"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pcibus_info&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pcibus_info&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="ia64/sn/pci/pcibr/pcibr_provider.c" file="ia64\sn\pci\pcibr\pcibr_provider.c" line="243"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used.">
            <location file0="ia64/sn/pci/pcibr/pcibr_provider.c" file="ia64\sn\pci\pcibr\pcibr_provider.c" line="85"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info." verbose="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info.">
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="29"/>
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="31"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info." verbose="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info.">
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="53"/>
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="55"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info." verbose="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info.">
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="80"/>
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="83"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info." verbose="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info.">
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="116"/>
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="119"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info." verbose="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info.">
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="146"/>
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="148"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info." verbose="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info.">
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="170"/>
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="172"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info." verbose="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info.">
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="198"/>
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="200"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info." verbose="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info.">
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="231"/>
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="233"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info." verbose="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info.">
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="258"/>
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="261"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info." verbose="Either the condition &amp;#039;if(pcibus_info)&amp;#039; is redundant or there is possible null pointer dereference: pcibus_info.">
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="288"/>
            <location file0="ia64/sn/pci/pcibr/pcibr_reg.c" file="ia64\sn\pci\pcibr\pcibr_reg.c" line="290"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="m32r/kernel/align.c" file="m32r\kernel\align.c" line="578"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="m32r/kernel/align.c" file="m32r\kernel\align.c" line="624"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="m32r/kernel/align.c" file="m32r\kernel\align.c" line="137"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="m32r/kernel/align.c" file="m32r\kernel\align.c" line="286"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="81"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;align&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;align&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="86"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on location - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on location - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="106"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on location - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on location - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="108"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on location - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on location - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="112"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on location - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on location - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="116"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on location - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on location - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="120"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on location - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on location - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="127"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on hlocation - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on hlocation - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="135"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on location - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on location - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="140"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on location - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on location - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="144"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on location - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on location - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="148"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on location - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on location - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="152"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on location - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on location - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="165"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on location - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on location - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="177"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on hlocation - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on hlocation - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="183"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on hlocation - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on hlocation - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="190"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on location - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on location - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="203"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on location - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on location - it&amp;#039;s already a pointer.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="215"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="m32r/kernel/module.c" file="m32r\kernel\module.c" line="95"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;disp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;disp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m32r/kernel/ptrace.c" file="m32r\kernel\ptrace.c" line="314"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m32r/kernel/smp.c" file="m32r\kernel\smp.c" line="256"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m32r/kernel/smp.c" file="m32r\kernel\smp.c" line="336"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;phys_id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;phys_id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m32r/kernel/smp.c" file="m32r\kernel\smp.c" line="792"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;year&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;year&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="m32r/kernel/time.c" file="m32r\kernel\time.c" line="149"/>
            <location file0="m32r/kernel/time.c" file="m32r\kernel\time.c" line="152"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;mon&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;mon&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="m32r/kernel/time.c" file="m32r\kernel\time.c" line="149"/>
            <location file0="m32r/kernel/time.c" file="m32r\kernel\time.c" line="153"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;day&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;day&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="m32r/kernel/time.c" file="m32r\kernel\time.c" line="149"/>
            <location file0="m32r/kernel/time.c" file="m32r\kernel\time.c" line="154"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m32r/kernel/traps.c" file="m32r\kernel\traps.c" line="127"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="m32r/lib/csum_partial_copy.c" file="m32r\lib\csum_partial_copy.c" line="54"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="m32r/lib/csum_partial_copy.c" file="m32r\lib\csum_partial_copy.c" line="54"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;portp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;portp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="m32r/platforms/oaks32r/io.c" file="m32r\platforms\oaks32r\io.c" line="39"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;portp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;portp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="m32r/platforms/oaks32r/io.c" file="m32r\platforms\oaks32r\io.c" line="47"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;portp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;portp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="m32r/platforms/oaks32r/io.c" file="m32r\platforms\oaks32r\io.c" line="57"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;portp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;portp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="m32r/platforms/oaks32r/io.c" file="m32r\platforms\oaks32r\io.c" line="63"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;portp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;portp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="m32r/platforms/oaks32r/io.c" file="m32r\platforms\oaks32r\io.c" line="69"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;portp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;portp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m32r/platforms/usrv/io.c" file="m32r\platforms\usrv\io.c" line="201"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;portp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;portp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m32r/platforms/usrv/io.c" file="m32r\platforms\usrv\io.c" line="233"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;portp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;portp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m32r/platforms/usrv/io.c" file="m32r\platforms\usrv\io.c" line="252"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &amp;#039;jmp_addr_label040&amp;#039; is not used." verbose="Label &amp;#039;jmp_addr_label040&amp;#039; is not used.">
            <location file0="m68k/amiga/config.c" file="m68k\amiga\config.c" line="626"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &amp;#039;jmp_addr_label&amp;#039; is not used." verbose="Label &amp;#039;jmp_addr_label&amp;#039; is not used.">
            <location file0="m68k/amiga/config.c" file="m68k\amiga\config.c" line="637"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/amiga/pcmcia.c" file="m68k\amiga\pcmcia.c" line="46"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;b&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;b&amp;#039; is assigned a value that is never used.">
            <location file0="m68k/amiga/pcmcia.c" file="m68k\amiga\pcmcia.c" line="35"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;x&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;x&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="m68k/apollo/config.c" file="m68k\apollo\config.c" line="205"/>
            <location file0="m68k/apollo/config.c" file="m68k\apollo\config.c" line="206"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;x&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;x&amp;#039; is assigned a value that is never used.">
            <location file0="m68k/apollo/config.c" file="m68k\apollo\config.c" line="206"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;period&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;period&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/atari/atasound.c" file="m68k\atari\atasound.c" line="60"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &amp;#039;jmp_addr_label040&amp;#039; is not used." verbose="Label &amp;#039;jmp_addr_label040&amp;#039; is not used.">
            <location file0="m68k/atari/config.c" file="m68k\atari\config.c" line="655"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="m68k/atari/config.c" file="m68k\atari\config.c" line="759"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;virt&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;virt&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="m68k/atari/stram.c" file="m68k\atari\stram.c" line="153"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;year&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;year&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/atari/time.c" file="m68k\atari\time.c" line="124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rtc_tenms&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rtc_tenms&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/bvme6000/config.c" file="m68k\bvme6000\config.c" line="358"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/bvme6000/config.c" file="m68k\bvme6000\config.c" line="361"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/bvme6000/config.c" file="m68k\bvme6000\config.c" line="362"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFPM_PPMCR0&amp;#039; since the value of &amp;#039;MCFPM_PPMCR0&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFPM_PPMCR0&amp;#039; since the value of &amp;#039;MCFPM_PPMCR0&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\clk.c" line="44"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFPM_PPMCR0;MCFPM_PPMCR1&amp;#039; since the value of &amp;#039;MCFPM_PPMCR0&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFPM_PPMCR0;MCFPM_PPMCR1&amp;#039; since the value of &amp;#039;MCFPM_PPMCR0&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\clk.c" line="44"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFPM_PPMCR0;MCFPM_PPMCR1&amp;#039; since the value of &amp;#039;MCFPM_PPMCR1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFPM_PPMCR0;MCFPM_PPMCR1&amp;#039; since the value of &amp;#039;MCFPM_PPMCR1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\clk.c" line="61"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFUART_BASE2&amp;#039; since the value of &amp;#039;MCFUART_BASE2&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFUART_BASE2&amp;#039; since the value of &amp;#039;MCFUART_BASE2&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\device.c" line="38"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFUART_BASE3&amp;#039; since the value of &amp;#039;MCFUART_BASE3&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFUART_BASE3&amp;#039; since the value of &amp;#039;MCFUART_BASE3&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\device.c" line="44"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFUART_BASE4&amp;#039; since the value of &amp;#039;MCFUART_BASE4&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFUART_BASE4&amp;#039; since the value of &amp;#039;MCFUART_BASE4&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\device.c" line="50"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFUART_BASE5&amp;#039; since the value of &amp;#039;MCFUART_BASE5&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFUART_BASE5&amp;#039; since the value of &amp;#039;MCFUART_BASE5&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\device.c" line="56"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFUART_BASE6&amp;#039; since the value of &amp;#039;MCFUART_BASE6&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFUART_BASE6&amp;#039; since the value of &amp;#039;MCFUART_BASE6&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\device.c" line="62"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFUART_BASE7&amp;#039; since the value of &amp;#039;MCFUART_BASE7&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFUART_BASE7&amp;#039; since the value of &amp;#039;MCFUART_BASE7&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\device.c" line="68"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFUART_BASE8&amp;#039; since the value of &amp;#039;MCFUART_BASE8&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFUART_BASE8&amp;#039; since the value of &amp;#039;MCFUART_BASE8&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\device.c" line="74"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFUART_BASE9&amp;#039; since the value of &amp;#039;MCFUART_BASE9&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFUART_BASE9&amp;#039; since the value of &amp;#039;MCFUART_BASE9&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\device.c" line="80"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFUART_UIVR&amp;#039; since the value of &amp;#039;MCFUART_UIVR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFUART_UIVR&amp;#039; since the value of &amp;#039;MCFUART_UIVR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\device.c" line="392"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFUART_UIVR&amp;#039; since the value of &amp;#039;MCFUART_UIVR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFUART_UIVR&amp;#039; since the value of &amp;#039;MCFUART_UIVR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\device.c" line="397"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFDMA_BASE0&amp;#039; since the value of &amp;#039;MCFDMA_BASE0&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFDMA_BASE0&amp;#039; since the value of &amp;#039;MCFDMA_BASE0&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\dma.c" line="26"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFDMA_BASE1&amp;#039; since the value of &amp;#039;MCFDMA_BASE1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFDMA_BASE1&amp;#039; since the value of &amp;#039;MCFDMA_BASE1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\dma.c" line="29"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFDMA_BASE2&amp;#039; since the value of &amp;#039;MCFDMA_BASE2&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFDMA_BASE2&amp;#039; since the value of &amp;#039;MCFDMA_BASE2&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\dma.c" line="32"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFDMA_BASE3&amp;#039; since the value of &amp;#039;MCFDMA_BASE3&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFDMA_BASE3&amp;#039; since the value of &amp;#039;MCFDMA_BASE3&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\dma.c" line="35"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_GPIOLIB;MCFGPIO_IRQ_MIN&amp;#039; since the value of &amp;#039;MCFGPIO_IRQ_MIN&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_GPIOLIB;MCFGPIO_IRQ_MIN&amp;#039; since the value of &amp;#039;MCFGPIO_IRQ_MIN&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\gpio.c" line="172"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFICM_INTC1&amp;#039; since the value of &amp;#039;MCFICM_INTC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFICM_INTC1&amp;#039; since the value of &amp;#039;MCFICM_INTC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\intc-2.c" line="57"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFICM_INTC1&amp;#039; since the value of &amp;#039;MCFICM_INTC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFICM_INTC1&amp;#039; since the value of &amp;#039;MCFICM_INTC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\intc-2.c" line="75"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFICM_INTC1&amp;#039; since the value of &amp;#039;MCFICM_INTC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFICM_INTC1&amp;#039; since the value of &amp;#039;MCFICM_INTC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\intc-2.c" line="120"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFICM_INTC1&amp;#039; since the value of &amp;#039;MCFICM_INTC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFICM_INTC1&amp;#039; since the value of &amp;#039;MCFICM_INTC1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\intc-2.c" line="215"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFEPORT_EPDDR&amp;#039; since the value of &amp;#039;MCFEPORT_EPDDR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFEPORT_EPDDR&amp;#039; since the value of &amp;#039;MCFEPORT_EPDDR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\intc-simr.c" line="121"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFEPORT_EPDDR&amp;#039; since the value of &amp;#039;MCFEPORT_EPDDR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFEPORT_EPDDR&amp;#039; since the value of &amp;#039;MCFEPORT_EPDDR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\intc-simr.c" line="122"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFSIM_AVR&amp;#039; since the value of &amp;#039;MCFSIM_AVR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFSIM_AVR&amp;#039; since the value of &amp;#039;MCFSIM_AVR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\intc.c" line="109"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFSIM_AVR&amp;#039; since the value of &amp;#039;MCFSIM_AVR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFSIM_AVR&amp;#039; since the value of &amp;#039;MCFSIM_AVR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\intc.c" line="111"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;divider&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;divider&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/coldfire/m53xx.c" file="m68k\coldfire\m53xx.c" line="600"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFSIM_SYPCR&amp;#039; since the value of &amp;#039;MCFSIM_SYPCR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFSIM_SYPCR&amp;#039; since the value of &amp;#039;MCFSIM_SYPCR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\reset.c" line="30"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCF_RCR&amp;#039; since the value of &amp;#039;MCF_RCR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCF_RCR&amp;#039; since the value of &amp;#039;MCF_RCR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\reset.c" line="41"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_HIGHPROFILE;MCFSIM_ICR_AUTOVEC&amp;#039; since the value of &amp;#039;MCFSIM_ICR_AUTOVEC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_HIGHPROFILE;MCFSIM_ICR_AUTOVEC&amp;#039; since the value of &amp;#039;MCFSIM_ICR_AUTOVEC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\timers.c" line="58"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_HIGHPROFILE;MCFSIM_ICR_AUTOVEC&amp;#039; since the value of &amp;#039;MCFSIM_ICR_AUTOVEC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_HIGHPROFILE;MCFSIM_ICR_AUTOVEC&amp;#039; since the value of &amp;#039;MCFSIM_ICR_AUTOVEC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\timers.c" line="64"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MCFSIM_ICR_AUTOVEC&amp;#039; since the value of &amp;#039;MCFSIM_ICR_AUTOVEC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MCFSIM_ICR_AUTOVEC&amp;#039; since the value of &amp;#039;MCFSIM_ICR_AUTOVEC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\coldfire\timers.c" line="58"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;n&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;n&amp;#039; is assigned a value that is never used.">
            <location file0="m68k/emu/natfeat.c" file="m68k\emu\natfeat.c" line="64"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/emu/nfblock.c" file="m68k\emu\nfblock.c" line="69"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;buf&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;buf&amp;#039; is assigned a value that is never used.">
            <location file0="m68k/emu/nfcon.c" file="m68k\emu\nfcon.c" line="42"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sym&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sym&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/kernel/module.c" file="m68k\kernel\module.c" line="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/kernel/module.c" file="m68k\kernel\module.c" line="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sym&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sym&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/kernel/module.c" file="m68k\kernel\module.c" line="76"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/kernel/module.c" file="m68k\kernel\module.c" line="77"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="m68k/kernel/module.c" file="m68k\kernel\module.c" line="40"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="m68k/kernel/module.c" file="m68k\kernel\module.c" line="86"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/kernel/process.c" file="m68k\kernel\process.c" line="301"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_FPU&amp;#039; since the value of &amp;#039;CONFIG_FPU&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_FPU&amp;#039; since the value of &amp;#039;CONFIG_FPU&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="m68k\kernel\process.c" line="257"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="m68k/kernel/traps.c" file="m68k\kernel\traps.c" line="1207"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err_code&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err_code&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/kernel/traps.c" file="m68k\kernel\traps.c" line="840"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;errorcode&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;errorcode&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/kernel/traps.c" file="m68k\kernel\traps.c" line="444"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="m68k/kernel/traps.c" file="m68k\kernel\traps.c" line="450"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="m68k/kernel/traps.c" file="m68k\kernel\traps.c" line="457"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="m68k/kernel/traps.c" file="m68k\kernel\traps.c" line="504"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="m68k/kernel/traps.c" file="m68k\kernel\traps.c" line="618"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="m68k/kernel/traps.c" file="m68k\kernel\traps.c" line="625"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="m68k/kernel/traps.c" file="m68k\kernel\traps.c" line="664"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/mac/macboing.c" file="m68k\mac\macboing.c" line="289"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/mac/misc.c" file="m68k\mac\misc.c" line="285"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/mac/misc.c" file="m68k\mac\misc.c" line="668"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;wday&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;wday&amp;#039; is assigned a value that is never used.">
            <location file0="m68k/mac/misc.c" file="m68k\mac\misc.c" line="815"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;yday&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;yday&amp;#039; is assigned a value that is never used.">
            <location file0="m68k/mac/misc.c" file="m68k\mac\misc.c" line="837"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="m68k/mac/misc.c" file="m68k\mac\misc.c" line="293"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slot_irq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slot_irq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/mac/via.c" file="m68k\mac\via.c" line="569"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="m68k\math-emu\fp_arith.c" line="0"/>
        </error>
        <error id="syntaxError" severity="error" msg="Invalid number of character &amp;#039;(&amp;#039; when these macros are defined: &amp;#039;__ASSEMBLY__&amp;#039;." verbose="Invalid number of character &amp;#039;(&amp;#039; when these macros are defined: &amp;#039;__ASSEMBLY__&amp;#039;.">
            <location file0="m68k/math-emu/fp_arith.c" file="m68k\math-emu\fp_emu.h" line="133"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="m68k\math-emu\fp_log.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__ASSEMBLY__&amp;#039; was not checked because its code equals another one.">
            <location file="m68k\math-emu\fp_trig.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pgd_dir&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pgd_dir&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/mm/kmap.c" file="m68k\mm\kmap.c" line="306"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pgd_dir&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pgd_dir&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/mm/kmap.c" file="m68k\mm\kmap.c" line="366"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmd_dir&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmd_dir&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/mm/kmap.c" file="m68k\mm\kmap.c" line="367"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;next_to_die&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;next_to_die&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/sun3/mmu_emu.c" file="m68k\sun3\mmu_emu.c" line="293"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hole&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hole&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="m68k/sun3/sun3dvma.c" file="m68k\sun3\sun3dvma.c" line="168"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;i&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;i&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="m68k/sun3/prom/console.c" file="m68k\sun3\prom\console.c" line="21"/>
            <location file0="m68k/sun3/prom/console.c" file="m68k\sun3\prom\console.c" line="25"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;i&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;i&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="m68k/sun3/prom/console.c" file="m68k\sun3\prom\console.c" line="37"/>
            <location file0="m68k/sun3/prom/console.c" file="m68k\sun3\prom\console.c" line="40"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;i&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;i&amp;#039; is assigned a value that is never used.">
            <location file0="m68k/sun3/prom/printf.c" file="m68k\sun3\prom\printf.c" line="35"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ch" verbose="Unused variable: ch">
            <location file0="m68k/sun3/prom/printf.c" file="m68k\sun3\prom\printf.c" line="26"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;i&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;i&amp;#039; is assigned a value that is never used.">
            <location file0="m68k/sun3/prom/printf.c" file="m68k\sun3\prom\printf.c" line="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;thread_cache_size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;thread_cache_size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/cachepart.c" file="metag\kernel\cachepart.c" line="116"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pfn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pfn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/dma.c" file="metag\kernel\dma.c" line="343"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;kern_size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;kern_size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/dma.c" file="metag\kernel\dma.c" line="385"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/irq.c" file="metag\kernel\irq.c" line="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;isp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;isp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/irq.c" file="metag\kernel\irq.c" line="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/module.c" file="metag\kernel\module.c" line="83"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/module.c" file="metag\kernel\module.c" line="243"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="metag/kernel/module.c" file="metag\kernel\module.c" line="129"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="metag/kernel/module.c" file="metag\kernel\module.c" line="137"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="metag/kernel/module.c" file="metag\kernel\module.c" line="142"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="metag/kernel/module.c" file="metag\kernel\module.c" line="253"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;callinsn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;callinsn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/perf_callchain.c" file="metag\kernel\perf_callchain.c" line="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;global_base&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;global_base&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/process.c" file="metag\kernel\process.c" line="202"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)childregs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)childregs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="metag/kernel/process.c" file="metag\kernel\process.c" line="200"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="metag/kernel/process.c" file="metag\kernel\process.c" line="148"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="metag/kernel/process.c" file="metag\kernel\process.c" line="149"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="metag/kernel/process.c" file="metag\kernel\process.c" line="150"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="metag/kernel/process.c" file="metag\kernel\process.c" line="151"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lpj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lpj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/setup.c" file="metag\kernel\setup.c" line="532"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lor1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lor1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/smp.c" file="metag\kernel\smp.c" line="127"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;land1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;land1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/smp.c" file="metag\kernel\smp.c" line="127"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gor1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gor1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/smp.c" file="metag\kernel\smp.c" line="127"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gand1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gand1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/smp.c" file="metag\kernel\smp.c" line="127"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lor2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lor2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/smp.c" file="metag\kernel\smp.c" line="128"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;land2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;land2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/smp.c" file="metag\kernel\smp.c" line="128"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gor2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gor2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/smp.c" file="metag\kernel\smp.c" line="128"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gand2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gand2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/smp.c" file="metag\kernel\smp.c" line="128"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pool&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pool&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/tcm.c" file="metag\kernel\tcm.c" line="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pool&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pool&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/tcm.c" file="metag\kernel\tcm.c" line="110"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/traps.c" file="metag\kernel\traps.c" line="362"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/traps.c" file="metag\kernel\traps.c" line="1011"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/traps.c" file="metag\kernel\traps.c" line="1051"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;cpu&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;cpu&amp;#039; is assigned a value that is never used.">
            <location file0="metag/kernel/traps.c" file="metag\kernel\traps.c" line="986"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fpnew&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fpnew&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/kernel/traps.c" file="metag\kernel\traps.c" line="1053"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="metag/lib/checksum.c" file="metag\lib\checksum.c" line="177"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="metag/lib/checksum.c" file="metag\lib\checksum.c" line="177"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;flush&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;flush&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="metag/mm/cache.c" file="metag\mm\cache.c" line="553"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;flush&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;flush&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="metag/mm/cache.c" file="metag\mm\cache.c" line="558"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;flush&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;flush&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="metag/mm/cache.c" file="metag\mm\cache.c" line="561"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;flush&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;flush&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="metag/mm/cache.c" file="metag\mm\cache.c" line="564"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;flush&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;flush&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="metag/mm/cache.c" file="metag\mm\cache.c" line="565"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;idx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;idx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/mm/highmem.c" file="metag\mm\highmem.c" line="77"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/mm/highmem.c" file="metag\mm\highmem.c" line="77"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;gateway_page&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;gateway_page&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="metag/mm/init.c" file="metag\mm\init.c" line="93"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/mm/maccess.c" file="metag\mm\maccess.c" line="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;phys0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;phys0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="metag/mm/mmu-meta2.c" file="metag\mm\mmu-meta2.c" line="102"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/kernel/dma.c" file="microblaze\kernel\dma.c" line="143"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/kernel/dma.c" file="microblaze\kernel\dma.c" line="144"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/kernel/dma.c" file="microblaze\kernel\dma.c" line="157"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/kernel/dma.c" file="microblaze\kernel\dma.c" line="158"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cnt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cnt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/kernel/heartbeat.c" file="microblaze\kernel\heartbeat.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;period&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;period&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/kernel/heartbeat.c" file="microblaze\kernel\heartbeat.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dist&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dist&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/kernel/heartbeat.c" file="microblaze\kernel\heartbeat.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prop&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prop&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/kernel/heartbeat.c" file="microblaze\kernel\heartbeat.c" line="54"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/kernel/module.c" file="microblaze\kernel\module.c" line="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/kernel/module.c" file="microblaze\kernel\module.c" line="29"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="microblaze/kernel/module.c" file="microblaze\kernel\module.c" line="40"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sigframe::extramask&amp;#039; is never used." verbose="struct member &amp;#039;sigframe::extramask&amp;#039; is never used.">
            <location file0="microblaze/kernel/signal.c" file="microblaze\kernel\signal.c" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i_src&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i_src&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/lib/memcpy.c" file="microblaze\lib\memcpy.c" line="61"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i_dst&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i_dst&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/lib/memcpy.c" file="microblaze\lib\memcpy.c" line="62"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i_src&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i_src&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/lib/memmove.c" file="microblaze\lib\memmove.c" line="68"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i_dst&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i_dst&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/lib/memmove.c" file="microblaze\lib\memmove.c" line="69"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i_src&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i_src&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/lib/memset.c" file="microblaze\lib\memset.c" line="54"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pfn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pfn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/mm/consistent.c" file="microblaze\mm\consistent.c" line="227"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="microblaze/mm/consistent.c" file="microblaze\mm\consistent.c" line="241"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;type&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;type&amp;#039; is assigned a value that is never used.">
            <location file0="microblaze/mm/highmem.c" file="microblaze\mm\highmem.c" line="74"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;p&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;p&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="microblaze/mm/init.c" file="microblaze\mm\init.c" line="298"/>
            <location file0="microblaze/mm/init.c" file="microblaze\mm\init.c" line="301"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;maxmem&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;maxmem&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/mm/init.c" file="microblaze\mm\init.c" line="297"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/mm/pgtable.c" file="microblaze\mm\pgtable.c" line="232"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/pci/pci-common.c" file="microblaze\pci\pci-common.c" line="481"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="microblaze/pci/pci-common.c" file="microblaze\pci\pci-common.c" line="830"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tpr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tpr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/alchemy/common/clock.c" file="mips\alchemy\common\clock.c" line="474"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ret&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ret&amp;#039; is assigned a value that is never used.">
            <location file0="mips/alchemy/common/clock.c" file="mips\alchemy\common\clock.c" line="668"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ret&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ret&amp;#039; is assigned a value that is never used.">
            <location file0="mips/alchemy/common/clock.c" file="mips\alchemy\common\clock.c" line="798"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/alchemy/common/dbdma.c" file="mips\alchemy\common\dbdma.c" line="206"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/alchemy/common/dbdma.c" file="mips\alchemy\common\dbdma.c" line="273"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;chan&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;chan&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/alchemy/common/dma.c" file="mips\alchemy\common\dma.c" line="107"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/alchemy/common/dma.c" file="mips\alchemy\common\dma.c" line="184"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="613"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="757"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="758"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="759"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="760"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="761"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="762"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="763"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="764"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="765"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="766"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="774"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="775"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="776"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="777"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="778"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="779"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="780"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="788"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="789"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="790"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="791"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="792"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="793"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/irq.c" file="mips\alchemy\common\irq.c" line="796"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="101"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="102"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="112"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="120"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="131"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="134"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="137"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="142"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="144"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="148"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="153"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="155"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="158"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="161"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="174"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="176"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="179"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="181"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="186"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="188"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="193"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="195"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="198"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="200"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="203"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="205"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="218"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="220"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="225"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="227"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="232"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="234"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="237"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="239"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="252"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="254"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="257"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="259"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="266"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="268"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="271"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="273"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="340"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="344"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="350"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="358"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="362"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="373"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="381"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="385"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/common/usb.c" file="mips\alchemy\common\usb.c" line="395"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)bcsr2_phys&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)bcsr2_phys&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/devboards/bcsr.c" file="mips\alchemy\devboards\bcsr.c" line="40"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)bcsr1_phys&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)bcsr1_phys&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/devboards/bcsr.c" file="mips\alchemy\devboards\bcsr.c" line="43"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)KSEG1ADDR(AU1550_PSC1_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)KSEG1ADDR(AU1550_PSC1_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/devboards/db1200.c" file="mips\alchemy\devboards\db1200.c" line="1061"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)KSEG1ADDR(AU1300_PSC1_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)KSEG1ADDR(AU1300_PSC1_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/devboards/db1300.c" file="mips\alchemy\devboards\db1300.c" line="890"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)KSEG1ADDR(AU1300_PSC2_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)KSEG1ADDR(AU1300_PSC2_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/devboards/db1300.c" file="mips\alchemy\devboards\db1300.c" line="893"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)KSEG1ADDR(AU1300_PSC3_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)KSEG1ADDR(AU1300_PSC3_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/devboards/db1300.c" file="mips\alchemy\devboards\db1300.c" line="906"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)KSEG1ADDR(AU1550_PSC1_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)KSEG1ADDR(AU1550_PSC1_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/devboards/db1550.c" file="mips\alchemy\devboards\db1550.c" line="688"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)KSEG1ADDR(AU1550_PSC3_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)KSEG1ADDR(AU1550_PSC3_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/devboards/db1550.c" file="mips\alchemy\devboards\db1550.c" line="691"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)KSEG1ADDR(AU1550_PSC0_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)KSEG1ADDR(AU1550_PSC0_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/devboards/db1550.c" file="mips\alchemy\devboards\db1550.c" line="695"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)KSEG1ADDR(AU1550_PSC2_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)KSEG1ADDR(AU1550_PSC2_PHYS_ADDR)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/alchemy/devboards/db1550.c" file="mips\alchemy\devboards\db1550.c" line="698"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp_gcd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp_gcd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/ar7/clock.c" file="mips\ar7\clock.c" line="141"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp_base&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp_base&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/ar7/clock.c" file="mips\ar7\clock.c" line="141"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp_freq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp_freq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/ar7/clock.c" file="mips\ar7\clock.c" line="141"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;product&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;product&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/ar7/clock.c" file="mips\ar7\clock.c" line="203"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;gt;&amp;gt;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;gt;&amp;gt;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;gt;&amp;gt;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;gt;&amp;gt;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/ar7/gpio.c" file="mips\ar7\gpio.c" line="49"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;gt;&amp;gt;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;gt;&amp;gt;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;gt;&amp;gt;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;gt;&amp;gt;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/ar7/gpio.c" file="mips\ar7\gpio.c" line="77"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;gt;&amp;gt;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;gt;&amp;gt;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;gt;&amp;gt;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;gt;&amp;gt;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/ar7/gpio.c" file="mips\ar7\gpio.c" line="84"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;gt;&amp;gt;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;gt;&amp;gt;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;gt;&amp;gt;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;gt;&amp;gt;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/ar7/gpio.c" file="mips\ar7\gpio.c" line="108"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;gt;&amp;gt;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;gt;&amp;gt;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;gt;&amp;gt;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;gt;&amp;gt;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/ar7/gpio.c" file="mips\ar7\gpio.c" line="109"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;gt;&amp;gt;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;gt;&amp;gt;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;gt;&amp;gt;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;gt;&amp;gt;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/ar7/gpio.c" file="mips\ar7\gpio.c" line="138"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;gt;&amp;gt;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;gt;&amp;gt;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;gt;&amp;gt;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;gt;&amp;gt;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/ar7/gpio.c" file="mips\ar7\gpio.c" line="139"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;gt;&amp;gt;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;gt;&amp;gt;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;gt;&amp;gt;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;gt;&amp;gt;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/ar7/gpio.c" file="mips\ar7\gpio.c" line="184"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;gt;&amp;gt;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;gt;&amp;gt;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;gt;&amp;gt;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;gt;&amp;gt;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/ar7/gpio.c" file="mips\ar7\gpio.c" line="185"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;gt;&amp;gt;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;gt;&amp;gt;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;gt;&amp;gt;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;gt;&amp;gt;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/ar7/gpio.c" file="mips\ar7\gpio.c" line="211"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;gt;&amp;gt;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;gt;&amp;gt;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;gt;&amp;gt;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;gt;&amp;gt;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/ar7/gpio.c" file="mips\ar7\gpio.c" line="212"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/ath25/board.c" file="mips\ath25\board.c" line="28"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/ath25/board.c" file="mips\ath25\board.c" line="29"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/ath25/board.c" file="mips\ath25\board.c" line="53"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/ath25/board.c" file="mips\ath25\board.c" line="58"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/ath25/early_printk.c" file="mips\ath25\early_printk.c" line="20"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/ath25/early_printk.c" file="mips\ath25\early_printk.c" line="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/bcm63xx/early_printk.c" file="mips\bcm63xx\early_printk.c" line="14"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%ld in format string (no. 1) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;.">
            <location file0="mips/boot/elf2ecoff.c" file="mips\boot\elf2ecoff.c" line="707"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%ld in format string (no. 1) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;.">
            <location file0="mips/boot/elf2ecoff.c" file="mips\boot\elf2ecoff.c" line="713"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/boot/elf2ecoff.c" file="mips\boot\elf2ecoff.c" line="70"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/boot/elf2ecoff.c" file="mips\boot\elf2ecoff.c" line="70"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)&amp;amp;__image_end&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)&amp;amp;__image_end&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/boot/compressed/decompress.c" file="mips\boot\compressed\decompress.c" line="128"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)VMLINUX_LOAD_ADDRESS_ULL&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)VMLINUX_LOAD_ADDRESS_ULL&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/boot/compressed/decompress.c" file="mips\boot\compressed\decompress.c" line="131"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;rel.r_info&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;rel.r_info&amp;#039; to itself.">
            <location file0="mips/boot/tools/relocs.c" file="mips\boot\tools\relocs.c" line="496"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;errbuf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;errbuf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/boot/tools/relocs.c" file="mips\boot\tools\relocs.c" line="50"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::r_ssym&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::r_ssym&amp;#039; is never used.">
            <location file0="mips/boot/tools/relocs_64.c" file="mips\boot\tools\relocs_64.c" line="17"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::r_type3&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::r_type3&amp;#039; is never used.">
            <location file0="mips/boot/tools/relocs_64.c" file="mips\boot\tools\relocs_64.c" line="18"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::r_type2&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::r_type2&amp;#039; is never used.">
            <location file0="mips/boot/tools/relocs_64.c" file="mips\boot\tools\relocs_64.c" line="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lock&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lock&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/cavium-octeon/octeon-irq.c" file="mips\cavium-octeon\octeon-irq.c" line="444"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lock&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lock&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/cavium-octeon/octeon-irq.c" file="mips\cavium-octeon\octeon-irq.c" line="489"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lock&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lock&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/cavium-octeon/octeon-irq.c" file="mips\cavium-octeon\octeon-irq.c" line="897"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_CAVIUM_RESERVE32&amp;#039; since the value of &amp;#039;CONFIG_CAVIUM_RESERVE32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_CAVIUM_RESERVE32&amp;#039; since the value of &amp;#039;CONFIG_CAVIUM_RESERVE32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\cavium-octeon\setup.c" line="886"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/cavium-octeon/executive/cvmx-bootmem.c" file="mips\cavium-octeon\executive\cvmx-bootmem.c" line="603"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_CAVIUM_RESERVE32&amp;#039; since the value of &amp;#039;CONFIG_CAVIUM_RESERVE32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_CAVIUM_RESERVE32&amp;#039; since the value of &amp;#039;CONFIG_CAVIUM_RESERVE32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\cavium-octeon\executive\cvmx-cmd-queue.c" line="76"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/cavium-octeon/executive/cvmx-helper-util.c" file="mips\cavium-octeon\executive\cvmx-helper-util.c" line="102"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start_of_buffer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start_of_buffer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/cavium-octeon/executive/cvmx-helper-util.c" file="mips\cavium-octeon\executive\cvmx-helper-util.c" line="105"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end_of_data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end_of_data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/cavium-octeon/executive/cvmx-helper-util.c" file="mips\cavium-octeon\executive\cvmx-helper-util.c" line="107"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;cvmx_l2c_tag_cn50xx::reserved&amp;#039; is never used." verbose="struct member &amp;#039;cvmx_l2c_tag_cn50xx::reserved&amp;#039; is never used.">
            <location file0="mips/cavium-octeon/executive/cvmx-l2c.c" file="mips\cavium-octeon\executive\cvmx-l2c.c" line="651"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;cvmx_l2c_tag_cn30xx::reserved&amp;#039; is never used." verbose="struct member &amp;#039;cvmx_l2c_tag_cn30xx::reserved&amp;#039; is never used.">
            <location file0="mips/cavium-octeon/executive/cvmx-l2c.c" file="mips\cavium-octeon\executive\cvmx-l2c.c" line="669"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;cvmx_l2c_tag_cn31xx::reserved&amp;#039; is never used." verbose="struct member &amp;#039;cvmx_l2c_tag_cn31xx::reserved&amp;#039; is never used.">
            <location file0="mips/cavium-octeon/executive/cvmx-l2c.c" file="mips\cavium-octeon\executive\cvmx-l2c.c" line="687"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;cvmx_l2c_tag_cn38xx::reserved&amp;#039; is never used." verbose="struct member &amp;#039;cvmx_l2c_tag_cn38xx::reserved&amp;#039; is never used.">
            <location file0="mips/cavium-octeon/executive/cvmx-l2c.c" file="mips\cavium-octeon\executive\cvmx-l2c.c" line="705"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;cvmx_l2c_tag_cn58xx::reserved&amp;#039; is never used." verbose="struct member &amp;#039;cvmx_l2c_tag_cn58xx::reserved&amp;#039; is never used.">
            <location file0="mips/cavium-octeon/executive/cvmx-l2c.c" file="mips\cavium-octeon\executive\cvmx-l2c.c" line="723"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;cvmx_l2c_tag_cn50xx::reserved&amp;#039; is never used." verbose="struct member &amp;#039;cvmx_l2c_tag_cn50xx::reserved&amp;#039; is never used.">
            <location file0="mips/cavium-octeon/executive/cvmx-l2c.c" file="mips\cavium-octeon\executive\cvmx-l2c.c" line="639"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;cvmx_l2c_tag_cn30xx::reserved&amp;#039; is never used." verbose="struct member &amp;#039;cvmx_l2c_tag_cn30xx::reserved&amp;#039; is never used.">
            <location file0="mips/cavium-octeon/executive/cvmx-l2c.c" file="mips\cavium-octeon\executive\cvmx-l2c.c" line="657"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;cvmx_l2c_tag_cn31xx::reserved&amp;#039; is never used." verbose="struct member &amp;#039;cvmx_l2c_tag_cn31xx::reserved&amp;#039; is never used.">
            <location file0="mips/cavium-octeon/executive/cvmx-l2c.c" file="mips\cavium-octeon\executive\cvmx-l2c.c" line="675"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;cvmx_l2c_tag_cn38xx::reserved&amp;#039; is never used." verbose="struct member &amp;#039;cvmx_l2c_tag_cn38xx::reserved&amp;#039; is never used.">
            <location file0="mips/cavium-octeon/executive/cvmx-l2c.c" file="mips\cavium-octeon\executive\cvmx-l2c.c" line="693"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;cvmx_l2c_tag_cn58xx::reserved&amp;#039; is never used." verbose="struct member &amp;#039;cvmx_l2c_tag_cn58xx::reserved&amp;#039; is never used.">
            <location file0="mips/cavium-octeon/executive/cvmx-l2c.c" file="mips\cavium-octeon\executive\cvmx-l2c.c" line="711"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;interface&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;interface&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/cavium-octeon/executive/cvmx-pko.c" file="mips\cavium-octeon\executive\cvmx-pko.c" line="135"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/cavium-octeon/executive/cvmx-pko.c" file="mips\cavium-octeon\executive\cvmx-pko.c" line="135"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf_ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf_ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/cavium-octeon/executive/cvmx-pko.c" file="mips\cavium-octeon\executive\cvmx-pko.c" line="497"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;timeout_time&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;timeout_time&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/cavium-octeon/executive/cvmx-spi.c" file="mips\cavium-octeon\executive\cvmx-spi.c" line="551"/>
            <location file0="mips/cavium-octeon/executive/cvmx-spi.c" file="mips\cavium-octeon\executive\cvmx-spi.c" line="579"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;*ptr&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;*ptr&amp;#039; to itself.">
            <location file0="mips/dec/ecc-berr.c" file="mips\dec\ecc-berr.c" line="179"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entrylo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entrylo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/dec/kn01-berr.c" file="mips\dec\kn01-berr.c" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/dec/kn01-berr.c" file="mips\dec\kn01-berr.c" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;asid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;asid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/dec/kn01-berr.c" file="mips\dec\kn01-berr.c" line="83"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entryhi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entryhi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/dec/kn01-berr.c" file="mips\dec\kn01-berr.c" line="83"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vaddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vaddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/dec/kn01-berr.c" file="mips\dec\kn01-berr.c" line="83"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dummy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dummy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/dec/prom/memory.c" file="mips\dec\prom\memory.c" line="32"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used.">
            <location file0="mips/dec/prom/memory.c" file="mips\dec\prom\memory.c" line="49"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EMMA2RH_GPIO_CASCADE&amp;#039; since the value of &amp;#039;EMMA2RH_GPIO_CASCADE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EMMA2RH_GPIO_CASCADE&amp;#039; since the value of &amp;#039;EMMA2RH_GPIO_CASCADE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\emma\markeins\irq.c" line="229"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EMMA2RH_GPIO_CASCADE&amp;#039; since the value of &amp;#039;EMMA2RH_GPIO_CASCADE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EMMA2RH_GPIO_CASCADE&amp;#039; since the value of &amp;#039;EMMA2RH_GPIO_CASCADE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\emma\markeins\irq.c" line="246"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EMMA2RH_GPIO_CASCADE&amp;#039; since the value of &amp;#039;EMMA2RH_GPIO_CASCADE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EMMA2RH_GPIO_CASCADE&amp;#039; since the value of &amp;#039;EMMA2RH_GPIO_CASCADE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\emma\markeins\irq.c" line="311"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EMMA2RH_SW_CASCADE&amp;#039; since the value of &amp;#039;EMMA2RH_SW_CASCADE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EMMA2RH_SW_CASCADE&amp;#039; since the value of &amp;#039;EMMA2RH_SW_CASCADE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\emma\markeins\irq.c" line="195"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EMMA2RH_SW_CASCADE&amp;#039; since the value of &amp;#039;EMMA2RH_SW_CASCADE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EMMA2RH_SW_CASCADE&amp;#039; since the value of &amp;#039;EMMA2RH_SW_CASCADE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\emma\markeins\irq.c" line="212"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;EMMA2RH_SW_CASCADE&amp;#039; since the value of &amp;#039;EMMA2RH_SW_CASCADE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;EMMA2RH_SW_CASCADE&amp;#039; since the value of &amp;#039;EMMA2RH_SW_CASCADE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\emma\markeins\irq.c" line="310"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/fw/lib/cmdline.c" file="mips\fw\lib\cmdline.c" line="112"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;rtc_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;rtc_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/jz4740/reset.c" file="mips\jz4740\reset.c" line="76"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __user*)elf_bss&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __user*)elf_bss&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/binfmt_elfn32.c" file="..\fs\binfmt_elf.c" line="1147"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ARCH_DLINFO&amp;#039; since the value of &amp;#039;ARCH_DLINFO&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ARCH_DLINFO&amp;#039; since the value of &amp;#039;ARCH_DLINFO&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="..\fs\binfmt_elf.c" line="258"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/kernel/binfmt_elfn32.c" file="..\fs\binfmt_elf.c" line="2835"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ELF_HWCAP2&amp;#039; since the value of &amp;#039;ELF_HWCAP2&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ELF_HWCAP2&amp;#039; since the value of &amp;#039;ELF_HWCAP2&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="..\fs\binfmt_elf.c" line="276"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ELF_PLAT_INIT&amp;#039; since the value of &amp;#039;ELF_PLAT_INIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ELF_PLAT_INIT&amp;#039; since the value of &amp;#039;ELF_PLAT_INIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="..\fs\binfmt_elf.c" line="1410"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prstatus32::pr_cursig&amp;#039; is never used." verbose="struct member &amp;#039;elf_prstatus32::pr_cursig&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfn32.c" file="mips\kernel\binfmt_elfn32.c" line="49"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prstatus32::pr_sigpend&amp;#039; is never used." verbose="struct member &amp;#039;elf_prstatus32::pr_sigpend&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfn32.c" file="mips\kernel\binfmt_elfn32.c" line="50"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prstatus32::pr_sighold&amp;#039; is never used." verbose="struct member &amp;#039;elf_prstatus32::pr_sighold&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfn32.c" file="mips\kernel\binfmt_elfn32.c" line="51"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prstatus32::pr_reg&amp;#039; is never used." verbose="struct member &amp;#039;elf_prstatus32::pr_reg&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfn32.c" file="mips\kernel\binfmt_elfn32.c" line="60"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prstatus32::pr_fpvalid&amp;#039; is never used." verbose="struct member &amp;#039;elf_prstatus32::pr_fpvalid&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfn32.c" file="mips\kernel\binfmt_elfn32.c" line="61"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_state&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_state&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfn32.c" file="mips\kernel\binfmt_elfn32.c" line="67"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_sname&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_sname&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfn32.c" file="mips\kernel\binfmt_elfn32.c" line="68"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_zomb&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_zomb&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfn32.c" file="mips\kernel\binfmt_elfn32.c" line="69"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_nice&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_nice&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfn32.c" file="mips\kernel\binfmt_elfn32.c" line="70"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_flag&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_flag&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfn32.c" file="mips\kernel\binfmt_elfn32.c" line="71"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_fname&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_fname&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfn32.c" file="mips\kernel\binfmt_elfn32.c" line="76"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_psargs&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_psargs&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfn32.c" file="mips\kernel\binfmt_elfn32.c" line="77"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prstatus32::pr_cursig&amp;#039; is never used." verbose="struct member &amp;#039;elf_prstatus32::pr_cursig&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfo32.c" file="mips\kernel\binfmt_elfo32.c" line="54"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prstatus32::pr_sigpend&amp;#039; is never used." verbose="struct member &amp;#039;elf_prstatus32::pr_sigpend&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfo32.c" file="mips\kernel\binfmt_elfo32.c" line="55"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prstatus32::pr_sighold&amp;#039; is never used." verbose="struct member &amp;#039;elf_prstatus32::pr_sighold&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfo32.c" file="mips\kernel\binfmt_elfo32.c" line="56"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prstatus32::pr_reg&amp;#039; is never used." verbose="struct member &amp;#039;elf_prstatus32::pr_reg&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfo32.c" file="mips\kernel\binfmt_elfo32.c" line="65"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prstatus32::pr_fpvalid&amp;#039; is never used." verbose="struct member &amp;#039;elf_prstatus32::pr_fpvalid&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfo32.c" file="mips\kernel\binfmt_elfo32.c" line="66"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_state&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_state&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfo32.c" file="mips\kernel\binfmt_elfo32.c" line="72"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_sname&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_sname&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfo32.c" file="mips\kernel\binfmt_elfo32.c" line="73"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_zomb&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_zomb&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfo32.c" file="mips\kernel\binfmt_elfo32.c" line="74"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_nice&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_nice&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfo32.c" file="mips\kernel\binfmt_elfo32.c" line="75"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_flag&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_flag&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfo32.c" file="mips\kernel\binfmt_elfo32.c" line="76"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_fname&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_fname&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfo32.c" file="mips\kernel\binfmt_elfo32.c" line="81"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_psargs&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_psargs&amp;#039; is never used.">
            <location file0="mips/kernel/binfmt_elfo32.c" file="mips\kernel\binfmt_elfo32.c" line="82"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="mips/kernel/cevt-bcm1480.c" file="mips\kernel\cevt-bcm1480.c" line="124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/cevt-r4k.c" file="mips\kernel\cevt-r4k.c" line="154"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="mips/kernel/cevt-sb1250.c" file="mips\kernel\cevt-sb1250.c" line="124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fcsr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fcsr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/cpu-probe.c" file="mips\kernel\cpu-probe.c" line="111"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fcsr0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fcsr0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/cpu-probe.c" file="mips\kernel\cpu-probe.c" line="111"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fcsr1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fcsr1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/cpu-probe.c" file="mips\kernel\cpu-probe.c" line="111"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;newcf4&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;newcf4&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/cpu-probe.c" file="mips\kernel\cpu-probe.c" line="951"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mmuextdef&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mmuextdef&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/cpu-probe.c" file="mips\kernel\cpu-probe.c" line="952"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;status&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;status&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/cpu-probe.c" file="mips\kernel\cpu-probe.c" line="1135"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/cpu-probe.c" file="mips\kernel\cpu-probe.c" line="1438"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ok&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ok&amp;#039; is assigned a value that is never used.">
            <location file0="mips/kernel/cpu-probe.c" file="mips\kernel\cpu-probe.c" line="1128"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/crash_dump.c" file="mips\kernel\crash_dump.c" line="40"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;kdump_buf_page&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;kdump_buf_page&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/crash_dump.c" file="mips\kernel\crash_dump.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;curr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;curr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/csrc-r4k.c" file="mips\kernel\csrc-r4k.c" line="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;interp_fp_abi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;interp_fp_abi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/elf.c" file="mips\kernel\elf.c" line="185"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/kgdb.c" file="mips\kernel\kgdb.c" line="143"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/kgdb.c" file="mips\kernel\kgdb.c" line="189"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;rlimit32::rlim_cur&amp;#039; is never used." verbose="struct member &amp;#039;rlimit32::rlim_cur&amp;#039; is never used.">
            <location file0="mips/kernel/linux32.c" file="mips\kernel\linux32.c" line="87"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;rlimit32::rlim_max&amp;#039; is never used." verbose="struct member &amp;#039;rlimit32::rlim_max&amp;#039; is never used.">
            <location file0="mips/kernel/linux32.c" file="mips\kernel\linux32.c" line="88"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)(kexec_smp_wait-relocate_new_kernel)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)(kexec_smp_wait-relocate_new_kernel)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/machine_kexec.c" file="mips\kernel\machine_kexec.c" line="124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/module-rela.c" file="mips\kernel\module-rela.c" line="164"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/module-rela.c" file="mips\kernel\module-rela.c" line="176"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/module.c" file="mips\kernel\module.c" line="267"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/module.c" file="mips\kernel\module.c" line="281"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/module.c" file="mips\kernel\module.c" line="373"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)s.sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)s.sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/module.c" file="mips\kernel\module.c" line="388"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MODULE_START&amp;#039; since the value of &amp;#039;MODULE_START&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MODULE_START&amp;#039; since the value of &amp;#039;MODULE_START&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\kernel\module.c" line="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/perf_event.c" file="mips\kernel\perf_event.c" line="32"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_CPU_BMIPS5000&amp;#039; since the value of &amp;#039;CONFIG_CPU_BMIPS5000&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_CPU_BMIPS5000&amp;#039; since the value of &amp;#039;CONFIG_CPU_BMIPS5000&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\kernel\perf_event_mipsxx.c" line="390"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_CPU_BMIPS5000;CONFIG_MIPS_PERF_SHARED_TC_COUNTERS&amp;#039; since the value of &amp;#039;CONFIG_CPU_BMIPS5000&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_CPU_BMIPS5000;CONFIG_MIPS_PERF_SHARED_TC_COUNTERS&amp;#039; since the value of &amp;#039;CONFIG_CPU_BMIPS5000&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\kernel\perf_event_mipsxx.c" line="390"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vpe_cfg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vpe_cfg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/pm-cps.c" file="mips\kernel\pm-cps.c" line="133"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;nc_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;nc_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/pm-cps.c" file="mips\kernel\pm-cps.c" line="184"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;core_rc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;core_rc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/pm-cps.c" file="mips\kernel\pm-cps.c" line="756"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/proc.c" file="mips\kernel\proc.c" line="42"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/kernel/proc.c" file="mips\kernel\proc.c" line="67"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;max_users&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;max_users&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/process.c" file="mips\kernel\process.c" line="737"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/ptrace.c" file="mips\kernel\ptrace.c" line="540"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/ptrace.c" file="mips\kernel\ptrace.c" line="572"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/rtlx-cmp.c" file="mips\kernel\rtlx-cmp.c" line="24"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buff&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buff&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/rtlx.c" file="mips\kernel\rtlx.c" line="327"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buffer&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buffer&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/rtlx.c" file="mips\kernel\rtlx.c" line="376"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="154"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="155"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="206"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="208"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="292"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;treg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;treg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="598"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="74"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="75"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="95"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="96"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="119"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="120"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="128"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="129"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="271"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="309"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="332"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="342"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="343"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="344"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="421"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="422"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="423"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="973"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="976"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sigframe::sf_extcontext&amp;#039; is never used." verbose="struct member &amp;#039;sigframe::sf_extcontext&amp;#039; is never used.">
            <location file0="mips/kernel/signal.c" file="mips\kernel\signal.c" line="56"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/kernel/smp-bmips.c" file="mips\kernel\smp-bmips.c" line="521"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/smp-cps.c" file="mips\kernel\smp-cps.c" line="249"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_CPU_MIPSR6;CONFIG_MIPS_MT_SMP&amp;#039; since the value of &amp;#039;CONFIG_CPU_MIPSR6&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_CPU_MIPSR6;CONFIG_MIPS_MT_SMP&amp;#039; since the value of &amp;#039;CONFIG_CPU_MIPSR6&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\kernel\smp-cps.c" line="52"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_CPU_MIPSR6;CONFIG_MIPS_MT_SMP&amp;#039; since the value of &amp;#039;CONFIG_MIPS_MT_SMP&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_CPU_MIPSR6;CONFIG_MIPS_MT_SMP&amp;#039; since the value of &amp;#039;CONFIG_MIPS_MT_SMP&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\kernel\smp-cps.c" line="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vpe_id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vpe_id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/smp-cps.c" file="mips\kernel\smp-cps.c" line="490"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/smp.c" file="mips\kernel\smp.c" line="93"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;core_present&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;core_present&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/smp.c" file="mips\kernel\smp.c" line="137"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/smp.c" file="mips\kernel\smp.c" line="740"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;csd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;csd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/smp.c" file="mips\kernel\smp.c" line="741"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;core&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;core&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/smp.c" file="mips\kernel\smp.c" line="186"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/smp.c" file="mips\kernel\smp.c" line="187"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/spram.c" file="mips\kernel\spram.c" line="125"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tag0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tag0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/spram.c" file="mips\kernel\spram.c" line="125"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tag1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tag1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/spram.c" file="mips\kernel\spram.c" line="125"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;enabled&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;enabled&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/spram.c" file="mips\kernel\spram.c" line="126"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/stacktrace.c" file="mips\kernel\stacktrace.c" line="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old_epc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old_epc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/traps.c" file="mips\kernel\traps.c" line="2238"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old_ra&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old_ra&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/traps.c" file="mips\kernel\traps.c" line="2238"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_CPU_BIG_ENDIAN;CONFIG_CPU_MICROMIPS&amp;#039; since the value of &amp;#039;CONFIG_CPU_MICROMIPS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_CPU_BIG_ENDIAN;CONFIG_CPU_MICROMIPS&amp;#039; since the value of &amp;#039;CONFIG_CPU_MICROMIPS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\kernel\traps.c" line="2781"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_CPU_MICROMIPS&amp;#039; since the value of &amp;#039;CONFIG_CPU_MICROMIPS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_CPU_MICROMIPS&amp;#039; since the value of &amp;#039;CONFIG_CPU_MICROMIPS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\kernel\traps.c" line="2781"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/unaligned.c" file="mips\kernel\unaligned.c" line="1618"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/unaligned.c" file="mips\kernel\unaligned.c" line="1650"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/unaligned.c" file="mips\kernel\unaligned.c" line="1772"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/unaligned.c" file="mips\kernel\unaligned.c" line="1785"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/unaligned.c" file="mips\kernel\unaligned.c" line="1843"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/unaligned.c" file="mips\kernel\unaligned.c" line="1856"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/unaligned.c" file="mips\kernel\unaligned.c" line="2124"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/unaligned.c" file="mips\kernel\unaligned.c" line="2158"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/unaligned.c" file="mips\kernel\unaligned.c" line="1683"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/unaligned.c" file="mips\kernel\unaligned.c" line="1719"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/unaligned.c" file="mips\kernel\unaligned.c" line="1912"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/unaligned.c" file="mips\kernel\unaligned.c" line="1925"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/unaligned.c" file="mips\kernel\unaligned.c" line="1987"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/unaligned.c" file="mips\kernel\unaligned.c" line="2000"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_EVA&amp;#039; since the value of &amp;#039;CONFIG_EVA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_EVA&amp;#039; since the value of &amp;#039;CONFIG_EVA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\kernel\unaligned.c" line="1067"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_EVA&amp;#039; since the value of &amp;#039;CONFIG_EVA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_EVA&amp;#039; since the value of &amp;#039;CONFIG_EVA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\kernel\unaligned.c" line="1098"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_EVA&amp;#039; since the value of &amp;#039;CONFIG_EVA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_EVA&amp;#039; since the value of &amp;#039;CONFIG_EVA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\kernel\unaligned.c" line="1129"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_EVA&amp;#039; since the value of &amp;#039;CONFIG_EVA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_EVA&amp;#039; since the value of &amp;#039;CONFIG_EVA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\kernel\unaligned.c" line="1223"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_EVA&amp;#039; since the value of &amp;#039;CONFIG_EVA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_EVA&amp;#039; since the value of &amp;#039;CONFIG_EVA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\kernel\unaligned.c" line="1255"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;epc&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;epc&amp;#039; is assigned a value that is never used.">
            <location file0="mips/kernel/uprobes.c" file="mips\kernel\uprobes.c" line="126"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/vpe-mt.c" file="mips\kernel\vpe-mt.c" line="185"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/vpe.c" file="mips\kernel\vpe.c" line="479"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;res&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;res&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/vpe.c" file="mips\kernel\vpe.c" line="482"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/vpe.c" file="mips\kernel\vpe.c" line="645"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;notifier&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;notifier&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kernel/vpe.c" file="mips\kernel\vpe.c" line="867"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/vpe.c" file="mips\kernel\vpe.c" line="490"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/vpe.c" file="mips\kernel\vpe.c" line="681"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/vpe.c" file="mips\kernel\vpe.c" line="682"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)phdr.p_paddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)phdr.p_paddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kernel/vpe.c" file="mips\kernel\vpe.c" line="800"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;paddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;paddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kvm/dyntrans.c" file="mips\kvm\dyntrans.c" line="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vaddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vaddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kvm/dyntrans.c" file="mips\kvm\dyntrans.c" line="33"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kvm/dyntrans.c" file="mips\kvm\dyntrans.c" line="40"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;index&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;index&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="1122"/>
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="1124"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="1233"/>
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="1243"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="1678"/>
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="1689"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="1810"/>
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="1824"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="1956"/>
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="1968"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="2490"/>
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="2513"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="2859"/>
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="2868"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;branch_pc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;branch_pc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="324"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;running&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;running&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kvm/emulate.c" file="mips\kvm\emulate.c" line="440"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;kscratch_mask&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;kscratch_mask&amp;#039; is assigned a value that is never used.">
            <location file0="mips/kvm/entry.c" file="mips\kvm\entry.c" line="122"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="1782"/>
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="1808"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;npages&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;npages&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="238"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="239"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="461"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gasid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gasid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="462"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cfg5&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cfg5&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="1986"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;gebase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;gebase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="360"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;gebase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;gebase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="366"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;gebase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;gebase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="372"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;gebase+512&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;gebase+512&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="372"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;gebase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;gebase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="373"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;gebase+512&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;gebase+512&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="373"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;gebase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;gebase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="390"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;gebase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;gebase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="391"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="2042"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cfg5&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cfg5&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kvm/mips.c" file="mips\kvm\mips.c" line="2042"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kvm/mmu.c" file="mips\kvm\mmu.c" line="396"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vpn2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vpn2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kvm/mmu.c" file="mips\kvm\mmu.c" line="396"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;asid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;asid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kvm/mmu.c" file="mips\kvm\mmu.c" line="396"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/kvm/mmu.c" file="mips\kvm\mmu.c" line="400"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/kvm/mmu.c" file="mips\kvm\mmu.c" line="449"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/kvm/tlb.c" file="mips\kvm\tlb.c" line="91"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/kvm/trap_emul.c" file="mips\kvm\trap_emul.c" line="337"/>
            <location file0="mips/kvm/trap_emul.c" file="mips\kvm\trap_emul.c" line="340"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/kvm/trap_emul.c" file="mips\kvm\trap_emul.c" line="360"/>
            <location file0="mips/kvm/trap_emul.c" file="mips\kvm\trap_emul.c" line="363"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/kvm/trap_emul.c" file="mips\kvm\trap_emul.c" line="383"/>
            <location file0="mips/kvm/trap_emul.c" file="mips\kvm\trap_emul.c" line="386"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/kvm/trap_emul.c" file="mips\kvm\trap_emul.c" line="406"/>
            <location file0="mips/kvm/trap_emul.c" file="mips\kvm\trap_emul.c" line="409"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/kvm/trap_emul.c" file="mips\kvm\trap_emul.c" line="429"/>
            <location file0="mips/kvm/trap_emul.c" file="mips\kvm\trap_emul.c" line="432"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;er&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/kvm/trap_emul.c" file="mips\kvm\trap_emul.c" line="452"/>
            <location file0="mips/kvm/trap_emul.c" file="mips\kvm\trap_emul.c" line="455"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;er&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;er&amp;#039; is assigned a value that is never used.">
            <location file0="mips/kvm/trap_emul.c" file="mips\kvm\trap_emul.c" line="326"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;%&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a%b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a%b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a%(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/lantiq/xway/gptu.c" file="mips\lantiq\xway\gptu.c" line="108"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;%&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a%b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a%b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a%(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/lantiq/xway/gptu.c" file="mips\lantiq\xway\gptu.c" line="110"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;%&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a%b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a%b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a%(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/lantiq/xway/gptu.c" file="mips\lantiq\xway\gptu.c" line="112"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;%&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a%b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a%b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a%(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/lantiq/xway/gptu.c" file="mips\lantiq\xway\gptu.c" line="118"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;%&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a%b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a%b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a%(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/lantiq/xway/gptu.c" file="mips\lantiq\xway\gptu.c" line="119"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;%&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a%b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a%b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a%(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/lantiq/xway/gptu.c" file="mips\lantiq\xway\gptu.c" line="120"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;clk&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;clk&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/lantiq/xway/reset.c" file="mips\lantiq\xway\reset.c" line="184"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ppi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ppi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/lasat/lasat_board.c" file="mips\lasat\lasat_board.c" line="110"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/lasat/sysctl.c" file="mips\lasat\sysctl.c" line="102"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/lasat/sysctl.c" file="mips\lasat\sysctl.c" line="102"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entryhi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entryhi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/lib/dump_tlb.c" file="mips\lib\dump_tlb.c" line="104"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entrylo0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entrylo0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/lib/dump_tlb.c" file="mips\lib\dump_tlb.c" line="105"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entrylo1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entrylo1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/lib/dump_tlb.c" file="mips\lib\dump_tlb.c" line="105"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pagemask&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pagemask&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/lib/dump_tlb.c" file="mips\lib\dump_tlb.c" line="107"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entryhi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entryhi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/lib/r3k_dump_tlb.c" file="mips\lib\r3k_dump_tlb.c" line="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entrylo0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entrylo0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/lib/r3k_dump_tlb.c" file="mips\lib\r3k_dump_tlb.c" line="35"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;plat_dat&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;plat_dat&amp;#039; is assigned a value that is never used.">
            <location file0="mips/loongson32/common/platform.c" file="mips\loongson32\common\platform.c" line="160"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;val&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;val&amp;#039; is assigned a value that is never used.">
            <location file0="mips/loongson32/common/platform.c" file="mips\loongson32\common\platform.c" line="163"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: nid" verbose="Unused variable: nid">
            <location file0="mips/loongson64/common/dma-swiotlb.c" file="mips\loongson64\common\dma-swiotlb.c" line="114"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: nid" verbose="Unused variable: nid">
            <location file0="mips/loongson64/common/dma-swiotlb.c" file="mips\loongson64\common\dma-swiotlb.c" line="126"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/loongson64/common/irq.c" file="mips\loongson64\common\irq.c" line="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;isr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;isr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/loongson64/lemote-2f/irq.c" file="mips\loongson64\lemote-2f\irq.c" line="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/loongson64/loongson-3/hpet.c" file="mips\loongson64\loongson-3\hpet.c" line="175"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/loongson64/loongson-3/smp.c" file="mips\loongson64\loongson-3\smp.c" line="257"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c0count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c0count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/loongson64/loongson-3/smp.c" file="mips\loongson64\loongson-3\smp.c" line="258"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fcr31&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fcr31&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/math-emu/cp1emu.c" file="mips\math-emu\cp1emu.c" line="597"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;xm&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;xm&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/dp_2008class.c" file="mips\math-emu\dp_2008class.c" line="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;xe&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;xe&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/dp_2008class.c" file="mips\math-emu\dp_2008class.c" line="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;xm&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;xm&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/dp_cmp.c" file="mips\math-emu\dp_cmp.c" line="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;xe&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;xe&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/dp_cmp.c" file="mips\math-emu\dp_cmp.c" line="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ym&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ym&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/dp_cmp.c" file="mips\math-emu\dp_cmp.c" line="35"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ye&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ye&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/dp_cmp.c" file="mips\math-emu\dp_cmp.c" line="35"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function.">
            <location file0="mips/math-emu/dp_tint.c" file="mips\math-emu\dp_tint.c" line="36"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function.">
            <location file0="mips/math-emu/dp_tlong.c" file="mips\math-emu\dp_tlong.c" line="36"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;xm&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;xm&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/ieee754dp.c" file="mips\math-emu\ieee754dp.c" line="29"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;xe&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;xe&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/ieee754dp.c" file="mips\math-emu\ieee754dp.c" line="29"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;xm&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;xm&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/ieee754sp.c" file="mips\math-emu\ieee754sp.c" line="29"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;xe&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;xe&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/ieee754sp.c" file="mips\math-emu\ieee754sp.c" line="29"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ps&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ps&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/math-emu/me-debugfs.c" file="mips\math-emu\me-debugfs.c" line="24"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;xm&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;xm&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/sp_2008class.c" file="mips\math-emu\sp_2008class.c" line="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;xe&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;xe&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/sp_2008class.c" file="mips\math-emu\sp_2008class.c" line="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/math-emu/sp_cmp.c" file="mips\math-emu\sp_cmp.c" line="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/math-emu/sp_cmp.c" file="mips\math-emu\sp_cmp.c" line="27"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;xm&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;xm&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/sp_cmp.c" file="mips\math-emu\sp_cmp.c" line="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;xe&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;xe&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/sp_cmp.c" file="mips\math-emu\sp_cmp.c" line="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ym&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ym&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/sp_cmp.c" file="mips\math-emu\sp_cmp.c" line="35"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ye&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ye&amp;#039; is assigned a value that is never used.">
            <location file0="mips/math-emu/sp_cmp.c" file="mips\math-emu\sp_cmp.c" line="35"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function.">
            <location file0="mips/math-emu/sp_tint.c" file="mips\math-emu\sp_tint.c" line="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;round&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;round&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/math-emu/sp_tint.c" file="mips\math-emu\sp_tint.c" line="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sticky&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sticky&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/math-emu/sp_tint.c" file="mips\math-emu\sp_tint.c" line="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;odd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;odd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/math-emu/sp_tint.c" file="mips\math-emu\sp_tint.c" line="29"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function.">
            <location file0="mips/math-emu/sp_tlong.c" file="mips\math-emu\sp_tlong.c" line="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;status&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;status&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/c-r3k.c" file="mips\mm\c-r3k.c" line="75"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/c-r4k.c" file="mips\mm\c-r4k.c" line="994"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cache_size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cache_size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/c-r4k.c" file="mips\mm\c-r4k.c" line="994"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/mm/c-r4k.c" file="mips\mm\c-r4k.c" line="1863"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/c-tx39.c" file="mips\mm\c-tx39.c" line="295"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/c-tx39.c" file="mips\mm\c-tx39.c" line="320"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/cache.c" file="mips\mm\cache.c" line="152"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l2_err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l2_err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/cerr-sb1.c" file="mips\mm\cerr-sb1.c" line="195"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;memio_err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;memio_err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/cerr-sb1.c" file="mips\mm\cerr-sb1.c" line="195"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;valid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;valid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/cerr-sb1.c" file="mips\mm\cerr-sb1.c" line="434"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;taglo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;taglo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/cerr-sb1.c" file="mips\mm\cerr-sb1.c" line="436"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;va&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;va&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/cerr-sb1.c" file="mips\mm\cerr-sb1.c" line="436"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;predecode&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;predecode&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/cerr-sb1.c" file="mips\mm\cerr-sb1.c" line="512"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/cerr-sb1.c" file="mips\mm\cerr-sb1.c" line="566"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;w&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;w&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/cerr-sb1.c" file="mips\mm\cerr-sb1.c" line="567"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;valid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;valid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/cerr-sb1.c" file="mips\mm\cerr-sb1.c" line="628"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/cerr-sb1.c" file="mips\mm\cerr-sb1.c" line="629"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;taglo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;taglo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/cerr-sb1.c" file="mips\mm\cerr-sb1.c" line="631"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pa&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pa&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/cerr-sb1.c" file="mips\mm\cerr-sb1.c" line="631"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;datalo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;datalo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/cerr-sb1.c" file="mips\mm\cerr-sb1.c" line="695"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/dma-default.c" file="mips\mm\dma-default.c" line="422"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/dma-default.c" file="mips\mm\dma-default.c" line="423"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/dma-default.c" file="mips\mm\dma-default.c" line="441"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/dma-default.c" file="mips\mm\dma-default.c" line="442"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/mm/dma-default.c" file="mips\mm\dma-default.c" line="323"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MODULE_START&amp;#039; since the value of &amp;#039;MODULE_START&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MODULE_START&amp;#039; since the value of &amp;#039;MODULE_START&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\mm\fault.c" line="94"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;ptep++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;ptep++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="mips/mm/gup.c" file="mips\mm\gup.c" line="65"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="mips/mm/gup.c" file="mips\mm\gup.c" line="107"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pmdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pmdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="mips/mm/gup.c" file="mips\mm\gup.c" line="147"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="mips/mm/gup.c" file="mips\mm\gup.c" line="180"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pudp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pudp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="mips/mm/gup.c" file="mips\mm\gup.c" line="220"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="mips/mm/gup.c" file="mips\mm\gup.c" line="286"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="mips/mm/gup.c" file="mips\mm\gup.c" line="349"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pud&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pud&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/hugetlbpage.c" file="mips\mm\hugetlbpage.c" line="45"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;kmap_coherent(page,vaddr)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;kmap_coherent(page,vaddr)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/mm/init.c" file="mips\mm\init.c" line="217"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;kmap_coherent(page,vaddr)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;kmap_coherent(page,vaddr)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/mm/init.c" file="mips\mm\init.c" line="244"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: used" verbose="Unused variable: used">
            <location file0="mips/mm/init.c" file="mips\mm\init.c" line="347"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/mmap.c" file="mips\mm\mmap.c" line="67"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ftlbhighset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ftlbhighset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/tlb-r4k.c" file="mips\mm\tlb-r4k.c" line="64"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/mm/tlb-r4k.c" file="mips\mm\tlb-r4k.c" line="345"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_64BIT&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_64BIT&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\mm\tlbex.c" line="1458"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_64BIT&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_64BIT&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\mm\tlbex.c" line="2834"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_64BIT&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_64BIT&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\mm\tlbex.c" line="2854"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_64BIT;CONFIG_MIPS_PGD_C0_CONTEXT&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_64BIT;CONFIG_MIPS_PGD_C0_CONTEXT&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\mm\tlbex.c" line="1458"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_64BIT;CONFIG_MIPS_PGD_C0_CONTEXT&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_64BIT;CONFIG_MIPS_PGD_C0_CONTEXT&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\mm\tlbex.c" line="2834"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_64BIT;CONFIG_MIPS_PGD_C0_CONTEXT&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_64BIT;CONFIG_MIPS_PGD_C0_CONTEXT&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\mm\tlbex.c" line="2854"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_64BIT;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_64BIT;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\mm\tlbex.c" line="1458"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_64BIT;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_64BIT;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\mm\tlbex.c" line="2834"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_64BIT;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_64BIT;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_64BIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\mm\tlbex.c" line="2854"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_CAVIUM_OCTEON_CVMSEG_SIZE&amp;#039; since the value of &amp;#039;CONFIG_CAVIUM_OCTEON_CVMSEG_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_CAVIUM_OCTEON_CVMSEG_SIZE&amp;#039; since the value of &amp;#039;CONFIG_CAVIUM_OCTEON_CVMSEG_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\mm\tlbex.c" line="135"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_XPA&amp;#039; since the value of &amp;#039;CONFIG_XPA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_XPA&amp;#039; since the value of &amp;#039;CONFIG_XPA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\mm\tlbex.c" line="1148"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_XPA&amp;#039; since the value of &amp;#039;CONFIG_XPA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_XPA&amp;#039; since the value of &amp;#039;CONFIG_XPA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\mm\tlbex.c" line="1908"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_XPA&amp;#039; since the value of &amp;#039;CONFIG_XPA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_XPA&amp;#039; since the value of &amp;#039;CONFIG_XPA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\mm\tlbex.c" line="2940"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/netlogic/common/irq.c" file="mips\netlogic\common\irq.c" line="226"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pcibase&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pcibase&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/netlogic/xlp/nlm_hal.c" file="mips\netlogic\xlp\nlm_hal.c" line="137"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sysbase&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sysbase&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/netlogic/xlp/nlm_hal.c" file="mips\netlogic\xlp\nlm_hal.c" line="307"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;clockbase&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;clockbase&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/netlogic/xlp/nlm_hal.c" file="mips\netlogic\xlp\nlm_hal.c" line="307"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;val&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;val&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mips/netlogic/xlp/usb-init.c" file="mips\netlogic\xlp\usb-init.c" line="76"/>
            <location file0="mips/netlogic/xlp/usb-init.c" file="mips\netlogic\xlp\usb-init.c" line="77"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nodep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nodep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/netlogic/xlp/wakeup.c" file="mips\netlogic\xlp\wakeup.c" line="124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;syscoremask&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;syscoremask&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/netlogic/xlp/wakeup.c" file="mips\netlogic\xlp\wakeup.c" line="126"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ncores&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ncores&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/netlogic/xlp/wakeup.c" file="mips\netlogic\xlp\wakeup.c" line="127"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;total_credits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;total_credits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/netlogic/xlr/fmn-config.c" file="mips\netlogic\xlr\fmn-config.c" line="88"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;credits_per_cpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;credits_per_cpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/netlogic/xlr/fmn-config.c" file="mips\netlogic\xlr\fmn-config.c" line="134"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bkt_status&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bkt_status&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/netlogic/xlr/fmn.c" file="mips\netlogic\xlr\fmn.c" line="76"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/paravirt/paravirt-irq.c" file="mips\paravirt\paravirt-irq.c" line="240"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/paravirt/paravirt-irq.c" file="mips\paravirt\paravirt-irq.c" line="285"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;timeo&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;timeo&amp;#039; is assigned a value that is never used.">
            <location file0="mips/pci/fixup-cobalt.c" file="mips\pci\fixup-cobalt.c" line="124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/pci/fixup-emma2rh.c" file="mips\pci\fixup-emma2rh.c" line="79"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/pci/msi-octeon.c" file="mips\pci\msi-octeon.c" line="210"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/pci/msi-octeon.c" file="mips\pci\msi-octeon.c" line="373"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/pci/msi-xlp.c" file="mips\pci\msi-xlp.c" line="329"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/pci/msi-xlp.c" file="mips\pci\msi-xlp.c" line="598"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/pci/msi-xlp.c" file="mips\pci\msi-xlp.c" line="634"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;link&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;link&amp;#039; is assigned a value that is never used.">
            <location file0="mips/pci/msi-xlp.c" file="mips\pci\msi-xlp.c" line="180"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used.">
            <location file0="mips/pci/ops-bonito64.c" file="mips\pci\ops-bonito64.c" line="73"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used.">
            <location file0="mips/pci/ops-loongson2.c" file="mips\pci\ops-loongson2.c" line="102"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;type&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;type&amp;#039; is assigned a value that is never used.">
            <location file0="mips/pci/ops-loongson3.c" file="mips\pci\ops-loongson3.c" line="42"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/pci/ops-pmcmsp.c" file="mips\pci\ops-pmcmsp.c" line="385"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;intcount&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;intcount&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/pci/ops-pmcmsp.c" file="mips\pci\ops-pmcmsp.c" line="72"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;intr&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;intr&amp;#039; is assigned a value that is never used.">
            <location file0="mips/pci/ops-pmcmsp.c" file="mips\pci\ops-pmcmsp.c" line="162"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)&amp;amp;pcicptr.g2pcfgdata&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)&amp;amp;pcicptr.g2pcfgdata&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/pci/ops-tx4927.c" file="mips\pci\ops-tx4927.c" line="120"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)&amp;amp;pcicptr.g2pcfgdata&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)&amp;amp;pcicptr.g2pcfgdata&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/pci/ops-tx4927.c" file="mips\pci\ops-tx4927.c" line="127"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)&amp;amp;pcicptr.g2pcfgdata&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)&amp;amp;pcicptr.g2pcfgdata&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/pci/ops-tx4927.c" file="mips\pci\ops-tx4927.c" line="139"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)&amp;amp;pcicptr.g2pcfgdata&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)&amp;amp;pcicptr.g2pcfgdata&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/pci/ops-tx4927.c" file="mips\pci\ops-tx4927.c" line="147"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/pci/pci-ar2315.c" file="mips\pci\pci-ar2315.c" line="263"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;cfg_space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;cfg_space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/pci/pci-bcm1480.c" file="mips\pci\pci-bcm1480.c" line="70"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;cfg_space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;cfg_space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/pci/pci-bcm1480.c" file="mips\pci\pci-bcm1480.c" line="75"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;devno&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;devno&amp;#039; is assigned a value that is never used.">
            <location file0="mips/pci/pci-bcm1480.c" file="mips\pci\pci-bcm1480.c" line="110"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ht_cfg_space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ht_cfg_space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/pci/pci-bcm1480ht.c" file="mips\pci\pci-bcm1480ht.c" line="75"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ht_cfg_space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ht_cfg_space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/pci/pci-bcm1480ht.c" file="mips\pci\pci-bcm1480ht.c" line="80"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;devno&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;devno&amp;#039; is assigned a value that is never used.">
            <location file0="mips/pci/pci-bcm1480ht.c" file="mips\pci\pci-bcm1480ht.c" line="99"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reg_value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reg_value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/pci/pci-mt7620.c" file="mips\pci\pci-mt7620.c" line="114"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::reserved&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::reserved&amp;#039; is never used.">
            <location file0="mips/pci/pci-octeon.c" file="mips\pci\pci-octeon.c" line="50"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::reserved2&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::reserved2&amp;#039; is never used.">
            <location file0="mips/pci/pci-octeon.c" file="mips\pci\pci-octeon.c" line="54"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::reserved3&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::reserved3&amp;#039; is never used.">
            <location file0="mips/pci/pci-octeon.c" file="mips\pci\pci-octeon.c" line="56"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;config&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;config&amp;#039; is assigned a value that is never used.">
            <location file0="mips/pci/pci-octeon.c" file="mips\pci\pci-octeon.c" line="171"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: flags" verbose="Unused variable: flags">
            <location file0="mips/pci/pci-rt3883.c" file="mips\pci\pci-rt3883.c" line="107"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: flags" verbose="Unused variable: flags">
            <location file0="mips/pci/pci-rt3883.c" file="mips\pci\pci-rt3883.c" line="123"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;cfg_space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;cfg_space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/pci/pci-sb1250.c" file="mips\pci\pci-sb1250.c" line="80"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;cfg_space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;cfg_space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/pci/pci-sb1250.c" file="mips\pci\pci-sb1250.c" line="85"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pci_config_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pci_config_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/pci/pci-xlp.c" file="mips\pci\pci-xlp.c" line="101"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pci_config_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pci_config_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/pci/pci-xlp.c" file="mips\pci\pci-xlp.c" line="112"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pci_config_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pci_config_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/pci/pci-xlr.c" file="mips\pci\pci-xlr.c" line="68"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pci_config_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pci_config_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/pci/pci-xlr.c" file="mips\pci\pci-xlr.c" line="79"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::reserved_49_61&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::reserved_49_61&amp;#039; is never used.">
            <location file0="mips/pci/pcie-octeon.c" file="mips\pci\pcie-octeon.c" line="46"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::reserved_36_39&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::reserved_36_39&amp;#039; is never used.">
            <location file0="mips/pci/pcie-octeon.c" file="mips\pci\pcie-octeon.c" line="50"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::reserved_29_31&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::reserved_29_31&amp;#039; is never used.">
            <location file0="mips/pci/pcie-octeon.c" file="mips\pci\pcie-octeon.c" line="53"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::reserved_49_61&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::reserved_49_61&amp;#039; is never used.">
            <location file0="mips/pci/pcie-octeon.c" file="mips\pci\pcie-octeon.c" line="78"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::reserved_36_39&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::reserved_36_39&amp;#039; is never used.">
            <location file0="mips/pci/pcie-octeon.c" file="mips\pci\pcie-octeon.c" line="82"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::address&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::address&amp;#039; is never used.">
            <location file0="mips/pci/pcie-octeon.c" file="mips\pci\pcie-octeon.c" line="85"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous2::reserved_49_61&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous2::reserved_49_61&amp;#039; is never used.">
            <location file0="mips/pci/pcie-octeon.c" file="mips\pci\pcie-octeon.c" line="90"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous2::reserved_36_39&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous2::reserved_36_39&amp;#039; is never used.">
            <location file0="mips/pci/pcie-octeon.c" file="mips\pci\pcie-octeon.c" line="94"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous2::address&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous2::address&amp;#039; is never used.">
            <location file0="mips/pci/pcie-octeon.c" file="mips\pci\pcie-octeon.c" line="95"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;iptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;iptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/pmcs-msp71xx/msp_setup.c" file="mips\pmcs-msp71xx\msp_setup.c" line="61"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SOC_MT7621&amp;#039; since the value of &amp;#039;CONFIG_SOC_MT7621&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SOC_MT7621&amp;#039; since the value of &amp;#039;CONFIG_SOC_MT7621&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mips\ralink\early_printk.c" line="84"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: name" verbose="Possible null pointer dereference: name">
            <location file0="mips/ralink/mt7621.c" file="mips\ralink\mt7621.c" line="211"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;orbits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;orbits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/rb532/devices.c" file="mips\rb532\devices.c" line="158"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nandbits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nandbits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/rb532/devices.c" file="mips\rb532\devices.c" line="158"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip22-berr.c" file="mips\sgi-ip22\ip22-berr.c" line="67"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip22-berr.c" file="mips\sgi-ip22\ip22-berr.c" line="68"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip22-berr.c" file="mips\sgi-ip22\ip22-berr.c" line="69"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip22-berr.c" file="mips\sgi-ip22\ip22-berr.c" line="70"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip22-berr.c" file="mips\sgi-ip22\ip22-berr.c" line="71"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip22-berr.c" file="mips\sgi-ip22\ip22-berr.c" line="72"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip22-berr.c" file="mips\sgi-ip22\ip22-berr.c" line="78"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip22-berr.c" file="mips\sgi-ip22\ip22-berr.c" line="79"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip22-berr.c" file="mips\sgi-ip22\ip22-berr.c" line="80"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip22-berr.c" file="mips\sgi-ip22\ip22-berr.c" line="81"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip22-berr.c" file="mips\sgi-ip22\ip22-berr.c" line="82"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip22-berr.c" file="mips\sgi-ip22\ip22-berr.c" line="83"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip22-berr.c" file="mips\sgi-ip22\ip22-berr.c" line="84"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip22-berr.c" file="mips\sgi-ip22\ip22-berr.c" line="85"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptr8&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptr8&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/sgi-ip22/ip22-gio.c" file="mips\sgi-ip22\ip22-gio.c" line="311"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptr16&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptr16&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/sgi-ip22/ip22-gio.c" file="mips\sgi-ip22\ip22-gio.c" line="312"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/sgi-ip22/ip22-gio.c" file="mips\sgi-ip22\ip22-gio.c" line="385"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;%&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a%b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a%b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a%(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip22-mc.c" file="mips\sgi-ip22\ip22-mc.c" line="38"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip28-berr.c" file="mips\sgi-ip22\ip28-berr.c" line="230"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip28-berr.c" file="mips\sgi-ip22\ip28-berr.c" line="299"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip28-berr.c" file="mips\sgi-ip22\ip28-berr.c" line="300"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip28-berr.c" file="mips\sgi-ip22\ip28-berr.c" line="301"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip28-berr.c" file="mips\sgi-ip22\ip28-berr.c" line="302"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip28-berr.c" file="mips\sgi-ip22\ip28-berr.c" line="303"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip28-berr.c" file="mips\sgi-ip22\ip28-berr.c" line="304"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip28-berr.c" file="mips\sgi-ip22\ip28-berr.c" line="313"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip28-berr.c" file="mips\sgi-ip22\ip28-berr.c" line="314"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip28-berr.c" file="mips\sgi-ip22\ip28-berr.c" line="315"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip28-berr.c" file="mips\sgi-ip22\ip28-berr.c" line="316"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip28-berr.c" file="mips\sgi-ip22\ip28-berr.c" line="317"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip28-berr.c" file="mips\sgi-ip22\ip28-berr.c" line="318"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip28-berr.c" file="mips\sgi-ip22\ip28-berr.c" line="319"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="mips/sgi-ip22/ip28-berr.c" file="mips\sgi-ip22\ip28-berr.c" line="320"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/sgi-ip27/ip27-irq.c" file="mips\sgi-ip27\ip27-irq.c" line="100"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/sgi-ip27/ip27-klconfig.c" file="mips\sgi-ip27\ip27-klconfig.c" line="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;acpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;acpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/sgi-ip27/ip27-klconfig.c" file="mips\sgi-ip27\ip27-klconfig.c" line="134"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="mips/sgi-ip27/ip27-timer.c" file="mips\sgi-ip27\ip27-timer.c" line="113"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;int_on&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;int_on&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/sibyte/bcm1480/irq.c" file="mips\sibyte\bcm1480\irq.c" line="100"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/sibyte/common/sb_tbprof.c" file="mips\sibyte\common\sb_tbprof.c" line="205"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur_count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur_count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/sibyte/common/sb_tbprof.c" file="mips\sibyte\common\sb_tbprof.c" line="492"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;src&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;src&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/sibyte/common/sb_tbprof.c" file="mips\sibyte\common\sb_tbprof.c" line="493"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/sni/pcimt.c" file="mips\sni\pcimt.c" line="257"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;local_gotno&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;local_gotno&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;symtabno&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;symtabno&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gotsym&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gotsym&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="215"/>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &amp;#039;caseSHT_REL&amp;#039; is not used. Should this be a &amp;#039;case&amp;#039; of the enclosing switch()?" verbose="Label &amp;#039;caseSHT_REL&amp;#039; is not used. Should this be a &amp;#039;case&amp;#039; of the enclosing switch()?">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="215"/>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &amp;#039;caseSHT_RELA&amp;#039; is not used. Should this be a &amp;#039;case&amp;#039; of the enclosing switch()?" verbose="Label &amp;#039;caseSHT_RELA&amp;#039; is not used. Should this be a &amp;#039;case&amp;#039; of the enclosing switch()?">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="215"/>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &amp;#039;caseSHT_DYNAMIC&amp;#039; is not used. Should this be a &amp;#039;case&amp;#039; of the enclosing switch()?" verbose="Label &amp;#039;caseSHT_DYNAMIC&amp;#039; is not used. Should this be a &amp;#039;case&amp;#039; of the enclosing switch()?">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="215"/>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &amp;#039;caseDT_MIPS_LOCAL_GOTNO&amp;#039; is not used. Should this be a &amp;#039;case&amp;#039; of the enclosing switch()?" verbose="Label &amp;#039;caseDT_MIPS_LOCAL_GOTNO&amp;#039; is not used. Should this be a &amp;#039;case&amp;#039; of the enclosing switch()?">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="215"/>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &amp;#039;caseDT_MIPS_SYMTABNO&amp;#039; is not used. Should this be a &amp;#039;case&amp;#039; of the enclosing switch()?" verbose="Label &amp;#039;caseDT_MIPS_SYMTABNO&amp;#039; is not used. Should this be a &amp;#039;case&amp;#039; of the enclosing switch()?">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="215"/>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &amp;#039;caseDT_MIPS_GOTSYM&amp;#039; is not used. Should this be a &amp;#039;case&amp;#039; of the enclosing switch()?" verbose="Label &amp;#039;caseDT_MIPS_GOTSYM&amp;#039; is not used. Should this be a &amp;#039;case&amp;#039; of the enclosing switch()?">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="215"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="21"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;shdrs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;shdrs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="25"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="26"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;shdrs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;shdrs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="30"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="48"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="135"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;shdrs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;shdrs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="141"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="173"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;shdrs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;shdrs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="178"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="179"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;symtab&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;symtab&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="191"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="215"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;shdrs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;shdrs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="215"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;symtab&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;symtab&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mips/vdso/genvdso.c" file="mips\vdso\genvdso.h" line="215"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vr41xx/common/icu.c" file="mips\vr41xx\common\icu.c" line="162"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vr41xx/common/icu.c" file="mips\vr41xx\common\icu.c" line="178"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vr41xx/common/icu.c" file="mips\vr41xx\common\icu.c" line="194"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vr41xx/common/icu.c" file="mips\vr41xx\common\icu.c" line="210"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vr41xx/common/icu.c" file="mips\vr41xx\common\icu.c" line="226"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vr41xx/common/icu.c" file="mips\vr41xx\common\icu.c" line="242"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vr41xx/common/icu.c" file="mips\vr41xx\common\icu.c" line="330"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vr41xx/common/icu.c" file="mips\vr41xx\common\icu.c" line="347"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vr41xx/common/icu.c" file="mips\vr41xx\common\icu.c" line="364"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vr41xx/common/icu.c" file="mips\vr41xx\common\icu.c" line="381"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vr41xx/common/icu.c" file="mips\vr41xx\common\icu.c" line="398"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vr41xx/common/icu.c" file="mips\vr41xx\common\icu.c" line="415"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vr41xx/common/icu.c" file="mips\vr41xx\common\icu.c" line="432"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mips/vr41xx/common/icu.c" file="mips\vr41xx\common\icu.c" line="449"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/boot/compressed/misc.c" file="mn10300\boot\compressed\misc.c" line="294"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/boot/compressed/misc.c" file="mn10300\boot\compressed\misc.c" line="315"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/boot/compressed/misc.c" file="mn10300\boot\compressed\misc.c" line="238"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="mn10300/boot/tools/build.c" file="mn10300\boot\tools\build.c" line="130"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="mn10300/boot/tools/build.c" file="mn10300\boot\tools\build.c" line="177"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="mn10300/boot/tools/build.c" file="mn10300\boot\tools\build.c" line="205"/>
        </error>
        <error id="va_end_missing" severity="error" msg="va_list &amp;#039;args&amp;#039; was opened but not closed by va_end()." verbose="va_list &amp;#039;args&amp;#039; was opened but not closed by va_end().">
            <location file0="mn10300/boot/tools/build.c" file="mn10300\boot\tools\build.c" line="54"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/cevt-mn10300.c" file="mn10300\kernel\cevt-mn10300.c" line="82"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;tmp&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mn10300/kernel/gdb-io-serial.c" file="mn10300\kernel\gdb-io-serial.c" line="46"/>
            <location file0="mn10300/kernel/gdb-io-serial.c" file="mn10300\kernel\gdb-io-serial.c" line="70"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/gdb-io-serial.c" file="mn10300\kernel\gdb-io-serial.c" line="70"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MN10300_IOBCLK&amp;#039; since the value of &amp;#039;MN10300_IOBCLK&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MN10300_IOBCLK&amp;#039; since the value of &amp;#039;MN10300_IOBCLK&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mn10300\kernel\gdb-io-ttysm.c" line="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/kernel/gdb-stub.c" file="mn10300\kernel\gdb-stub.c" line="249"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xmitcsum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xmitcsum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/kernel/gdb-stub.c" file="mn10300\kernel\gdb-stub.c" line="250"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/kernel/gdb-stub.c" file="mn10300\kernel\gdb-stub.c" line="252"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;error&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;error&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/kernel/gdb-stub.c" file="mn10300\kernel\gdb-stub.c" line="252"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/kernel/gdb-stub.c" file="mn10300\kernel\gdb-stub.c" line="387"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/kernel/gdb-stub.c" file="mn10300\kernel\gdb-stub.c" line="389"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hexValue&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hexValue&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/kernel/gdb-stub.c" file="mn10300\kernel\gdb-stub.c" line="438"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;x&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;x&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="mn10300/kernel/gdb-stub.c" file="mn10300\kernel\gdb-stub.c" line="617"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;x&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;x&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="mn10300/kernel/gdb-stub.c" file="mn10300\kernel\gdb-stub.c" line="812"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;qty&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;qty&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/kernel/gdb-stub.c" file="mn10300\kernel\gdb-stub.c" line="953"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/irq.c" file="mn10300\kernel\irq.c" line="51"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/irq.c" file="mn10300\kernel\irq.c" line="64"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;tmp&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mn10300/kernel/irq.c" file="mn10300\kernel\irq.c" line="365"/>
            <location file0="mn10300/kernel/irq.c" file="mn10300\kernel\irq.c" line="372"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/irq.c" file="mn10300\kernel\irq.c" line="382"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/irq.c" file="mn10300\kernel\irq.c" line="100"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp2&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp2&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/irq.c" file="mn10300\kernel\irq.c" line="93"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/irq.c" file="mn10300\kernel\irq.c" line="140"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned variable &amp;#039;arg&amp;#039; can&amp;#039;t be negative so it is unnecessary to test it." verbose="Unsigned variable &amp;#039;arg&amp;#039; can&amp;#039;t be negative so it is unnecessary to test it.">
            <location file0="mn10300/kernel/kgdb.c" file="mn10300\kernel\kgdb.c" line="192"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned variable &amp;#039;arg&amp;#039; can&amp;#039;t be negative so it is unnecessary to test it." verbose="Unsigned variable &amp;#039;arg&amp;#039; can&amp;#039;t be negative so it is unnecessary to test it.">
            <location file0="mn10300/kernel/kgdb.c" file="mn10300\kernel\kgdb.c" line="343"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/kernel/mn10300-serial.c" file="mn10300\kernel\mn10300-serial.c" line="945"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/mn10300-serial.c" file="mn10300\kernel\mn10300-serial.c" line="397"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/mn10300-serial.c" file="mn10300\kernel\mn10300-serial.c" line="426"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/mn10300-serial.c" file="mn10300\kernel\mn10300-serial.c" line="438"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;x&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;x&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/mn10300-serial.c" file="mn10300\kernel\mn10300-serial.c" line="484"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;x&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;x&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/mn10300-serial.c" file="mn10300\kernel\mn10300-serial.c" line="510"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;x&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;x&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/mn10300-serial.c" file="mn10300\kernel\mn10300-serial.c" line="520"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;x&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;x&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/mn10300-serial.c" file="mn10300\kernel\mn10300-serial.c" line="1135"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CMSPAR&amp;#039; since the value of &amp;#039;CMSPAR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CMSPAR&amp;#039; since the value of &amp;#039;CMSPAR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mn10300\kernel\mn10300-serial.c" line="1205"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ix&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ix&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/kernel/mn10300-serial.c" file="mn10300\kernel\mn10300-serial.c" line="1974"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/mn10300-serial.c" file="mn10300\kernel\mn10300-serial.c" line="2061"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_MN10300_TTYSM_CONSOLE;MN10300_IOBCLK&amp;#039; since the value of &amp;#039;MN10300_IOBCLK&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_MN10300_TTYSM_CONSOLE;MN10300_IOBCLK&amp;#039; since the value of &amp;#039;MN10300_IOBCLK&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mn10300\kernel\mn10300-serial.c" line="1756"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_MN10300_TTYSM_CONSOLE;MN10300_IOBCLK&amp;#039; since the value of &amp;#039;MN10300_IOBCLK&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_MN10300_TTYSM_CONSOLE;MN10300_IOBCLK&amp;#039; since the value of &amp;#039;MN10300_IOBCLK&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mn10300\kernel\mn10300-serial.c" line="1938"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MN10300_IOBCLK&amp;#039; since the value of &amp;#039;MN10300_IOBCLK&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MN10300_IOBCLK&amp;#039; since the value of &amp;#039;MN10300_IOBCLK&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mn10300\kernel\mn10300-serial.c" line="1756"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/kernel/module.c" file="mn10300\kernel\module.c" line="66"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mn10300/kernel/module.c" file="mn10300\kernel\module.c" line="76"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;mn10300_unit_hard_reset&amp;#039; since the value of &amp;#039;mn10300_unit_hard_reset&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;mn10300_unit_hard_reset&amp;#039; since the value of &amp;#039;mn10300_unit_hard_reset&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mn10300\kernel\process.c" line="78"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cnt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cnt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/kernel/smp.c" file="mn10300\kernel\smp.c" line="401"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;cnt&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;cnt&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="mn10300/kernel/smp.c" file="mn10300\kernel\smp.c" line="433"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;cnt&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;cnt&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="mn10300/kernel/smp.c" file="mn10300\kernel\smp.c" line="440"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;cnt&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;cnt&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="mn10300/kernel/smp.c" file="mn10300\kernel\smp.c" line="443"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned variable &amp;#039;cnt&amp;#039; can&amp;#039;t be negative so it is unnecessary to test it." verbose="Unsigned variable &amp;#039;cnt&amp;#039; can&amp;#039;t be negative so it is unnecessary to test it.">
            <location file0="mn10300/kernel/smp.c" file="mn10300\kernel\smp.c" line="451"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp16&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp16&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/smp.c" file="mn10300\kernel\smp.c" line="203"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/smp.c" file="mn10300\kernel\smp.c" line="230"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/smp.c" file="mn10300\kernel\smp.c" line="248"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/smp.c" file="mn10300\kernel\smp.c" line="271"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/smp.c" file="mn10300\kernel\smp.c" line="297"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tmp16&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tmp16&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/smp.c" file="mn10300\kernel\smp.c" line="698"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/kernel/traps.c" file="mn10300\kernel\traps.c" line="400"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;i&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;i&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/kernel/traps.c" file="mn10300\kernel\traps.c" line="442"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mn10300/lib/checksum.c" file="mn10300\lib\checksum.c" line="84"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mn10300/lib/checksum.c" file="mn10300\lib\checksum.c" line="84"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mn10300/lib/checksum.c" file="mn10300\lib\checksum.c" line="102"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="mn10300/lib/checksum.c" file="mn10300\lib\checksum.c" line="102"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pteu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pteu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="mn10300/mm/mmu-context.c" file="mn10300\mm\mmu-context.c" line="32"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;cnx&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;cnx&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="mn10300/mm/mmu-context.c" file="mn10300\mm\mmu-context.c" line="42"/>
            <location file0="mn10300/mm/mmu-context.c" file="mn10300\mm\mmu-context.c" line="44"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ETHERNET_IRQ_LEVEL&amp;#039; since the value of &amp;#039;CONFIG_ETHERNET_IRQ_LEVEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ETHERNET_IRQ_LEVEL&amp;#039; since the value of &amp;#039;CONFIG_ETHERNET_IRQ_LEVEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mn10300\unit-asb2303\unit-init.c" line="40"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; since the value of &amp;#039;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; since the value of &amp;#039;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mn10300\unit-asb2303\unit-init.c" line="36"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;rawval&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;rawval&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/unit-asb2305/pci.c" file="mn10300\unit-asb2305\pci.c" line="97"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;rawval&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;rawval&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/unit-asb2305/pci.c" file="mn10300\unit-asb2305\pci.c" line="123"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;rawval&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;rawval&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/unit-asb2305/pci.c" file="mn10300\unit-asb2305\pci.c" line="149"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;rawval&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;rawval&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/unit-asb2305/pci.c" file="mn10300\unit-asb2305\pci.c" line="182"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;rawval&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;rawval&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/unit-asb2305/pci.c" file="mn10300\unit-asb2305\pci.c" line="207"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;rawval&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;rawval&amp;#039; is assigned a value that is never used.">
            <location file0="mn10300/unit-asb2305/pci.c" file="mn10300\unit-asb2305\pci.c" line="232"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; since the value of &amp;#039;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; since the value of &amp;#039;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mn10300\unit-asb2305\unit-init.c" line="31"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ETHERNET_IRQ_LEVEL&amp;#039; since the value of &amp;#039;CONFIG_ETHERNET_IRQ_LEVEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ETHERNET_IRQ_LEVEL&amp;#039; since the value of &amp;#039;CONFIG_ETHERNET_IRQ_LEVEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mn10300\unit-asb2364\unit-init.c" line="78"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_ETHERNET_IRQ_LEVEL;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; since the value of &amp;#039;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_ETHERNET_IRQ_LEVEL;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; since the value of &amp;#039;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mn10300\unit-asb2364\unit-init.c" line="76"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; since the value of &amp;#039;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; since the value of &amp;#039;CONFIG_EXT_SERIAL_IRQ_LEVEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="mn10300\unit-asb2364\unit-init.c" line="76"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SERIAL_ALTERA_JTAGUART_CONSOLE;CONFIG_SERIAL_ALTERA_UART_CONSOLE;JTAG_UART_BASE;UART0_BASE&amp;#039; since the value of &amp;#039;JTAG_UART_BASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SERIAL_ALTERA_JTAGUART_CONSOLE;CONFIG_SERIAL_ALTERA_UART_CONSOLE;JTAG_UART_BASE;UART0_BASE&amp;#039; since the value of &amp;#039;JTAG_UART_BASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="nios2\boot\compressed\console.c" line="66"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SERIAL_ALTERA_JTAGUART_CONSOLE;JTAG_UART_BASE&amp;#039; since the value of &amp;#039;JTAG_UART_BASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SERIAL_ALTERA_JTAGUART_CONSOLE;JTAG_UART_BASE&amp;#039; since the value of &amp;#039;JTAG_UART_BASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="nios2\boot\compressed\console.c" line="66"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SERIAL_ALTERA_JTAGUART_CONSOLE;JTAG_UART_BASE;CONFIG_SERIAL_ALTERA_JTAGUART_CONSOLE_BYPASS&amp;#039; since the value of &amp;#039;JTAG_UART_BASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SERIAL_ALTERA_JTAGUART_CONSOLE;JTAG_UART_BASE;CONFIG_SERIAL_ALTERA_JTAGUART_CONSOLE_BYPASS&amp;#039; since the value of &amp;#039;JTAG_UART_BASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="nios2\boot\compressed\console.c" line="66"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SERIAL_ALTERA_UART_CONSOLE;UART0_BASE&amp;#039; since the value of &amp;#039;UART0_BASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SERIAL_ALTERA_UART_CONSOLE;UART0_BASE&amp;#039; since the value of &amp;#039;UART0_BASE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="nios2\boot\compressed\console.c" line="112"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="nios2/boot/compressed/misc.c" file="nios2\boot\compressed\misc.c" line="158"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;status&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;status&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="nios2/kernel/early_printk.c" file="nios2\kernel\early_printk.c" line="39"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="nios2/kernel/kgdb.c" file="nios2\kernel\kgdb.c" line="92"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="nios2/kernel/kgdb.c" file="nios2\kernel\kgdb.c" line="110"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="nios2/kernel/module.c" file="nios2\kernel\module.c" line="63"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="nios2/kernel/process.c" file="nios2\kernel\process.c" line="244"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="nios2/mm/dma-mapping.c" file="nios2\mm\dma-mapping.c" line="149"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="nios2/mm/dma-mapping.c" file="nios2\mm\dma-mapping.c" line="30"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="nios2/mm/dma-mapping.c" file="nios2\mm\dma-mapping.c" line="41"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="nios2/mm/dma-mapping.c" file="nios2\mm\dma-mapping.c" line="57"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;init&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;init&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="nios2/mm/pgtable.c" file="nios2\mm\pgtable.c" line="57"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tlbmisc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tlbmisc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="nios2/mm/tlb.c" file="nios2\mm\tlb.c" line="267"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;pteaddr&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;pteaddr&amp;#039; is assigned a value that is never used.">
            <location file0="nios2/mm/tlb.c" file="nios2\mm\tlb.c" line="243"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tlbacc&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tlbacc&amp;#039; is assigned a value that is never used.">
            <location file0="nios2/mm/tlb.c" file="nios2\mm\tlb.c" line="245"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="nios2/mm/tlb.c" file="nios2\mm\tlb.c" line="200"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="nios2/mm/tlb.c" file="nios2\mm\tlb.c" line="201"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="nios2/mm/tlb.c" file="nios2\mm\tlb.c" line="202"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="nios2/mm/tlb.c" file="nios2\mm\tlb.c" line="203"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="nios2/mm/tlb.c" file="nios2\mm\tlb.c" line="204"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="openrisc/kernel/module.c" file="openrisc\kernel\module.c" line="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="openrisc/kernel/module.c" file="openrisc\kernel\module.c" line="30"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="openrisc/kernel/module.c" file="openrisc\kernel\module.c" line="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="openrisc/kernel/traps.c" file="openrisc\kernel\traps.c" line="52"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="openrisc/kernel/traps.c" file="openrisc\kernel\traps.c" line="206"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)tinfo&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)tinfo&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="openrisc/kernel/traps.c" file="openrisc\kernel\traps.c" line="46"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prstatus32::pr_cursig&amp;#039; is never used." verbose="struct member &amp;#039;elf_prstatus32::pr_cursig&amp;#039; is never used.">
            <location file0="parisc/kernel/binfmt_elf32.c" file="parisc\kernel\binfmt_elf32.c" line="47"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prstatus32::pr_sigpend&amp;#039; is never used." verbose="struct member &amp;#039;elf_prstatus32::pr_sigpend&amp;#039; is never used.">
            <location file0="parisc/kernel/binfmt_elf32.c" file="parisc\kernel\binfmt_elf32.c" line="48"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prstatus32::pr_sighold&amp;#039; is never used." verbose="struct member &amp;#039;elf_prstatus32::pr_sighold&amp;#039; is never used.">
            <location file0="parisc/kernel/binfmt_elf32.c" file="parisc\kernel\binfmt_elf32.c" line="49"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prstatus32::pr_fpvalid&amp;#039; is never used." verbose="struct member &amp;#039;elf_prstatus32::pr_fpvalid&amp;#039; is never used.">
            <location file0="parisc/kernel/binfmt_elf32.c" file="parisc\kernel\binfmt_elf32.c" line="59"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_state&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_state&amp;#039; is never used.">
            <location file0="parisc/kernel/binfmt_elf32.c" file="parisc\kernel\binfmt_elf32.c" line="65"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_sname&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_sname&amp;#039; is never used.">
            <location file0="parisc/kernel/binfmt_elf32.c" file="parisc\kernel\binfmt_elf32.c" line="66"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_zomb&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_zomb&amp;#039; is never used.">
            <location file0="parisc/kernel/binfmt_elf32.c" file="parisc\kernel\binfmt_elf32.c" line="67"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_nice&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_nice&amp;#039; is never used.">
            <location file0="parisc/kernel/binfmt_elf32.c" file="parisc\kernel\binfmt_elf32.c" line="68"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_flag&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_flag&amp;#039; is never used.">
            <location file0="parisc/kernel/binfmt_elf32.c" file="parisc\kernel\binfmt_elf32.c" line="69"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_fname&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_fname&amp;#039; is never used.">
            <location file0="parisc/kernel/binfmt_elf32.c" file="parisc\kernel\binfmt_elf32.c" line="74"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;elf_prpsinfo32::pr_psargs&amp;#039; is never used." verbose="struct member &amp;#039;elf_prpsinfo32::pr_psargs&amp;#039; is never used.">
            <location file0="parisc/kernel/binfmt_elf32.c" file="parisc\kernel\binfmt_elf32.c" line="75"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/cache.c" file="parisc\kernel\cache.c" line="343"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/cache.c" file="parisc\kernel\cache.c" line="344"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/firmware.c" file="parisc\kernel\firmware.c" line="149"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ret&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ret&amp;#039; is assigned a value that is never used.">
            <location file0="parisc/kernel/firmware.c" file="parisc\kernel\firmware.c" line="168"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;loc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;loc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/module.c" file="parisc\kernel\module.c" line="585"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[targetsec].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[targetsec].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/kernel/module.c" file="parisc\kernel\module.c" line="601"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;loc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;loc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/module.c" file="parisc\kernel\module.c" line="747"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;loc64&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;loc64&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/module.c" file="parisc\kernel\module.c" line="748"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[targetsec].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[targetsec].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/kernel/module.c" file="parisc\kernel\module.c" line="762"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/pdc_cons.c" file="parisc\kernel\pdc_cons.c" line="146"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/perf.c" file="parisc\kernel\perf.c" line="842"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dwords&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dwords&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/perf.c" file="parisc\kernel\perf.c" line="843"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;image_size&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;image_size&amp;#039; is assigned a value that is never used.">
            <location file0="parisc/kernel/perf.c" file="parisc\kernel\perf.c" line="328"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ip&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ip&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/process.c" file="parisc\kernel\process.c" line="265"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &amp;#039;HERE&amp;#039; is not used." verbose="Label &amp;#039;HERE&amp;#039; is not used.">
            <location file0="parisc/kernel/stacktrace.c" file="parisc\kernel\stacktrace.c" line="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/traps.c" file="parisc\kernel\traps.c" line="222"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &amp;#039;HERE&amp;#039; is not used." verbose="Label &amp;#039;HERE&amp;#039; is not used.">
            <location file0="parisc/kernel/traps.c" file="parisc\kernel\traps.c" line="224"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="parisc/kernel/traps.c" file="parisc\kernel\traps.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/unaligned.c" file="parisc\kernel\unaligned.c" line="137"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="parisc/kernel/unaligned.c" file="parisc\kernel\unaligned.c" line="530"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="parisc/kernel/unaligned.c" file="parisc\kernel\unaligned.c" line="534"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="parisc/kernel/unaligned.c" file="parisc\kernel\unaligned.c" line="566"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="parisc/kernel/unaligned.c" file="parisc\kernel\unaligned.c" line="574"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="parisc/kernel/unaligned.c" file="parisc\kernel\unaligned.c" line="582"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="parisc/kernel/unaligned.c" file="parisc\kernel\unaligned.c" line="590"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;e&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;e&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/unwind.c" file="parisc\kernel\unwind.c" line="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/unwind.c" file="parisc\kernel\unwind.c" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;npc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;npc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/unwind.c" file="parisc\kernel\unwind.c" line="257"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;insn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;insn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/unwind.c" file="parisc\kernel\unwind.c" line="258"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;frame_size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;frame_size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/unwind.c" file="parisc\kernel\unwind.c" line="259"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;looking_for_rp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;looking_for_rp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/unwind.c" file="parisc\kernel\unwind.c" line="260"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rpoffset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rpoffset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/kernel/unwind.c" file="parisc\kernel\unwind.c" line="260"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/checksum.c" file="parisc\lib\checksum.c" line="171"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/checksum.c" file="parisc\lib\checksum.c" line="171"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="201"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="27"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="28"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="35"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="36"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="44"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="45"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="79"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="80"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="89"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="90"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="97"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="98"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="107"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="108"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="117"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="118"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="132"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="139"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/io.c" file="parisc\lib\io.c" line="145"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/iomap.c" file="parisc\lib\iomap.c" line="205"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/iomap.c" file="parisc\lib\iomap.c" line="214"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/iomap.c" file="parisc\lib\iomap.c" line="223"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;s&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;s&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/iomap.c" file="parisc\lib\iomap.c" line="232"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;s&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;s&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/iomap.c" file="parisc\lib\iomap.c" line="241"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;s&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;s&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/iomap.c" file="parisc\lib\iomap.c" line="250"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/iomap.c" file="parisc\lib\iomap.c" line="404"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/iomap.c" file="parisc\lib\iomap.c" line="420"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/iomap.c" file="parisc\lib\iomap.c" line="436"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/iomap.c" file="parisc\lib\iomap.c" line="452"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/iomap.c" file="parisc\lib\iomap.c" line="468"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="parisc/lib/iomap.c" file="parisc\lib\iomap.c" line="484"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;current_ir&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;current_ir&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/decode_exc.c" file="parisc\math-emu\decode_exc.c" line="106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;excptype&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;excptype&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/decode_exc.c" file="parisc\math-emu\decode_exc.c" line="111"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\decode_exc.c" line="0"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error">
            <location file0="parisc/math-emu/decode_exc.c" file="parisc\math-emu\float.h" line="40"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\denormal.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\dfadd.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\dfcmp.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\dfdiv.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\dfmpy.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\dfrem.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sump1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sump1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/dfsqrt.c" file="parisc\math-emu\dfsqrt.c" line="58"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sump2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sump2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/dfsqrt.c" file="parisc\math-emu\dfsqrt.c" line="58"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;guardbit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;guardbit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/dfsqrt.c" file="parisc\math-emu\dfsqrt.c" line="60"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\dfsqrt.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\dfsub.c" line="0"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;exc_reg::exception&amp;#039; is never used." verbose="struct member &amp;#039;exc_reg::exception&amp;#039; is never used.">
            <location file0="parisc/math-emu/driver.c" file="parisc\math-emu\driver.c" line="44"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;exc_reg::ei&amp;#039; is never used." verbose="struct member &amp;#039;exc_reg::ei&amp;#039; is never used.">
            <location file0="parisc/math-emu/driver.c" file="parisc\math-emu\driver.c" line="45"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\driver.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\fcnvff.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\fcnvfu.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\fcnvfut.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/fcnvfx.c" file="parisc\math-emu\fcnvfx.c" line="64"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/fcnvfx.c" file="parisc\math-emu\fcnvfx.c" line="189"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tempp1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tempp1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/fcnvfx.c" file="parisc\math-emu\fcnvfx.c" line="348"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tempp2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tempp2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/fcnvfx.c" file="parisc\math-emu\fcnvfx.c" line="348"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tempp1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tempp1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/fcnvfx.c" file="parisc\math-emu\fcnvfx.c" line="492"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tempp2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tempp2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/fcnvfx.c" file="parisc\math-emu\fcnvfx.c" line="492"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\fcnvfx.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/fcnvfxt.c" file="parisc\math-emu\fcnvfxt.c" line="65"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/fcnvfxt.c" file="parisc\math-emu\fcnvfxt.c" line="142"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tempp1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tempp1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/fcnvfxt.c" file="parisc\math-emu\fcnvfxt.c" line="232"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tempp2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tempp2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/fcnvfxt.c" file="parisc\math-emu\fcnvfxt.c" line="232"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tempp1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tempp1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/fcnvfxt.c" file="parisc\math-emu\fcnvfxt.c" line="312"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tempp2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tempp2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/fcnvfxt.c" file="parisc\math-emu\fcnvfxt.c" line="312"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\fcnvfxt.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\fcnvuf.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\fcnvxf.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\fmpyfadd.c" line="0"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous8::dbl&amp;#039; is never used." verbose="union member &amp;#039;Anonymous8::dbl&amp;#039; is never used.">
            <location file0="parisc/math-emu/fpudispatch.c" file="parisc\math-emu\fpudispatch.c" line="1431"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous8::flt&amp;#039; is never used." verbose="union member &amp;#039;Anonymous8::flt&amp;#039; is never used.">
            <location file0="parisc/math-emu/fpudispatch.c" file="parisc\math-emu\fpudispatch.c" line="1432"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous10::dbl&amp;#039; is never used." verbose="union member &amp;#039;Anonymous10::dbl&amp;#039; is never used.">
            <location file0="parisc/math-emu/fpudispatch.c" file="parisc\math-emu\fpudispatch.c" line="1628"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous10::flt&amp;#039; is never used." verbose="union member &amp;#039;Anonymous10::flt&amp;#039; is never used.">
            <location file0="parisc/math-emu/fpudispatch.c" file="parisc\math-emu\fpudispatch.c" line="1629"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\fpudispatch.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\frnd.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\sfadd.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\sfcmp.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\sfdiv.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\sfmpy.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\sfrem.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/sfsqrt.c" file="parisc\math-emu\sfsqrt.c" line="59"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;guardbit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;guardbit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/math-emu/sfsqrt.c" file="parisc\math-emu\sfsqrt.c" line="60"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\sfsqrt.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__NO_PA_HDRS&amp;#039; was not checked because its code equals another one.">
            <location file="parisc\math-emu\sfsub.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/mm/hugetlbpage.c" file="parisc\mm\hugetlbpage.c" line="60"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pud&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pud&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/mm/hugetlbpage.c" file="parisc\mm\hugetlbpage.c" line="89"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/mm/hugetlbpage.c" file="parisc\mm\hugetlbpage.c" line="90"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/mm/init.c" file="parisc\mm\init.c" line="1049"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;zl&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;zl&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/mm/init.c" file="parisc\mm\init.c" line="801"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/mm/init.c" file="parisc\mm\init.c" line="1007"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="parisc/mm/init.c" file="parisc\mm\init.c" line="1029"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bank_config&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bank_config&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/4xx.c" file="powerpc\boot\4xx.c" line="53"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/4xx.c" file="powerpc\boot\4xx.c" line="422"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fwdvb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fwdvb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/4xx.c" file="powerpc\boot\4xx.c" line="683"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;muram_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;muram_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/cpm-serial.c" file="powerpc\boot\cpm-serial.c" line="322"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;muram_addr-muram_offset&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;muram_addr-muram_offset&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/cpm-serial.c" file="powerpc\boot\cpm-serial.c" line="322"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;muram_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;muram_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/cpm-serial.c" file="powerpc\boot\cpm-serial.c" line="325"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;muram_addr-muram_offset&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;muram_addr-muram_offset&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/cpm-serial.c" file="powerpc\boot\cpm-serial.c" line="325"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;div&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;div&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/cuboot-52xx.c" file="powerpc\boot\cuboot-52xx.c" line="27"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.&#10;The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.&#10;The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.&#10;In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.&#10;To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.&#10;#include &amp;lt;stdarg.h&amp;gt;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;&#10;void f(char *s, ...) {&#10;    va_list ap;&#10;    va_start(ap,s);&#10;    for (;;) {&#10;        char *p = va_arg(ap,char*);&#10;        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);&#10;        if(!p) break;&#10;    }&#10;    va_end(ap);&#10;}&#10;&#10;void g() {&#10;    char *s2 = &amp;quot;x&amp;quot;;&#10;    char *s3 = &amp;quot;ERROR&amp;quot;;&#10;&#10;    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64&#10;    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);&#10;}&#10;&#10;void h() {&#10;    int i;&#10;    volatile unsigned char a[1000];&#10;    for (i = 0; i&amp;lt;sizeof(a); i++)&#10;        a[i] = -1;&#10;}&#10;&#10;int main() {&#10;    h();&#10;    g();&#10;    return 0;&#10;}">
            <location file0="powerpc/boot/cuboot-52xx.c" file="powerpc\boot\cuboot-52xx.c" line="32"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;reg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;reg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/cuboot-52xx.c" file="powerpc\boot\cuboot-52xx.c" line="61"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/boot/cuboot-52xx.c" file="powerpc\boot\cuboot-52xx.c" line="61"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.&#10;The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.&#10;The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.&#10;In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.&#10;To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.&#10;#include &amp;lt;stdarg.h&amp;gt;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;&#10;void f(char *s, ...) {&#10;    va_list ap;&#10;    va_start(ap,s);&#10;    for (;;) {&#10;        char *p = va_arg(ap,char*);&#10;        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);&#10;        if(!p) break;&#10;    }&#10;    va_end(ap);&#10;}&#10;&#10;void g() {&#10;    char *s2 = &amp;quot;x&amp;quot;;&#10;    char *s3 = &amp;quot;ERROR&amp;quot;;&#10;&#10;    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64&#10;    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);&#10;}&#10;&#10;void h() {&#10;    int i;&#10;    volatile unsigned char a[1000];&#10;    for (i = 0; i&amp;lt;sizeof(a); i++)&#10;        a[i] = -1;&#10;}&#10;&#10;int main() {&#10;    h();&#10;    g();&#10;    return 0;&#10;}">
            <location file0="powerpc/boot/cuboot-824x.c" file="powerpc\boot\cuboot-824x.c" line="26"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.&#10;The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.&#10;The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.&#10;In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.&#10;To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.&#10;#include &amp;lt;stdarg.h&amp;gt;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;&#10;void f(char *s, ...) {&#10;    va_list ap;&#10;    va_start(ap,s);&#10;    for (;;) {&#10;        char *p = va_arg(ap,char*);&#10;        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);&#10;        if(!p) break;&#10;    }&#10;    va_end(ap);&#10;}&#10;&#10;void g() {&#10;    char *s2 = &amp;quot;x&amp;quot;;&#10;    char *s3 = &amp;quot;ERROR&amp;quot;;&#10;&#10;    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64&#10;    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);&#10;}&#10;&#10;void h() {&#10;    int i;&#10;    volatile unsigned char a[1000];&#10;    for (i = 0; i&amp;lt;sizeof(a); i++)&#10;        a[i] = -1;&#10;}&#10;&#10;int main() {&#10;    h();&#10;    g();&#10;    return 0;&#10;}">
            <location file0="powerpc/boot/cuboot-8xx.c" file="powerpc\boot\cuboot-8xx.c" line="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;idiff&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;idiff&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/cuboot-acadia.c" file="powerpc\boot\cuboot-acadia.c" line="53"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ibdiv&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ibdiv&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/cuboot-acadia.c" file="powerpc\boot\cuboot-acadia.c" line="54"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;est&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;est&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/cuboot-acadia.c" file="powerpc\boot\cuboot-acadia.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/cuboot-c2k.c" file="powerpc\boot\cuboot-c2k.c" line="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/cuboot-c2k.c" file="powerpc\boot\cuboot-c2k.c" line="150"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.&#10;The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.&#10;The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.&#10;In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.&#10;To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.&#10;#include &amp;lt;stdarg.h&amp;gt;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;&#10;void f(char *s, ...) {&#10;    va_list ap;&#10;    va_start(ap,s);&#10;    for (;;) {&#10;        char *p = va_arg(ap,char*);&#10;        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);&#10;        if(!p) break;&#10;    }&#10;    va_end(ap);&#10;}&#10;&#10;void g() {&#10;    char *s2 = &amp;quot;x&amp;quot;;&#10;    char *s3 = &amp;quot;ERROR&amp;quot;;&#10;&#10;    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64&#10;    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);&#10;}&#10;&#10;void h() {&#10;    int i;&#10;    volatile unsigned char a[1000];&#10;    for (i = 0; i&amp;lt;sizeof(a); i++)&#10;        a[i] = -1;&#10;}&#10;&#10;int main() {&#10;    h();&#10;    g();&#10;    return 0;&#10;}">
            <location file0="powerpc/boot/cuboot-mpc7448hpc2.c" file="powerpc\boot\cuboot-mpc7448hpc2.c" line="33"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.&#10;The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.&#10;The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.&#10;In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.&#10;To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.&#10;#include &amp;lt;stdarg.h&amp;gt;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;&#10;void f(char *s, ...) {&#10;    va_list ap;&#10;    va_start(ap,s);&#10;    for (;;) {&#10;        char *p = va_arg(ap,char*);&#10;        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);&#10;        if(!p) break;&#10;    }&#10;    va_end(ap);&#10;}&#10;&#10;void g() {&#10;    char *s2 = &amp;quot;x&amp;quot;;&#10;    char *s3 = &amp;quot;ERROR&amp;quot;;&#10;&#10;    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64&#10;    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);&#10;}&#10;&#10;void h() {&#10;    int i;&#10;    volatile unsigned char a[1000];&#10;    for (i = 0; i&amp;lt;sizeof(a); i++)&#10;        a[i] = -1;&#10;}&#10;&#10;int main() {&#10;    h();&#10;    g();&#10;    return 0;&#10;}">
            <location file0="powerpc/boot/cuboot-pq2.c" file="powerpc\boot\cuboot-pq2.c" line="317"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.&#10;The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.&#10;The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.&#10;In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.&#10;To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.&#10;#include &amp;lt;stdarg.h&amp;gt;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;&#10;void f(char *s, ...) {&#10;    va_list ap;&#10;    va_start(ap,s);&#10;    for (;;) {&#10;        char *p = va_arg(ap,char*);&#10;        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);&#10;        if(!p) break;&#10;    }&#10;    va_end(ap);&#10;}&#10;&#10;void g() {&#10;    char *s2 = &amp;quot;x&amp;quot;;&#10;    char *s3 = &amp;quot;ERROR&amp;quot;;&#10;&#10;    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64&#10;    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);&#10;}&#10;&#10;void h() {&#10;    int i;&#10;    volatile unsigned char a[1000];&#10;    for (i = 0; i&amp;lt;sizeof(a); i++)&#10;        a[i] = -1;&#10;}&#10;&#10;int main() {&#10;    h();&#10;    g();&#10;    return 0;&#10;}">
            <location file0="powerpc/boot/cuboot-sam440ep.c" file="powerpc\boot\cuboot-sam440ep.c" line="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/decompress.c" file="powerpc\boot\decompress.c" line="59"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%ld in format string (no. 1) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;.">
            <location file0="powerpc/boot/devtree.c" file="powerpc\boot\devtree.c" line="80"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="powerpc/boot/devtree.c" file="powerpc\boot\devtree.c" line="146"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prev_naddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prev_naddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/devtree.c" file="powerpc\boot\devtree.c" line="298"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prev_nsize&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prev_nsize&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/devtree.c" file="powerpc\boot\devtree.c" line="298"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buflen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buflen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/devtree.c" file="powerpc\boot\devtree.c" line="299"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;psc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;psc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/mpc52xx-psc.c" file="powerpc\boot\mpc52xx-psc.c" line="37"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;psc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;psc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/mpc52xx-psc.c" file="powerpc\boot\mpc52xx-psc.c" line="39"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;psc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;psc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/mpc52xx-psc.c" file="powerpc\boot\mpc52xx-psc.c" line="44"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;psc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;psc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/mpc52xx-psc.c" file="powerpc\boot\mpc52xx-psc.c" line="49"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;psc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;psc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/mpc52xx-psc.c" file="powerpc\boot\mpc52xx-psc.c" line="51"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;div&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;div&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/boot/mpc8xx.c" file="powerpc\boot\mpc8xx.c" line="50"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;of_stdout_handle&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;of_stdout_handle&amp;#039; to itself.">
            <location file0="powerpc/boot/ofconsole.c" file="powerpc\boot\ofconsole.c" line="32"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="powerpc/boot/oflib.c" file="powerpc\boot\oflib.c" line="225"/>
            <location file0="powerpc/boot/oflib.c" file="powerpc\boot\oflib.c" line="228"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ret&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ret&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/boot/oflib.c" file="powerpc\boot\oflib.c" line="228"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/opal.c" file="powerpc\boot\opal.c" line="40"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.&#10;The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.&#10;The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.&#10;In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.&#10;To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.&#10;#include &amp;lt;stdarg.h&amp;gt;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;&#10;void f(char *s, ...) {&#10;    va_list ap;&#10;    va_start(ap,s);&#10;    for (;;) {&#10;        char *p = va_arg(ap,char*);&#10;        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);&#10;        if(!p) break;&#10;    }&#10;    va_end(ap);&#10;}&#10;&#10;void g() {&#10;    char *s2 = &amp;quot;x&amp;quot;;&#10;    char *s3 = &amp;quot;ERROR&amp;quot;;&#10;&#10;    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64&#10;    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);&#10;}&#10;&#10;void h() {&#10;    int i;&#10;    volatile unsigned char a[1000];&#10;    for (i = 0; i&amp;lt;sizeof(a); i++)&#10;        a[i] = -1;&#10;}&#10;&#10;int main() {&#10;    h();&#10;    g();&#10;    return 0;&#10;}">
            <location file0="powerpc/boot/redboot-83xx.c" file="powerpc\boot\redboot-83xx.c" line="30"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.&#10;The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.&#10;The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.&#10;In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.&#10;To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.&#10;#include &amp;lt;stdarg.h&amp;gt;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;&#10;void f(char *s, ...) {&#10;    va_list ap;&#10;    va_start(ap,s);&#10;    for (;;) {&#10;        char *p = va_arg(ap,char*);&#10;        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);&#10;        if(!p) break;&#10;    }&#10;    va_end(ap);&#10;}&#10;&#10;void g() {&#10;    char *s2 = &amp;quot;x&amp;quot;;&#10;    char *s3 = &amp;quot;ERROR&amp;quot;;&#10;&#10;    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64&#10;    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);&#10;}&#10;&#10;void h() {&#10;    int i;&#10;    volatile unsigned char a[1000];&#10;    for (i = 0; i&amp;lt;sizeof(a); i++)&#10;        a[i] = -1;&#10;}&#10;&#10;int main() {&#10;    h();&#10;    g();&#10;    return 0;&#10;}">
            <location file0="powerpc/boot/redboot-8xx.c" file="powerpc\boot\redboot-8xx.c" line="29"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;cp&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;cp&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="powerpc/boot/serial.c" file="powerpc\boot\serial.c" line="44"/>
            <location file0="powerpc/boot/serial.c" file="powerpc\boot\serial.c" line="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/treeboot-akebono.c" file="powerpc\boot\treeboot-akebono.c" line="56"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/treeboot-currituck.c" file="powerpc\boot\treeboot-currituck.c" line="45"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;reg_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;reg_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/uartlite.c" file="powerpc\boot\uartlite.c" line="34"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;reg_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;reg_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/uartlite.c" file="powerpc\boot\uartlite.c" line="44"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;reg_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;reg_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/uartlite.c" file="powerpc\boot\uartlite.c" line="47"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;reg_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;reg_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/uartlite.c" file="powerpc\boot\uartlite.c" line="56"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;reg_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;reg_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/uartlite.c" file="powerpc\boot\uartlite.c" line="59"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;reg_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;reg_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/uartlite.c" file="powerpc\boot\uartlite.c" line="64"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ug_io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ug_io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/ugecon.c" file="powerpc\boot\ugecon.c" line="45"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ug_io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ug_io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/ugecon.c" file="powerpc\boot\ugecon.c" line="46"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ug_io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ug_io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/ugecon.c" file="powerpc\boot\ugecon.c" line="47"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;exi_io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;exi_io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/boot/ugecon.c" file="powerpc\boot\ugecon.c" line="165"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;devtype&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;devtype&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/boot/virtex.c" file="powerpc\boot\virtex.c" line="96"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ubytes&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ubytes&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/crypto/aes-spe-glue.c" file="powerpc\crypto\aes-spe-glue.c" line="204"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ubytes&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ubytes&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/crypto/aes-spe-glue.c" file="powerpc\crypto\aes-spe-glue.c" line="233"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ubytes&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ubytes&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/crypto/aes-spe-glue.c" file="powerpc\crypto\aes-spe-glue.c" line="262"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ubytes&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ubytes&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/crypto/aes-spe-glue.c" file="powerpc\crypto\aes-spe-glue.c" line="291"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ubytes&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ubytes&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/crypto/aes-spe-glue.c" file="powerpc\crypto\aes-spe-glue.c" line="320"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ubytes&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ubytes&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/crypto/aes-spe-glue.c" file="powerpc\crypto\aes-spe-glue.c" line="351"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ubytes&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ubytes&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/crypto/aes-spe-glue.c" file="powerpc\crypto\aes-spe-glue.c" line="383"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prealign&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prealign&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/crypto/crc32c-vpmsum_glue.c" file="powerpc\crypto\crc32c-vpmsum_glue.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bytes&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bytes&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/crypto/sha1-spe-glue.c" file="powerpc\crypto\sha1-spe-glue.c" line="86"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bytes&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bytes&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/crypto/sha256-spe-glue.c" file="powerpc\crypto\sha256-spe-glue.c" line="107"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;data::dd&amp;#039; is never used." verbose="union member &amp;#039;data::dd&amp;#039; is never used.">
            <location file0="powerpc/kernel/align.c" file="powerpc\kernel\align.c" line="909"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::hi32&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::hi32&amp;#039; is never used.">
            <location file0="powerpc/kernel/align.c" file="powerpc\kernel\align.c" line="917"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::hi48&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::hi48&amp;#039; is never used.">
            <location file0="powerpc/kernel/align.c" file="powerpc\kernel\align.c" line="927"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/kernel/align.c" file="powerpc\kernel\align.c" line="326"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/kernel/align.c" file="powerpc\kernel\align.c" line="1128"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and float* which have an incompatible binary data representation." verbose="Casting between integer* and float* which have an incompatible binary data representation.">
            <location file0="powerpc/kernel/align.c" file="powerpc\kernel\align.c" line="1210"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and float* which have an incompatible binary data representation." verbose="Casting between integer* and float* which have an incompatible binary data representation.">
            <location file0="powerpc/kernel/align.c" file="powerpc\kernel\align.c" line="1264"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::hi32&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::hi32&amp;#039; is never used.">
            <location file0="powerpc/kernel/align.c" file="powerpc\kernel\align.c" line="917"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous2::hi48&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous2::hi48&amp;#039; is never used.">
            <location file0="powerpc/kernel/align.c" file="powerpc\kernel\align.c" line="927"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/kernel/align.c" file="powerpc\kernel\align.c" line="574"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::hi32&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::hi32&amp;#039; is never used.">
            <location file0="powerpc/kernel/align.c" file="powerpc\kernel\align.c" line="915"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::hi48&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::hi48&amp;#039; is never used.">
            <location file0="powerpc/kernel/align.c" file="powerpc\kernel\align.c" line="925"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MAX_PGD_TABLE_SIZE&amp;#039; since the value of &amp;#039;MAX_PGD_TABLE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MAX_PGD_TABLE_SIZE&amp;#039; since the value of &amp;#039;MAX_PGD_TABLE_SIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="powerpc\kernel\asm-offsets.c" line="418"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/btext.c" file="powerpc\kernel\btext.c" line="541"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/btext.c" file="powerpc\kernel\btext.c" line="562"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/btext.c" file="powerpc\kernel\btext.c" line="580"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/btext.c" file="powerpc\kernel\btext.c" line="626"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;!cache&amp;#039; is redundant or there is possible null pointer dereference: cache." verbose="Either the condition &amp;#039;!cache&amp;#039; is redundant or there is possible null pointer dereference: cache.">
            <location file0="powerpc/kernel/cacheinfo.c" file="powerpc\kernel\cacheinfo.c" line="461"/>
            <location file0="powerpc/kernel/cacheinfo.c" file="powerpc\kernel\cacheinfo.c" line="463"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/crash_dump.c" file="powerpc\kernel\crash_dump.c" line="78"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/crash_dump.c" file="powerpc\kernel\crash_dump.c" line="85"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pdn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pdn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/eeh.c" file="powerpc\kernel\eeh.c" line="1132"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pdev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pdev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/eeh.c" file="powerpc\kernel\eeh.c" line="1508"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pdev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pdev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/eeh.c" file="powerpc\kernel\eeh.c" line="1849"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pdn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pdn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/eeh_cache.c" file="powerpc\kernel\eeh_cache.c" line="321"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/eeh_event.c" file="powerpc\kernel\eeh_event.c" line="120"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/eeh_pe.c" file="powerpc\kernel\eeh_pe.c" line="198"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;parent&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;parent&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/eeh_pe.c" file="powerpc\kernel\eeh_pe.c" line="332"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pdev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pdev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/eeh_pe.c" file="powerpc\kernel\eeh_pe.c" line="641"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pdev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pdev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/eeh_pe.c" file="powerpc\kernel\eeh_pe.c" line="725"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/eeh_pe.c" file="powerpc\kernel\eeh_pe.c" line="1050"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)pe&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)pe&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/eeh_pe.c" file="powerpc\kernel\eeh_pe.c" line="86"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/fadump.c" file="powerpc\kernel\fadump.c" line="502"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/fadump.c" file="powerpc\kernel\fadump.c" line="960"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/fadump.c" file="powerpc\kernel\fadump.c" line="960"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;elf&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;elf&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/kernel/fadump.c" file="powerpc\kernel\fadump.c" line="632"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;_CALL_ELF&amp;#039; since the value of &amp;#039;_CALL_ELF&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;_CALL_ELF&amp;#039; since the value of &amp;#039;_CALL_ELF&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="powerpc\kernel\fadump.c" line="939"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/ftrace.c" file="powerpc\kernel\ftrace.c" line="308"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;new&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;new&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/ftrace.c" file="powerpc\kernel\ftrace.c" line="308"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/ftrace.c" file="powerpc\kernel\ftrace.c" line="506"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;new&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;new&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/ftrace.c" file="powerpc\kernel\ftrace.c" line="506"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rec&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rec&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/ftrace.c" file="powerpc\kernel\ftrace.c" line="579"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/ftrace.c" file="powerpc\kernel\ftrace.c" line="580"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vsrc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vsrc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/io.c" file="powerpc\kernel\io.c" line="214"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/io.c" file="powerpc\kernel\io.c" line="215"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vsrc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vsrc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/io.c" file="powerpc\kernel\io.c" line="223"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/io.c" file="powerpc\kernel\io.c" line="224"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vsrc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vsrc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/io.c" file="powerpc\kernel\io.c" line="232"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/io.c" file="powerpc\kernel\io.c" line="233"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/io.c" file="powerpc\kernel\io.c" line="250"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/io.c" file="powerpc\kernel\io.c" line="251"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/io.c" file="powerpc\kernel\io.c" line="258"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/io.c" file="powerpc\kernel\io.c" line="259"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/io.c" file="powerpc\kernel\io.c" line="266"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/io.c" file="powerpc\kernel\io.c" line="267"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;align&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;align&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/iommu.c" file="powerpc\kernel\iommu.c" line="892"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;npages&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;npages&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/iommu.c" file="powerpc\kernel\iommu.c" line="937"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tceval&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tceval&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/iommu.c" file="powerpc\kernel\iommu.c" line="726"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/irq.c" file="powerpc\kernel\irq.c" line="699"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/irq.c" file="powerpc\kernel\irq.c" line="659"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cpu_nr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cpu_nr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/irq.c" file="powerpc\kernel\irq.c" line="660"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)gdb_regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)gdb_regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/kgdb.c" file="powerpc\kernel\kgdb.c" line="292"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/kgdb.c" file="powerpc\kernel\kgdb.c" line="390"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/kgdb.c" file="powerpc\kernel\kgdb.c" line="420"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/legacy_serial.c" file="powerpc\kernel\legacy_serial.c" line="58"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;basep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;basep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/machine_kexec_64.c" file="powerpc\kernel\machine_kexec_64.c" line="41"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sizep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sizep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/machine_kexec_64.c" file="powerpc\kernel\machine_kexec_64.c" line="42"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/machine_kexec_64.c" file="powerpc\kernel\machine_kexec_64.c" line="116"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mc_evt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mc_evt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/mce.c" file="powerpc\kernel\mce.c" line="173"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/mce.c" file="powerpc\kernel\mce.c" line="249"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;srr1&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;srr1&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/kernel/mce.c" file="powerpc\kernel\mce.c" line="117"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sect.sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sect.sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/module.c" file="powerpc\kernel\module.c" line="69"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sect.sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sect.sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/module.c" file="powerpc\kernel\module.c" line="76"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sect.sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sect.sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/module.c" file="powerpc\kernel\module.c" line="93"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sect.sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sect.sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/module.c" file="powerpc\kernel\module.c" line="84"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/module_32.c" file="powerpc\kernel\module_32.c" line="97"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/module_32.c" file="powerpc\kernel\module_32.c" line="258"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/module_32.c" file="powerpc\kernel\module_32.c" line="259"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/module_32.c" file="powerpc\kernel\module_32.c" line="143"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/module_32.c" file="powerpc\kernel\module_32.c" line="151"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/module_32.c" file="powerpc\kernel\module_32.c" line="156"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/module_32.c" file="powerpc\kernel\module_32.c" line="268"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/module_64.c" file="powerpc\kernel\module_64.c" line="245"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/module_64.c" file="powerpc\kernel\module_64.c" line="586"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/module_64.c" file="powerpc\kernel\module_64.c" line="587"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)vers&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)vers&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/module_64.c" file="powerpc\kernel\module_64.c" line="307"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/module_64.c" file="powerpc\kernel\module_64.c" line="396"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/module_64.c" file="powerpc\kernel\module_64.c" line="406"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/module_64.c" file="powerpc\kernel\module_64.c" line="409"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/module_64.c" file="powerpc\kernel\module_64.c" line="611"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;oops_hdr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;oops_hdr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/nvram_64.c" file="powerpc\kernel\nvram_64.c" line="505"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/pci-common.c" file="powerpc\kernel\pci-common.c" line="760"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/pci-common.c" file="powerpc\kernel\pci-common.c" line="1098"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/pci-common.c" file="powerpc\kernel\pci-common.c" line="2103"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/pci_dn.c" file="powerpc\kernel\pci_dn.c" line="579"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/pci_of_scan.c" file="powerpc\kernel\pci_of_scan.c" line="93"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/pci_of_scan.c" file="powerpc\kernel\pci_of_scan.c" line="259"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;stack_page&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;stack_page&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/process.c" file="powerpc\kernel\process.c" line="2188"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ip&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ip&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/process.c" file="powerpc\kernel\process.c" line="2278"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;newsp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;newsp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/process.c" file="powerpc\kernel\process.c" line="2278"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: batch" verbose="Unused variable: batch">
            <location file0="powerpc/kernel/process.c" file="powerpc\kernel\process.c" line="1355"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pvr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pvr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/prom.c" file="powerpc\kernel\prom.c" line="303"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_CMDLINE&amp;#039; since the value of &amp;#039;CONFIG_CMDLINE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_CMDLINE&amp;#039; since the value of &amp;#039;CONFIG_CMDLINE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="powerpc\kernel\prom_init.c" line="729"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/ptrace.c" file="powerpc\kernel\ptrace.c" line="343"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/ptrace.c" file="powerpc\kernel\ptrace.c" line="2333"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/ptrace.c" file="powerpc\kernel\ptrace.c" line="2586"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/ptrace.c" file="powerpc\kernel\ptrace.c" line="1420"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/ptrace.c" file="powerpc\kernel\ptrace.c" line="736"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="powerpc/kernel/rtas-proc.c" file="powerpc\kernel\rtas-proc.c" line="483"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;root&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;root&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/rtas.c" file="powerpc\kernel\rtas.c" line="225"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/rtas.c" file="powerpc\kernel\rtas.c" line="227"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/rtas.c" file="powerpc\kernel\rtas.c" line="549"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sect&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sect&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/rtas.c" file="powerpc\kernel\rtas.c" line="1280"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.&#10;The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.&#10;The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.&#10;In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.&#10;To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.&#10;#include &amp;lt;stdarg.h&amp;gt;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;&#10;void f(char *s, ...) {&#10;    va_list ap;&#10;    va_start(ap,s);&#10;    for (;;) {&#10;        char *p = va_arg(ap,char*);&#10;        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);&#10;        if(!p) break;&#10;    }&#10;    va_end(ap);&#10;}&#10;&#10;void g() {&#10;    char *s2 = &amp;quot;x&amp;quot;;&#10;    char *s3 = &amp;quot;ERROR&amp;quot;;&#10;&#10;    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64&#10;    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);&#10;}&#10;&#10;void h() {&#10;    int i;&#10;    volatile unsigned char a[1000];&#10;    for (i = 0; i&amp;lt;sizeof(a); i++)&#10;        a[i] = -1;&#10;}&#10;&#10;int main() {&#10;    h();&#10;    g();&#10;    return 0;&#10;}">
            <location file0="powerpc/kernel/rtas.c" file="powerpc\kernel\rtas.c" line="108"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/rtas.c" file="powerpc\kernel\rtas.c" line="945"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="powerpc/kernel/rtas_flash.c" file="powerpc\kernel\rtas_flash.c" line="551"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;block_size&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;block_size&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="powerpc/kernel/rtas_flash.c" file="powerpc\kernel\rtas_flash.c" line="189"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/rtasd.c" file="powerpc\kernel\rtasd.c" line="124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/rtasd.c" file="powerpc\kernel\rtasd.c" line="124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/rtasd.c" file="powerpc\kernel\rtasd.c" line="124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;perline&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;perline&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/rtasd.c" file="powerpc\kernel\rtasd.c" line="125"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/rtasd.c" file="powerpc\kernel\rtasd.c" line="126"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/rtasd.c" file="powerpc\kernel\rtasd.c" line="127"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ti&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ti&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/setup_64.c" file="powerpc\kernel\setup_64.c" line="635"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_PPC_BOOK3E;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_PPC_BOOK3E&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_PPC_BOOK3E;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_PPC_BOOK3E&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="powerpc\kernel\setup_64.c" line="379"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ti&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ti&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/setup_64.c" file="powerpc\kernel\setup_64.c" line="641"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/kernel/signal_64.c" file="powerpc\kernel\signal_64.c" line="890"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/kernel/signal_64.c" file="powerpc\kernel\signal_64.c" line="1028"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/signal_64.c" file="powerpc\kernel\signal_64.c" line="364"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/signal_64.c" file="powerpc\kernel\signal_64.c" line="498"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/smp-tbsync.c" file="powerpc\kernel\smp-tbsync.c" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/smp.c" file="powerpc\kernel\smp.c" line="571"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;np&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;np&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/smp.c" file="powerpc\kernel\smp.c" line="704"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;chip&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;chip&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/smp.c" file="powerpc\kernel\smp.c" line="770"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prop&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prop&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/smp.c" file="powerpc\kernel\smp.c" line="771"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;all&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;all&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/smp.c" file="powerpc\kernel\smp.c" line="273"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/sysfs.c" file="powerpc\kernel\sysfs.c" line="1072"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/sysfs.c" file="powerpc\kernel\sysfs.c" line="654"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;err&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;err&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/kernel/sysfs.c" file="powerpc\kernel\sysfs.c" line="658"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 1) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." verbose="%u in format string (no. 1) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;.">
            <location file0="powerpc/kernel/sysfs.c" file="powerpc\kernel\sysfs.c" line="136"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 1) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." verbose="%u in format string (no. 1) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;.">
            <location file0="powerpc/kernel/sysfs.c" file="powerpc\kernel\sysfs.c" line="280"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;shrink&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;shrink&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/tau_6xx.c" file="powerpc\kernel\tau_6xx.c" line="150"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;diff&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;diff&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/time.c" file="powerpc\kernel\time.c" line="460"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/kernel/traps.c" file="powerpc\kernel\traps.c" line="299"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/kernel/traps.c" file="powerpc\kernel\traps.c" line="733"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/udbg.c" file="powerpc\kernel\udbg.c" line="88"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/udbg.c" file="powerpc\kernel\udbg.c" line="116"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)CONFIG_PPC_EARLY_DEBUG_40x_PHYSADDR&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)CONFIG_PPC_EARLY_DEBUG_40x_PHYSADDR&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/udbg_16550.c" file="powerpc\kernel\udbg_16550.c" line="325"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)CONFIG_PPC_EARLY_DEBUG_40x_PHYSADDR&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)CONFIG_PPC_EARLY_DEBUG_40x_PHYSADDR&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/udbg_16550.c" file="powerpc\kernel\udbg_16550.c" line="331"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)PPC44x_EARLY_DEBUG_VIRTADDR&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)PPC44x_EARLY_DEBUG_VIRTADDR&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/udbg_16550.c" file="powerpc\kernel\udbg_16550.c" line="303"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)PPC44x_EARLY_DEBUG_VIRTADDR&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)PPC44x_EARLY_DEBUG_VIRTADDR&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/udbg_16550.c" file="powerpc\kernel\udbg_16550.c" line="308"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)4093641720&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)4093641720&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/udbg_16550.c" file="powerpc\kernel\udbg_16550.c" line="257"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)4093641720&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)4093641720&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/udbg_16550.c" file="powerpc\kernel\udbg_16550.c" line="262"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)4244571128UL&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)4244571128UL&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/udbg_16550.c" file="powerpc\kernel\udbg_16550.c" line="280"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)4244571128UL&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)4244571128UL&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/udbg_16550.c" file="powerpc\kernel\udbg_16550.c" line="285"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/vdso.c" file="powerpc\kernel\vdso.c" line="419"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/vdso.c" file="powerpc\kernel\vdso.c" line="420"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/vdso.c" file="powerpc\kernel\vdso.c" line="432"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso64_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso64_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/vdso.c" file="powerpc\kernel\vdso.c" line="624"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso64_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso64_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/vdso.c" file="powerpc\kernel\vdso.c" line="949"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/vdso.c" file="powerpc\kernel\vdso.c" line="287"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/vdso.c" file="powerpc\kernel\vdso.c" line="288"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ehdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/vdso.c" file="powerpc\kernel\vdso.c" line="300"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso32_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso32_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/vdso.c" file="powerpc\kernel\vdso.c" line="639"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso32_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso32_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/vdso.c" file="powerpc\kernel\vdso.c" line="932"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso64_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso64_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kernel/vdso.c" file="powerpc\kernel\vdso.c" line="491"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;frac&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;frac&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/vecemu.c" file="powerpc\kernel\vecemu.c" line="118"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node_child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node_child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/vio.c" file="powerpc\kernel\vio.c" line="1676"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;.">
            <location file0="powerpc/kernel/vio.c" file="powerpc\kernel\vio.c" line="1151"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;.">
            <location file0="powerpc/kernel/vio.c" file="powerpc\kernel\vio.c" line="1152"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;.">
            <location file0="powerpc/kernel/vio.c" file="powerpc\kernel\vio.c" line="1153"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;.">
            <location file0="powerpc/kernel/vio.c" file="powerpc\kernel\vio.c" line="1154"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;.">
            <location file0="powerpc/kernel/vio.c" file="powerpc\kernel\vio.c" line="1155"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;.">
            <location file0="powerpc/kernel/vio.c" file="powerpc\kernel\vio.c" line="1156"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;.">
            <location file0="powerpc/kernel/vio.c" file="powerpc\kernel\vio.c" line="1157"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;.">
            <location file0="powerpc/kernel/vio.c" file="powerpc\kernel\vio.c" line="1158"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;.">
            <location file0="powerpc/kernel/vio.c" file="powerpc\kernel\vio.c" line="1162"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prop&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prop&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/vio.c" file="powerpc\kernel\vio.c" line="125"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fulfilled&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fulfilled&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/vio.c" file="powerpc\kernel\vio.c" line="437"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kernel/vio.c" file="powerpc\kernel\vio.c" line="936"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;spare_needed&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;spare_needed&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/kernel/vio.c" file="powerpc\kernel\vio.c" line="264"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;reserve_freed&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;reserve_freed&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/kernel/vio.c" file="powerpc\kernel\vio.c" line="263"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s.c" file="powerpc\kvm\book3s.c" line="638"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s.c" file="powerpc\kvm\book3s.c" line="734"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;DEBUG_MMU_PTE_IP&amp;#039; since the value of &amp;#039;DEBUG_MMU_PTE_IP&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;DEBUG_MMU_PTE_IP&amp;#039; since the value of &amp;#039;DEBUG_MMU_PTE_IP&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="powerpc\kvm\book3s_32_mmu.c" line="55"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;pteg[16]&amp;#039; accessed at index 16, which is out of bounds." verbose="Array &amp;#039;pteg[16]&amp;#039; accessed at index 16, which is out of bounds.">
            <location file0="powerpc/kvm/book3s_64_mmu.c" file="powerpc\kvm\book3s_64_mmu.c" line="371"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;pteg[16]&amp;#039; accessed at index 17, which is out of bounds." verbose="Array &amp;#039;pteg[16]&amp;#039; accessed at index 17, which is out of bounds.">
            <location file0="powerpc/kvm/book3s_64_mmu.c" file="powerpc\kvm\book3s_64_mmu.c" line="372"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hp_v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hp_v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_64_mmu_hv.c" file="powerpc\kvm\book3s_64_mmu_hv.c" line="214"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hp_r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hp_r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_64_mmu_hv.c" file="powerpc\kvm\book3s_64_mmu_hv.c" line="214"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_64_mmu_hv.c" file="powerpc\kvm\book3s_64_mmu_hv.c" line="215"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hash&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hash&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_64_mmu_hv.c" file="powerpc\kvm\book3s_64_mmu_hv.c" line="215"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_64_mmu_hv.c" file="powerpc\kvm\book3s_64_mmu_hv.c" line="219"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_64_mmu_hv.c" file="powerpc\kvm\book3s_64_mmu_hv.c" line="871"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hptep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hptep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_64_mmu_hv.c" file="powerpc\kvm\book3s_64_mmu_hv.c" line="872"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rmap&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rmap&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_64_mmu_hv.c" file="powerpc\kvm\book3s_64_mmu_hv.c" line="1370"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rcbits_unset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rcbits_unset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_64_mmu_hv.c" file="powerpc\kvm\book3s_64_mmu_hv.c" line="1452"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_64_mmu_hv.c" file="powerpc\kvm\book3s_64_mmu_hv.c" line="1553"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vcpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vcpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv.c" file="powerpc\kvm\book3s_hv.c" line="132"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;va&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;va&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv.c" file="powerpc\kvm\book3s_hv.c" line="489"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv.c" file="powerpc\kvm\book3s_hv.c" line="2800"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slots&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slots&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv.c" file="powerpc\kvm\book3s_hv.c" line="3782"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;memslot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;memslot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv.c" file="powerpc\kvm\book3s_hv.c" line="3783"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hcall&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hcall&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv.c" file="powerpc\kvm\book3s_hv.c" line="4493"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;va&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;va&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kvm/book3s_hv.c" file="powerpc\kvm\book3s_hv.c" line="694"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf_end&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf_end&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv.c" file="powerpc\kvm\book3s_hv.c" line="2067"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv.c" file="powerpc\kvm\book3s_hv.c" line="2072"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;loops&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;loops&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv.c" file="powerpc\kvm\book3s_hv.c" line="2072"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ok&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ok&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv.c" file="powerpc\kvm\book3s_hv.c" line="2073"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv.c" file="powerpc\kvm\book3s_hv.c" line="1611"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv.c" file="powerpc\kvm\book3s_hv.c" line="1907"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;threads_running&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;threads_running&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv_builtin.c" file="powerpc\kvm\book3s_hv_builtin.c" line="125"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;threads_ceded&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;threads_ceded&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv_builtin.c" file="powerpc\kvm\book3s_hv_builtin.c" line="126"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;threads_conferring&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;threads_conferring&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv_builtin.c" file="powerpc\kvm\book3s_hv_builtin.c" line="127"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tail&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tail&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv_rm_mmu.c" file="powerpc\kvm\book3s_hv_rm_mmu.c" line="86"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv_rm_mmu.c" file="powerpc\kvm\book3s_hv_rm_mmu.c" line="87"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv_rm_mmu.c" file="powerpc\kvm\book3s_hv_rm_mmu.c" line="660"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hpte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hpte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv_rm_mmu.c" file="powerpc\kvm\book3s_hv_rm_mmu.c" line="883"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv_rm_mmu.c" file="powerpc\kvm\book3s_hv_rm_mmu.c" line="884"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv_rm_mmu.c" file="powerpc\kvm\book3s_hv_rm_mmu.c" line="884"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hcore&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hcore&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_hv_rm_xics.c" file="powerpc\kvm\book3s_hv_rm_xics.c" line="153"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;emulated&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;emulated&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="powerpc/kvm/book3s_paired_singles.c" file="powerpc\kvm\book3s_paired_singles.c" line="716"/>
            <location file0="powerpc/kvm/book3s_paired_singles.c" file="powerpc\kvm\book3s_paired_singles.c" line="727"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;emul&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;emul&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_pr.c" file="powerpc\kvm\book3s_pr.c" line="1327"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_pr_papr.c" file="powerpc\kvm\book3s_pr_papr.c" line="169"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hcall&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hcall&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/book3s_pr_papr.c" file="powerpc\kvm\book3s_pr_papr.c" line="507"/>
        </error>
        <error id="comparisonError" severity="style" msg="Expression &amp;#039;(X &amp;amp; 0x0) != 0x4000000000000000&amp;#039; is always true." verbose="The expression &amp;#039;(X &amp;amp; 0x0) != 0x4000000000000000&amp;#039; is always true. Check carefully constants and operators used, these errors might be hard to spot sometimes. In case of complex expression it might help to split it to separate expressions.">
            <location file0="powerpc/kvm/book3s_pr_papr.c" file="powerpc\kvm\book3s_pr_papr.c" line="177"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/kvm/book3s_pr_papr.c" file="powerpc\kvm\book3s_pr_papr.c" line="126"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/kvm/book3s_pr_papr.c" file="powerpc\kvm\book3s_pr_papr.c" line="217"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/kvm/book3s_pr_papr.c" file="powerpc\kvm\book3s_pr_papr.c" line="265"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)kvmppc_booke_handlers&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)kvmppc_booke_handlers&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kvm/booke.c" file="powerpc\kvm\booke.c" line="2518"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/e500.c" file="powerpc\kvm\e500.c" line="255"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)kvmppc_booke_handlers&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)kvmppc_booke_handlers&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kvm/e500.c" file="powerpc\kvm\e500.c" line="605"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tlbe&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tlbe&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/e500_mmu.c" file="powerpc\kvm\e500_mmu.c" line="327"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/e500_mmu.c" file="powerpc\kvm\e500_mmu.c" line="328"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;esel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;esel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/e500_mmu.c" file="powerpc\kvm\e500_mmu.c" line="347"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;esel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;esel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/e500_mmu.c" file="powerpc\kvm\e500_mmu.c" line="536"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/e500_mmu.c" file="powerpc\kvm\e500_mmu.c" line="629"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hw_tlb_indx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hw_tlb_indx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/e500_mmu_host.c" file="powerpc\kvm\e500_mmu_host.c" line="210"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/mpic.c" file="powerpc\kvm\mpic.c" line="666"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;src&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;src&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/mpic.c" file="powerpc\kvm\mpic.c" line="1183"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;s_IRQ&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;s_IRQ&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/mpic.c" file="powerpc\kvm\mpic.c" line="1185"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n_IRQ&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n_IRQ&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/kvm/mpic.c" file="powerpc\kvm\mpic.c" line="1185"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;magic&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;magic&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kvm/powerpc.c" file="powerpc\kvm\powerpc.c" line="392"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;magic&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;magic&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/kvm/powerpc.c" file="powerpc\kvm\powerpc.c" line="441"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/lib/checksum_wrappers.c" file="powerpc\lib\checksum_wrappers.c" line="57"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst+len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/lib/checksum_wrappers.c" file="powerpc\lib\checksum_wrappers.c" line="57"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dest&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dest&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/lib/feature-fixups.c" file="powerpc\lib\feature-fixups.c" line="138"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/lib/feature-fixups.c" file="powerpc\lib\feature-fixups.c" line="150"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file0="powerpc/lib/rheap.c" file="powerpc\lib\rheap.c" line="803"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;after!=0&amp;#039; is redundant or there is possible null pointer dereference: after." verbose="Either the condition &amp;#039;after!=0&amp;#039; is redundant or there is possible null pointer dereference: after.">
            <location file0="powerpc/lib/rheap.c" file="powerpc\lib\rheap.c" line="271"/>
            <location file0="powerpc/lib/rheap.c" file="powerpc\lib\rheap.c" line="263"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;delta&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;delta&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/lib/rheap.c" file="powerpc\lib\rheap.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;blks&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;blks&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/lib/rheap.c" file="powerpc\lib\rheap.c" line="56"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;blke&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;blke&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/lib/rheap.c" file="powerpc\lib\rheap.c" line="56"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/lib/rheap.c" file="powerpc\lib\rheap.c" line="182"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;be&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;be&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/lib/rheap.c" file="powerpc\lib\rheap.c" line="182"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sp_size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sp_size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/lib/rheap.c" file="powerpc\lib\rheap.c" line="530"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous0::dbl&amp;#039; is never used." verbose="union member &amp;#039;Anonymous0::dbl&amp;#039; is never used.">
            <location file0="powerpc/lib/sstep.c" file="powerpc\lib\sstep.c" line="432"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous2::dbl&amp;#039; is never used." verbose="union member &amp;#039;Anonymous2::dbl&amp;#039; is never used.">
            <location file0="powerpc/lib/sstep.c" file="powerpc\lib\sstep.c" line="495"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::_pad_&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::_pad_&amp;#039; is never used.">
            <location file0="powerpc/lib/sstep.c" file="powerpc\lib\sstep.c" line="437"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous3::_pad_&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous3::_pad_&amp;#039; is never used.">
            <location file0="powerpc/lib/sstep.c" file="powerpc\lib\sstep.c" line="500"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::_pad_&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::_pad_&amp;#039; is never used.">
            <location file0="powerpc/lib/sstep.c" file="powerpc\lib\sstep.c" line="442"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous3::_pad_&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous3::_pad_&amp;#039; is never used.">
            <location file0="powerpc/lib/sstep.c" file="powerpc\lib\sstep.c" line="505"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float* to integer* is not portable due to different binary data representations on different platforms." verbose="Casting from float* to integer* is not portable due to different binary data representations on different platforms.">
            <location file0="powerpc/math-emu/lfs.c" file="powerpc\math-emu\lfs.c" line="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pfn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pfn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/dma-noncoherent.c" file="powerpc\mm\dma-noncoherent.c" line="322"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/dma-noncoherent.c" file="powerpc\mm\dma-noncoherent.c" line="418"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hpte_v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hpte_v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hash_native_64.c" file="powerpc\mm\hash_native_64.c" line="289"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hptep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hptep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hash_native_64.c" file="powerpc\mm\hash_native_64.c" line="400"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hpte_v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hpte_v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hash_native_64.c" file="powerpc\mm\hash_native_64.c" line="404"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hpte_v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hpte_v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hash_native_64.c" file="powerpc\mm\hash_native_64.c" line="687"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;valid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;valid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hash_native_64.c" file="powerpc\mm\hash_native_64.c" line="515"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hash_utils_64.c" file="powerpc\mm\hash_utils_64.c" line="352"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hash&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hash&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hash_utils_64.c" file="powerpc\mm\hash_utils_64.c" line="1912"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hidx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hidx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hash_utils_64.c" file="powerpc\mm\hash_utils_64.c" line="1912"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hash_utils_64.c" file="powerpc\mm\hash_utils_64.c" line="1912"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vaddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vaddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hash_utils_64.c" file="powerpc\mm\hash_utils_64.c" line="2152"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lmi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lmi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hash_utils_64.c" file="powerpc\mm\hash_utils_64.c" line="2152"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;type&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;type&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/mm/highmem.c" file="powerpc\mm\highmem.c" line="70"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pa&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pa&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hugetlbpage-hash64.c" file="powerpc\mm\hugetlbpage-hash64.c" line="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hugetlbpage-hash64.c" file="powerpc\mm\hugetlbpage-hash64.c" line="28"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;sz&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;sz&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/mm/hugetlbpage-hash64.c" file="powerpc\mm\hugetlbpage-hash64.c" line="76"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hugetlbpage-radix.c" file="powerpc\mm\hugetlbpage-radix.c" line="49"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="powerpc/mm/hugetlbpage.c" file="powerpc\mm\hugetlbpage.c" line="1325"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;num_hugepd&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;num_hugepd&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="powerpc/mm/hugetlbpage.c" file="powerpc\mm\hugetlbpage.c" line="543"/>
            <location file0="powerpc/mm/hugetlbpage.c" file="powerpc\mm\hugetlbpage.c" line="547"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hugetlbpage.c" file="powerpc\mm\hugetlbpage.c" line="238"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pm&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pm&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hugetlbpage.c" file="powerpc\mm\hugetlbpage.c" line="239"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pgd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pgd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/hugetlbpage.c" file="powerpc\mm\hugetlbpage.c" line="729"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="powerpc/mm/hugetlbpage.c" file="powerpc\mm\hugetlbpage.c" line="623"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="powerpc/mm/hugetlbpage.c" file="powerpc\mm\hugetlbpage.c" line="693"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="powerpc/mm/hugetlbpage.c" file="powerpc\mm\hugetlbpage.c" line="778"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;ptep++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;ptep++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="powerpc/mm/hugetlbpage.c" file="powerpc\mm\hugetlbpage.c" line="874"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;ret&amp;lt;0&amp;#039; is always false" verbose="Condition &amp;#039;ret&amp;lt;0&amp;#039; is always false">
            <location file0="powerpc/mm/icswx.c" file="powerpc\mm\icswx.c" line="105"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;ct&amp;lt;0&amp;#039; is always true" verbose="Condition &amp;#039;ct&amp;lt;0&amp;#039; is always true">
            <location file0="powerpc/mm/icswx.c" file="powerpc\mm\icswx.c" line="241"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/icswx_pid.c" file="powerpc\mm\icswx_pid.c" line="68"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tstart&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tstart&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/mem.c" file="powerpc\mm\mem.c" line="207"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tend&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tend&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/mem.c" file="powerpc\mm\mem.c" line="207"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/mmap.c" file="powerpc\mm\mmap.c" line="108"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/mmap.c" file="powerpc\mm\mmap.c" line="148"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;locked&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;locked&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/mmu_context_iommu.c" file="powerpc\mm\mmu_context_iommu.c" line="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lock_limit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lock_limit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/mmu_context_iommu.c" file="powerpc\mm\mmu_context_iommu.c" line="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mm&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mm&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/mmu_context_nohash.c" file="powerpc\mm\mmu_context_nohash.c" line="153"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mm&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mm&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/mmu_context_nohash.c" file="powerpc\mm\mmu_context_nohash.c" line="87"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;DEBUG_CLAMP_LAST_CONTEXT&amp;#039; since the value of &amp;#039;DEBUG_CLAMP_LAST_CONTEXT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;DEBUG_CLAMP_LAST_CONTEXT&amp;#039; since the value of &amp;#039;DEBUG_CLAMP_LAST_CONTEXT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="powerpc\mm\mmu_context_nohash.c" line="530"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/numa.c" file="powerpc\mm\numa.c" line="584"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sibling&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sibling&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/numa.c" file="powerpc\mm\numa.c" line="662"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/numa.c" file="powerpc\mm\numa.c" line="1258"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/numa.c" file="powerpc\mm\numa.c" line="1258"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;drconf_cell_cnt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;drconf_cell_cnt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/numa.c" file="powerpc\mm\numa.c" line="1352"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lrdr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lrdr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/numa.c" file="powerpc\mm\numa.c" line="1355"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;len&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;len&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="powerpc/mm/numa.c" file="powerpc\mm\numa.c" line="1265"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pgdp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pgdp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/pgtable-hash64.c" file="powerpc\mm\pgtable-hash64.c" line="65"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pudp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pudp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/pgtable-hash64.c" file="powerpc\mm\pgtable-hash64.c" line="66"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmdp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmdp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/pgtable-hash64.c" file="powerpc\mm\pgtable-hash64.c" line="67"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/pgtable-hash64.c" file="powerpc\mm\pgtable-hash64.c" line="68"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lpcr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lpcr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/pgtable-radix.c" file="powerpc\mm\pgtable-radix.c" line="458"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lpcr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lpcr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/pgtable-radix.c" file="powerpc\mm\pgtable-radix.c" line="475"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pud&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pud&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/pgtable_32.c" file="powerpc\mm\pgtable_32.c" line="403"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;_PAGE_BAP_SR&amp;#039; since the value of &amp;#039;_PAGE_BAP_SR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;_PAGE_BAP_SR&amp;#039; since the value of &amp;#039;_PAGE_BAP_SR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="powerpc\mm\pgtable_32.c" line="161"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ret&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ret&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/mm/pgtable_64.c" file="powerpc\mm\pgtable_64.c" line="392"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ret&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ret&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/mm/pgtable_64.c" file="powerpc\mm\pgtable_64.c" line="436"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;_PAGE_BAP_SR&amp;#039; since the value of &amp;#039;_PAGE_BAP_SR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;_PAGE_BAP_SR&amp;#039; since the value of &amp;#039;_PAGE_BAP_SR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="powerpc\mm\pgtable_64.c" line="286"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slbie_data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slbie_data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/slb.c" file="powerpc\mm\slb.c" line="206"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/slice.c" file="powerpc\mm\slice.c" line="176"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mask_index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mask_index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/slice.c" file="powerpc\mm\slice.c" line="176"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/slice.c" file="powerpc\mm\slice.c" line="230"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mask_index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mask_index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/slice.c" file="powerpc\mm\slice.c" line="230"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/subpage-prot.c" file="powerpc\mm\subpage-prot.c" line="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptephys&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptephys&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/tlb_hash32.c" file="powerpc\mm\tlb_hash32.c" line="42"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmd_end&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmd_end&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/mm/tlb_hash32.c" file="powerpc\mm\tlb_hash32.c" line="85"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/net/bpf_jit_comp.c" file="powerpc\net\bpf_jit_comp.c" line="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/net/bpf_jit_comp.c" file="powerpc\net\bpf_jit_comp.c" line="100"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/oprofile/op_model_7450.c" file="powerpc\oprofile\op_model_7450.c" line="193"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/oprofile/op_model_cell.c" file="powerpc\oprofile\op_model_cell.c" line="246"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/oprofile/op_model_cell.c" file="powerpc\oprofile\op_model_cell.c" line="1007"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sample_array_lock_flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sample_array_lock_flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/oprofile/op_model_cell.c" file="powerpc\oprofile\op_model_cell.c" line="1679"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spu_num&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spu_num&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/oprofile/op_model_cell.c" file="powerpc\oprofile\op_model_cell.c" line="1680"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;is_kernel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;is_kernel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/oprofile/op_model_cell.c" file="powerpc\oprofile\op_model_cell.c" line="1797"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/oprofile/op_model_cell.c" file="powerpc\oprofile\op_model_cell.c" line="1800"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;cpu_tmp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;cpu_tmp&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/oprofile/op_model_cell.c" file="powerpc\oprofile\op_model_cell.c" line="1689"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;last_trace_buffer&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;last_trace_buffer&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/oprofile/op_model_cell.c" file="powerpc\oprofile\op_model_cell.c" line="1749"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/oprofile/op_model_fsl_emb.c" file="powerpc\oprofile\op_model_fsl_emb.c" line="415"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/oprofile/op_model_power4.c" file="powerpc\oprofile\op_model_power4.c" line="323"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/oprofile/op_model_power4.c" file="powerpc\oprofile\op_model_power4.c" line="431"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;spu_buff[spu].tail&amp;gt;spu_buff[spu].head&amp;#039; is always true" verbose="Condition &amp;#039;spu_buff[spu].tail&amp;gt;spu_buff[spu].head&amp;#039; is always true">
            <location file0="powerpc/oprofile/cell/spu_task_sync.c" file="powerpc\oprofile\cell\spu_task_sync.c" line="68"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/oprofile/cell/spu_task_sync.c" file="powerpc\oprofile\cell\spu_task_sync.c" line="487"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;next_sp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;next_sp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/callchain.c" file="powerpc\perf\callchain.c" line="64"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;kaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;kaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/callchain.c" file="powerpc\perf\callchain.c" line="192"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mmcr0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mmcr0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/core-book3s.c" file="powerpc\perf\core-book3s.c" line="1392"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/core-book3s.c" file="powerpc\perf\core-book3s.c" line="1392"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!addr&amp;#039; is always true" verbose="Condition &amp;#039;!addr&amp;#039; is always true">
            <location file0="powerpc/perf/core-book3s.c" file="powerpc\perf\core-book3s.c" line="526"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;sdar&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;sdar&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="powerpc/perf/core-book3s.c" file="powerpc\perf\core-book3s.c" line="943"/>
            <location file0="powerpc/perf/core-book3s.c" file="powerpc\perf\core-book3s.c" line="945"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MSR_HV&amp;#039; since the value of &amp;#039;MSR_HV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MSR_HV&amp;#039; since the value of &amp;#039;MSR_HV&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="powerpc\perf\core-book3s.c" line="2717"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;num_restricted&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;num_restricted&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/core-fsl-emb.c" file="powerpc\perf\core-fsl-emb.c" line="593"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/core-fsl-emb.c" file="powerpc\perf\core-fsl-emb.c" line="594"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;event&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;event&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/core-fsl-emb.c" file="powerpc\perf\core-fsl-emb.c" line="821"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/core-fsl-emb.c" file="powerpc\perf\core-fsl-emb.c" line="822"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;found&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;found&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/core-fsl-emb.c" file="powerpc\perf\core-fsl-emb.c" line="823"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;found&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;found&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/perf/core-fsl-emb.c" file="powerpc\perf\core-fsl-emb.c" line="848"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="363"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 1) requires &amp;#039;long long&amp;#039; but the argument type is &amp;#039;unsigned long long&amp;#039;." verbose="%lld in format string (no. 1) requires &amp;#039;long long&amp;#039; but the argument type is &amp;#039;unsigned long long&amp;#039;.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="1175"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 1) requires &amp;#039;long long&amp;#039; but the argument type is &amp;#039;unsigned long long&amp;#039;." verbose="%lld in format string (no. 1) requires &amp;#039;long long&amp;#039; but the argument type is &amp;#039;unsigned long long&amp;#039;.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="1177"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="1127"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;h24x7hw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;h24x7hw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="1474"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="1488"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &amp;#039;sizeof&amp;#039; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &amp;#039;sizeof(10)&amp;#039; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &amp;#039;sizeof(&amp;#039;A&amp;#039;)&amp;#039; and &amp;#039;sizeof(char)&amp;#039; can return different results.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="117"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &amp;#039;sizeof&amp;#039; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &amp;#039;sizeof(10)&amp;#039; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &amp;#039;sizeof(&amp;#039;A&amp;#039;)&amp;#039; and &amp;#039;sizeof(char)&amp;#039; can return different results.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="119"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &amp;#039;sizeof&amp;#039; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &amp;#039;sizeof(10)&amp;#039; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &amp;#039;sizeof(&amp;#039;A&amp;#039;)&amp;#039; and &amp;#039;sizeof(char)&amp;#039; can return different results.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="120"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &amp;#039;sizeof&amp;#039; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &amp;#039;sizeof(10)&amp;#039; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &amp;#039;sizeof(&amp;#039;A&amp;#039;)&amp;#039; and &amp;#039;sizeof(char)&amp;#039; can return different results.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="121"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &amp;#039;sizeof&amp;#039; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &amp;#039;sizeof(10)&amp;#039; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &amp;#039;sizeof(&amp;#039;A&amp;#039;)&amp;#039; and &amp;#039;sizeof(char)&amp;#039; can return different results.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="123"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &amp;#039;sizeof&amp;#039; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &amp;#039;sizeof(10)&amp;#039; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &amp;#039;sizeof(&amp;#039;A&amp;#039;)&amp;#039; and &amp;#039;sizeof(char)&amp;#039; can return different results.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="125"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &amp;#039;sizeof&amp;#039; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &amp;#039;sizeof(10)&amp;#039; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &amp;#039;sizeof(&amp;#039;A&amp;#039;)&amp;#039; and &amp;#039;sizeof(char)&amp;#039; can return different results.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="127"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &amp;#039;sizeof&amp;#039; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &amp;#039;sizeof(10)&amp;#039; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &amp;#039;sizeof(&amp;#039;A&amp;#039;)&amp;#039; and &amp;#039;sizeof(char)&amp;#039; can return different results.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="128"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &amp;#039;sizeof&amp;#039; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &amp;#039;sizeof(10)&amp;#039; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &amp;#039;sizeof(&amp;#039;A&amp;#039;)&amp;#039; and &amp;#039;sizeof(char)&amp;#039; can return different results.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="129"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="218"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="242"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="264"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;start+nl&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;start+nl&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="264"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="267"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;start+nl&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;start+nl&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="267"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="287"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;start+nl&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;start+nl&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="287"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;start+nl+dl&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;start+nl+dl&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="287"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="294"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;start+nl&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;start+nl&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="294"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;start+nl+dl&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;start+nl+dl&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="294"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;event_data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;event_data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="860"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;event_data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;event_data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="871"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)event&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)event&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="890"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)event&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)event&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="964"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;page&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;page&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/perf/hv-24x7.c" file="powerpc\perf\hv-24x7.c" line="1104"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &amp;#039;sizeof&amp;#039; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &amp;#039;sizeof(10)&amp;#039; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &amp;#039;sizeof(&amp;#039;A&amp;#039;)&amp;#039; and &amp;#039;sizeof(char)&amp;#039; can return different results.">
            <location file0="powerpc/perf/hv-gpci.c" file="powerpc\perf\hv-gpci.c" line="32"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &amp;#039;sizeof&amp;#039; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &amp;#039;sizeof(10)&amp;#039; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &amp;#039;sizeof(&amp;#039;A&amp;#039;)&amp;#039; and &amp;#039;sizeof(char)&amp;#039; can return different results.">
            <location file0="powerpc/perf/hv-gpci.c" file="powerpc\perf\hv-gpci.c" line="40"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &amp;#039;sizeof&amp;#039; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &amp;#039;sizeof(10)&amp;#039; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &amp;#039;sizeof(&amp;#039;A&amp;#039;)&amp;#039; and &amp;#039;sizeof(char)&amp;#039; can return different results.">
            <location file0="powerpc/perf/hv-gpci.c" file="powerpc\perf\hv-gpci.c" line="47"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &amp;#039;sizeof&amp;#039; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &amp;#039;sizeof(10)&amp;#039; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &amp;#039;sizeof(&amp;#039;A&amp;#039;)&amp;#039; and &amp;#039;sizeof(char)&amp;#039; can return different results.">
            <location file0="powerpc/perf/hv-gpci.c" file="powerpc\perf\hv-gpci.c" line="49"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &amp;#039;sizeof&amp;#039; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &amp;#039;sizeof(10)&amp;#039; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &amp;#039;sizeof(&amp;#039;A&amp;#039;)&amp;#039; and &amp;#039;sizeof(char)&amp;#039; can return different results.">
            <location file0="powerpc/perf/hv-gpci.c" file="powerpc\perf\hv-gpci.c" line="51"/>
        </error>
        <error id="sizeofwithnumericparameter" severity="warning" msg="Suspicious usage of &amp;#039;sizeof&amp;#039; with a numeric constant as parameter." verbose="It is unusual to use a constant value with sizeof. For example, &amp;#039;sizeof(10)&amp;#039; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &amp;#039;sizeof(&amp;#039;A&amp;#039;)&amp;#039; and &amp;#039;sizeof(char)&amp;#039; can return different results.">
            <location file0="powerpc/perf/hv-gpci.c" file="powerpc\perf\hv-gpci.c" line="53"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;unit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;unit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/isa207-common.c" file="powerpc\perf\isa207-common.c" line="169"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;combine&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;combine&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/isa207-common.c" file="powerpc\perf\isa207-common.c" line="169"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;psel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;psel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/isa207-common.c" file="powerpc\perf\isa207-common.c" line="169"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;nalt&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;nalt&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="powerpc/perf/mpc7450-pmu.c" file="powerpc\perf\mpc7450-pmu.c" line="295"/>
            <location file0="powerpc/perf/mpc7450-pmu.c" file="powerpc\perf\mpc7450-pmu.c" line="299"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/mpc7450-pmu.c" file="powerpc\perf\mpc7450-pmu.c" line="202"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;thresh&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;thresh&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/mpc7450-pmu.c" file="powerpc\perf\mpc7450-pmu.c" line="204"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/mpc7450-pmu.c" file="powerpc\perf\mpc7450-pmu.c" line="295"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/mpc7450-pmu.c" file="powerpc\perf\mpc7450-pmu.c" line="346"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lower&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lower&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power4-pmu.c" file="powerpc\perf\power4-pmu.c" line="284"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;psel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;psel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power4-pmu.c" file="powerpc\perf\power4-pmu.c" line="423"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;nalt&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;nalt&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="powerpc/perf/power5+-pmu.c" file="powerpc\perf\power5+-pmu.c" line="329"/>
            <location file0="powerpc/perf/power5+-pmu.c" file="powerpc\perf\power5+-pmu.c" line="334"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power5+-pmu.c" file="powerpc\perf\power5+-pmu.c" line="141"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;unit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;unit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power5+-pmu.c" file="powerpc\perf\power5+-pmu.c" line="141"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power5+-pmu.c" file="powerpc\perf\power5+-pmu.c" line="142"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;psel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;psel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power5+-pmu.c" file="powerpc\perf\power5+-pmu.c" line="573"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;isbus&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;isbus&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power5+-pmu.c" file="powerpc\perf\power5+-pmu.c" line="575"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;nalt&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;nalt&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="powerpc/perf/power5-pmu.c" file="powerpc\perf\power5-pmu.c" line="330"/>
            <location file0="powerpc/perf/power5-pmu.c" file="powerpc\perf\power5-pmu.c" line="334"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power5-pmu.c" file="powerpc\perf\power5-pmu.c" line="145"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;unit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;unit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power5-pmu.c" file="powerpc\perf\power5-pmu.c" line="145"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power5-pmu.c" file="powerpc\perf\power5-pmu.c" line="146"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power5-pmu.c" file="powerpc\perf\power5-pmu.c" line="330"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;psel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;psel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power5-pmu.c" file="powerpc\perf\power5-pmu.c" line="487"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;isbus&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;isbus&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power5-pmu.c" file="powerpc\perf\power5-pmu.c" line="489"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptype&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptype&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power6-pmu.c" file="powerpc\perf\power6-pmu.c" line="143"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power6-pmu.c" file="powerpc\perf\power6-pmu.c" line="207"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;psel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;psel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power6-pmu.c" file="powerpc\perf\power6-pmu.c" line="207"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power6-pmu.c" file="powerpc\perf\power6-pmu.c" line="357"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;subunit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;subunit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power6-pmu.c" file="powerpc\perf\power6-pmu.c" line="357"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;psel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;psel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power6-pmu.c" file="powerpc\perf\power6-pmu.c" line="474"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power6-pmu.c" file="powerpc\perf\power6-pmu.c" line="474"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;nalt&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;nalt&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="powerpc/perf/power7-pmu.c" file="powerpc\perf\power7-pmu.c" line="190"/>
            <location file0="powerpc/perf/power7-pmu.c" file="powerpc\perf\power7-pmu.c" line="194"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sh&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sh&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power7-pmu.c" file="powerpc\perf\power7-pmu.c" line="89"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;unit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;unit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power7-pmu.c" file="powerpc\perf\power7-pmu.c" line="316"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;combine&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;combine&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power7-pmu.c" file="powerpc\perf\power7-pmu.c" line="316"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l2sel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l2sel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power7-pmu.c" file="powerpc\perf\power7-pmu.c" line="316"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;psel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;psel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/power7-pmu.c" file="powerpc\perf\power7-pmu.c" line="316"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/ppc970-pmu.c" file="powerpc\perf\ppc970-pmu.c" line="219"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sh&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sh&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/ppc970-pmu.c" file="powerpc\perf\ppc970-pmu.c" line="219"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;psel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;psel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/perf/ppc970-pmu.c" file="powerpc\perf\ppc970-pmu.c" line="309"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;pmcsel[8]&amp;#039; accessed at index 8, which is out of bounds." verbose="Array &amp;#039;pmcsel[8]&amp;#039; accessed at index 8, which is out of bounds.">
            <location file0="powerpc/perf/ppc970-pmu.c" file="powerpc\perf\ppc970-pmu.c" line="501"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;fpga&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;fpga&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/44x/warp.c" file="powerpc\platforms\44x\warp.c" line="256"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;fpga&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;fpga&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/44x/warp.c" file="powerpc\platforms\44x\warp.c" line="307"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;.">
            <location file0="powerpc/platforms/512x/clock-commonclk.c" file="powerpc\platforms\512x\clock-commonclk.c" line="930"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prop&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prop&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/512x/clock-commonclk.c" file="powerpc\platforms\512x\clock-commonclk.c" line="448"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/512x/mpc512x_shared.c" file="powerpc\platforms\512x\mpc512x_shared.c" line="231"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/512x/mpc512x_shared.c" file="powerpc\platforms\512x\mpc512x_shared.c" line="231"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;np&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;np&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/512x/mpc512x_shared.c" file="powerpc\platforms\512x\mpc512x_shared.c" line="577"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pdm360ng_gpio_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pdm360ng_gpio_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/512x/pdm360ng.c" file="powerpc\platforms\512x\pdm360ng.c" line="39"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pdm360ng_gpio_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pdm360ng_gpio_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/512x/pdm360ng.c" file="powerpc\platforms\512x\pdm360ng.c" line="43"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pdm360ng_gpio_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pdm360ng_gpio_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/512x/pdm360ng.c" file="powerpc\platforms\512x\pdm360ng.c" line="46"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pdm360ng_gpio_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pdm360ng_gpio_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/512x/pdm360ng.c" file="powerpc\platforms\512x\pdm360ng.c" line="80"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pdm360ng_gpio_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pdm360ng_gpio_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/512x/pdm360ng.c" file="powerpc\platforms\512x\pdm360ng.c" line="81"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pdm360ng_gpio_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pdm360ng_gpio_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/512x/pdm360ng.c" file="powerpc\platforms\512x\pdm360ng.c" line="82"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mbar&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mbar&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/52xx/lite5200.c" file="powerpc\platforms\52xx\lite5200.c" line="150"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mbar&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mbar&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/52xx/lite5200.c" file="powerpc\platforms\52xx\lite5200.c" line="152"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mbar&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mbar&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/52xx/lite5200.c" file="powerpc\platforms\52xx\lite5200.c" line="158"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sub_virq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sub_virq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/52xx/media5200.c" file="powerpc\platforms\52xx\media5200.c" line="89"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sub_virq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sub_virq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/52xx/mpc52xx_gpt.c" file="powerpc\platforms\52xx\mpc52xx_gpt.c" line="206"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gpt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gpt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/52xx/mpc52xx_gpt.c" file="powerpc\platforms\52xx\mpc52xx_gpt.c" line="402"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/52xx/mpc52xx_lpbfifo.c" file="powerpc\platforms\52xx\mpc52xx_lpbfifo.c" line="67"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/52xx/mpc52xx_lpbfifo.c" file="powerpc\platforms\52xx\mpc52xx_lpbfifo.c" line="69"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/52xx/mpc52xx_lpbfifo.c" file="powerpc\platforms\52xx\mpc52xx_lpbfifo.c" line="70"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hndlr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hndlr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/52xx/mpc52xx_pic.c" file="powerpc\platforms\52xx\mpc52xx_pic.c" line="361"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/52xx/mpc52xx_pic.c" file="powerpc\platforms\52xx\mpc52xx_pic.c" line="362"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)CONFIG_KERNEL_START&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)CONFIG_KERNEL_START&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/52xx/mpc52xx_pm.c" file="powerpc\platforms\52xx\mpc52xx_pm.c" line="127"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/83xx/mcu_mpc8349emitx.c" file="powerpc\platforms\83xx\mcu_mpc8349emitx.c" line="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dr_mode&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dr_mode&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/83xx/usb.c" file="powerpc\platforms\83xx\usb.c" line="33"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ecm&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ecm&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/85xx/p1022_ds.c" file="powerpc\platforms\85xx\p1022_ds.c" line="145"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;notified&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;notified&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/85xx/smp.c" file="powerpc\platforms\85xx\smp.c" line="433"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;now&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;now&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/85xx/smp.c" file="powerpc\platforms\85xx\smp.c" line="437"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="powerpc/platforms/86xx/mpc8610_hpcd.c" file="powerpc\platforms\86xx\mpc8610_hpcd.c" line="171"/>
            <location file0="powerpc/platforms/86xx/mpc8610_hpcd.c" file="powerpc\platforms\86xx\mpc8610_hpcd.c" line="171"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="powerpc/platforms/86xx/mpc8610_hpcd.c" file="powerpc\platforms\86xx\mpc8610_hpcd.c" line="172"/>
            <location file0="powerpc/platforms/86xx/mpc8610_hpcd.c" file="powerpc\platforms\86xx\mpc8610_hpcd.c" line="172"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="powerpc/platforms/86xx/mpc8610_hpcd.c" file="powerpc\platforms\86xx\mpc8610_hpcd.c" line="176"/>
            <location file0="powerpc/platforms/86xx/mpc8610_hpcd.c" file="powerpc\platforms\86xx\mpc8610_hpcd.c" line="176"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="powerpc/platforms/86xx/mpc8610_hpcd.c" file="powerpc\platforms\86xx\mpc8610_hpcd.c" line="177"/>
            <location file0="powerpc/platforms/86xx/mpc8610_hpcd.c" file="powerpc\platforms\86xx\mpc8610_hpcd.c" line="177"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/86xx/mpc8610_hpcd.c" file="powerpc\platforms\86xx\mpc8610_hpcd.c" line="206"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;idx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;idx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/axon_msi.c" file="powerpc\platforms\cell\axon_msi.c" line="102"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;virq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;virq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/axon_msi.c" file="powerpc\platforms\cell\axon_msi.c" line="291"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/cbe_regs.c" file="powerpc\platforms\cell\cbe_regs.c" line="53"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;affected_info&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;affected_info&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/cpufreq_spudemand.c" file="powerpc\platforms\cell\cpufreq_spudemand.c" line="93"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/interrupt.c" file="powerpc\platforms\cell\interrupt.c" line="115"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ack&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ack&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/interrupt.c" file="powerpc\platforms\cell\interrupt.c" line="115"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/iommu.c" file="powerpc\platforms\cell\iommu.c" line="149"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/iommu.c" file="powerpc\platforms\cell\iommu.c" line="311"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ioaddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ioaddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/iommu.c" file="powerpc\platforms\cell\iommu.c" line="1128"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;shadow_regs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;shadow_regs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/pmu.c" file="powerpc\platforms\cell\pmu.c" line="99"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;val&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;val&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/cell/spider-pci.c" file="powerpc\platforms\cell\spider-pci.c" line="45"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/spu_base.c" file="powerpc\platforms\cell\spu_base.c" line="207"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)lscsa&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)lscsa&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/cell/spu_base.c" file="powerpc\platforms\cell\spu_base.c" line="296"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)lscsa+sizeof(*lscsa)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)lscsa+sizeof(*lscsa)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/cell/spu_base.c" file="powerpc\platforms\cell\spu_base.c" line="296"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;code&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;code&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/cell/spu_base.c" file="powerpc\platforms\cell\spu_base.c" line="297"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;code+code_size&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;code+code_size&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/cell/spu_base.c" file="powerpc\platforms\cell\spu_base.c" line="297"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spu_reg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spu_reg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/spu_manage.c" file="powerpc\platforms\cell\spu_manage.c" line="501"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;spu_dn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;spu_dn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/spu_manage.c" file="powerpc\platforms\cell\spu_manage.c" line="579"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vic_handles&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vic_handles&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/spu_manage.c" file="powerpc\platforms\cell\spu_manage.c" line="610"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sz&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sz&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/spufs/coredump.c" file="powerpc\platforms\cell\spufs\coredump.c" line="61"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/spufs/coredump.c" file="powerpc\platforms\cell\spufs\coredump.c" line="62"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/spufs/coredump.c" file="powerpc\platforms\cell\spufs\coredump.c" line="129"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/spufs/coredump.c" file="powerpc\platforms\cell\spufs\coredump.c" line="239"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __user*)(long)ctx.ops.npc_read(ctx)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __user*)(long)ctx.ops.npc_read(ctx)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/cell/spufs/fault.c" file="powerpc\platforms\cell\spufs\fault.c" line="73"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(neighbor)&amp;#039; is redundant or there is possible null pointer dereference: neighbor." verbose="Either the condition &amp;#039;if(neighbor)&amp;#039; is redundant or there is possible null pointer dereference: neighbor.">
            <location file0="powerpc/platforms/cell/spufs/inode.c" file="powerpc\platforms\cell\spufs\inode.c" line="478"/>
            <location file0="powerpc/platforms/cell/spufs/inode.c" file="powerpc\platforms\cell\spufs\inode.c" line="568"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(neighbor)&amp;#039; is redundant or there is possible null pointer dereference: neighbor." verbose="Either the condition &amp;#039;if(neighbor)&amp;#039; is redundant or there is possible null pointer dereference: neighbor.">
            <location file0="powerpc/platforms/cell/spufs/inode.c" file="powerpc\platforms\cell\spufs\inode.c" line="482"/>
            <location file0="powerpc/platforms/cell/spufs/inode.c" file="powerpc\platforms\cell\spufs\inode.c" line="568"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(neighbor)&amp;#039; is redundant or there is possible null pointer dereference: neighbor." verbose="Either the condition &amp;#039;if(neighbor)&amp;#039; is redundant or there is possible null pointer dereference: neighbor.">
            <location file0="powerpc/platforms/cell/spufs/inode.c" file="powerpc\platforms\cell\spufs\inode.c" line="491"/>
            <location file0="powerpc/platforms/cell/spufs/inode.c" file="powerpc\platforms\cell\spufs\inode.c" line="568"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(neighbor)&amp;#039; is redundant or there is possible null pointer dereference: neighbor." verbose="Either the condition &amp;#039;if(neighbor)&amp;#039; is redundant or there is possible null pointer dereference: neighbor.">
            <location file0="powerpc/platforms/cell/spufs/inode.c" file="powerpc\platforms\cell\spufs\inode.c" line="493"/>
            <location file0="powerpc/platforms/cell/spufs/inode.c" file="powerpc\platforms\cell\spufs\inode.c" line="568"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ctx&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ctx&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/cell/spufs/inode.c" file="powerpc\platforms\cell\spufs\inode.c" line="261"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function.">
            <location file0="powerpc/platforms/cell/spufs/sched.c" file="powerpc\platforms\cell\spufs\sched.c" line="466"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/spufs/sched.c" file="powerpc\platforms\cell\spufs\sched.c" line="161"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/spufs/sched.c" file="powerpc\platforms\cell\spufs\sched.c" line="1254"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;decr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;decr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/spufs/spu_restore.c" file="powerpc\platforms\cell\spufs\spu_restore.c" line="85"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/spufs/switch.c" file="powerpc\platforms\cell\spufs\switch.c" line="367"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;transfer_size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;transfer_size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/spufs/switch.c" file="powerpc\platforms\cell\spufs\switch.c" line="814"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/cell/spufs/switch.c" file="powerpc\platforms\cell\spufs\switch.c" line="1513"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/cell/spufs/switch.c" file="powerpc\platforms\cell\spufs\switch.c" line="1779"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/cell/spufs/switch.c" file="powerpc\platforms\cell\spufs\switch.c" line="1795"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/chrp/setup.c" file="powerpc\platforms\chrp\setup.c" line="103"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sdramen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sdramen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/chrp/setup.c" file="powerpc\platforms\chrp\setup.c" line="103"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/chrp/setup.c" file="powerpc\platforms\chrp\setup.c" line="104"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/embedded6xx/flipper-pic.c" file="powerpc\platforms\embedded6xx\flipper-pic.c" line="133"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/embedded6xx/flipper-pic.c" file="powerpc\platforms\embedded6xx\flipper-pic.c" line="134"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;interrupts&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;interrupts&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/embedded6xx/hlwd-pic.c" file="powerpc\platforms\embedded6xx\hlwd-pic.c" line="226"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/embedded6xx/hlwd-pic.c" file="powerpc\platforms\embedded6xx\hlwd-pic.c" line="168"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;io_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/embedded6xx/hlwd-pic.c" file="powerpc\platforms\embedded6xx\hlwd-pic.c" line="169"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/embedded6xx/ls_uart.c" file="powerpc\platforms\embedded6xx\ls_uart.c" line="36"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/pasemi/dma_lib.c" file="powerpc\platforms\pasemi\dma_lib.c" line="213"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;virq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;virq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pasemi/msi.c" file="powerpc\platforms\pasemi\msi.c" line="89"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hwirq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hwirq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pasemi/msi.c" file="powerpc\platforms\pasemi\msi.c" line="92"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rmask&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rmask&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powermac/feature.c" file="powerpc\platforms\powermac\feature.c" line="187"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pdev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pdev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powermac/feature.c" file="powerpc\platforms\powermac\feature.c" line="1076"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powermac/feature.c" file="powerpc\platforms\powermac\feature.c" line="1078"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powermac/feature.c" file="powerpc\platforms\powermac\feature.c" line="1235"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powermac/feature.c" file="powerpc\platforms\powermac\feature.c" line="389"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powermac/feature.c" file="powerpc\platforms\powermac\feature.c" line="1758"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powermac/feature.c" file="powerpc\platforms\powermac\feature.c" line="1767"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powermac/feature.c" file="powerpc\platforms\powermac\feature.c" line="1776"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powermac/feature.c" file="powerpc\platforms\powermac\feature.c" line="1807"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powermac/feature.c" file="powerpc\platforms\powermac\feature.c" line="1865"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;inst.buffer[64]&amp;#039; accessed at index 9998, which is out of bounds." verbose="Array &amp;#039;inst.buffer[64]&amp;#039; accessed at index 9998, which is out of bounds.">
            <location file0="powerpc/platforms/powermac/low_i2c.c" file="powerpc\platforms\powermac\low_i2c.c" line="1728"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powermac/nvram.c" file="powerpc\platforms\powermac\nvram.c" line="386"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powermac/nvram.c" file="powerpc\platforms\powermac\nvram.c" line="486"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)hose.cfg_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)hose.cfg_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/powermac/pci.c" file="powerpc\platforms\powermac\pci.c" line="337"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powermac/pfunc_base.c" file="powerpc\platforms\powermac\pfunc_base.c" line="175"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powermac/pfunc_base.c" file="powerpc\platforms\powermac\pfunc_base.c" line="186"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powermac/pfunc_base.c" file="powerpc\platforms\powermac\pfunc_base.c" line="200"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powermac/pfunc_base.c" file="powerpc\platforms\powermac\pfunc_base.c" line="211"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powermac/pfunc_base.c" file="powerpc\platforms\powermac\pfunc_base.c" line="226"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powermac/pfunc_base.c" file="powerpc\platforms\powermac\pfunc_base.c" line="241"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powermac/pfunc_base.c" file="powerpc\platforms\powermac\pfunc_base.c" line="256"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;macio&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powermac/pfunc_base.c" file="powerpc\platforms\powermac\pfunc_base.c" line="278"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powermac/pfunc_core.c" file="powerpc\platforms\powermac\pfunc_core.c" line="598"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;cmd.cmdptr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;cmd.cmdptr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/powermac/pfunc_core.c" file="powerpc\platforms\powermac\pfunc_core.c" line="110"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;cmd.cmdptr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;cmd.cmdptr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/powermac/pfunc_core.c" file="powerpc\platforms\powermac\pfunc_core.c" line="125"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powermac/pic.c" file="powerpc\platforms\powermac\pic.c" line="235"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powermac/pic.c" file="powerpc\platforms\powermac\pic.c" line="266"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powermac/smp.c" file="powerpc\platforms\powermac\smp.c" line="1047"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powermac/udbg_adb.c" file="powerpc\platforms\powermac\udbg_adb.c" line="85"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;on&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;on&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powermac/udbg_adb.c" file="powerpc\platforms\powermac\udbg_adb.c" line="85"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;phb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;phb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/eeh-powernv.c" file="powerpc\platforms\powernv\eeh-powernv.c" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;phb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;phb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/eeh-powernv.c" file="powerpc\platforms\powernv\eeh-powernv.c" line="228"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hose&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hose&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/eeh-powernv.c" file="powerpc\platforms\powernv\eeh-powernv.c" line="1100"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/eeh-powernv.c" file="powerpc\platforms\powernv\eeh-powernv.c" line="1270"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/eeh-powernv.c" file="powerpc\platforms\powernv\eeh-powernv.c" line="1349"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;phb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;phb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/eeh-powernv.c" file="powerpc\platforms\powernv\eeh-powernv.c" line="1717"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old_mps&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old_mps&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/eeh-powernv.c" file="powerpc\platforms\powernv\eeh-powernv.c" line="1957"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;phb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;phb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/eeh-powernv.c" file="powerpc\platforms\powernv\eeh-powernv.c" line="2020"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%x in format string (no. 1) requires &amp;#039;unsigned int *&amp;#039; but the argument type is &amp;#039;signed int *&amp;#039;." verbose="%x in format string (no. 1) requires &amp;#039;unsigned int *&amp;#039; but the argument type is &amp;#039;signed int *&amp;#039;.">
            <location file0="powerpc/platforms/powernv/eeh-powernv.c" file="powerpc\platforms\powernv\eeh-powernv.c" line="139"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%x in format string (no. 2) requires &amp;#039;unsigned int *&amp;#039; but the argument type is &amp;#039;signed int *&amp;#039;." verbose="%x in format string (no. 2) requires &amp;#039;unsigned int *&amp;#039; but the argument type is &amp;#039;signed int *&amp;#039;.">
            <location file0="powerpc/platforms/powernv/eeh-powernv.c" file="powerpc\platforms\powernv\eeh-powernv.c" line="139"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%x in format string (no. 3) requires &amp;#039;unsigned int *&amp;#039; but the argument type is &amp;#039;signed int *&amp;#039;." verbose="%x in format string (no. 3) requires &amp;#039;unsigned int *&amp;#039; but the argument type is &amp;#039;signed int *&amp;#039;.">
            <location file0="powerpc/platforms/powernv/eeh-powernv.c" file="powerpc\platforms\powernv\eeh-powernv.c" line="139"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/idle.c" file="powerpc\platforms\powernv\idle.c" line="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pdn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pdn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/npu-dma.c" file="powerpc\platforms\powernv\npu-dma.c" line="315"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;npe&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;npe&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/npu-dma.c" file="powerpc\platforms\powernv\npu-dma.c" line="316"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gptmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gptmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/npu-dma.c" file="powerpc\platforms\powernv\npu-dma.c" line="390"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;rc&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;rc&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powernv/npu-dma.c" file="powerpc\platforms\powernv\npu-dma.c" line="261"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/opal-dump.c" file="powerpc\platforms\powernv\opal-dump.c" line="321"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;opal_rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;opal_rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/opal-elog.c" file="powerpc\platforms\powernv\opal-elog.c" line="171"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="powerpc/platforms/powernv/opal-flash.c" file="powerpc\platforms\powernv\opal-flash.c" line="175"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/powernv/opal-flash.c" file="powerpc\platforms\powernv\opal-flash.c" line="448"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/powernv/opal-flash.c" file="powerpc\platforms\powernv\opal-flash.c" line="502"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;image_data.data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;image_data.data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/powernv/opal-flash.c" file="powerpc\platforms\powernv\opal-flash.c" line="560"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;disposition&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;disposition&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/opal-hmi.c" file="powerpc\platforms\powernv\opal-hmi.c" line="313"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hwirq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hwirq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/opal-irqchip.c" file="powerpc\platforms\powernv\opal-irqchip.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/opal-kmsg.c" file="powerpc\platforms\powernv\opal-kmsg.c" line="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/opal-kmsg.c" file="powerpc\platforms\powernv\opal-kmsg.c" line="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/opal-lpc.c" file="powerpc\platforms\powernv\opal-lpc.c" line="234"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;merr_evt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;merr_evt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/opal-memory-errors.c" file="powerpc\platforms\powernv\opal-memory-errors.c" line="76"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;count&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;count&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="powerpc/platforms/powernv/opal-msglog.c" file="powerpc\platforms\powernv\opal-msglog.c" line="79"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vmalloc_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vmalloc_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/powernv/opal.c" file="powerpc\platforms\powernv\opal.c" line="1001"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;virq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;virq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci-cxl.c" file="powerpc\platforms\powernv\pci-cxl.c" line="371"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hwirq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hwirq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci-cxl.c" file="powerpc\platforms\powernv\pci-cxl.c" line="372"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci-ioda.c" file="powerpc\platforms\powernv\pci-ioda.c" line="278"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;parent&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;parent&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci-ioda.c" file="powerpc\platforms\powernv\pci-ioda.c" line="912"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;phb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;phb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci-ioda.c" file="powerpc\platforms\powernv\pci-ioda.c" line="1518"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;top&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;top&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci-ioda.c" file="powerpc\platforms\powernv\pci-ioda.c" line="2089"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci-ioda.c" file="powerpc\platforms\powernv\pci-ioda.c" line="3077"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci-ioda.c" file="powerpc\platforms\powernv\pci-ioda.c" line="3828"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci-ioda.c" file="powerpc\platforms\powernv\pci-ioda.c" line="4176"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;idata&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;idata&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci-ioda.c" file="powerpc\platforms\powernv\pci-ioda.c" line="3303"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ichip&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ichip&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci-ioda.c" file="powerpc\platforms\powernv\pci-ioda.c" line="3304"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;phb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;phb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci-ioda.c" file="powerpc\platforms\powernv\pci-ioda.c" line="3721"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pe&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pe&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci-ioda.c" file="powerpc\platforms\powernv\pci-ioda.c" line="1776"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;iov&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;iov&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/powernv/pci-ioda.c" file="powerpc\platforms\powernv\pci-ioda.c" line="1785"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pdn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pdn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci.c" file="powerpc\platforms\powernv\pci.c" line="1034"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hwirq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hwirq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci.c" file="powerpc\platforms\powernv\pci.c" line="203"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;virq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;virq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci.c" file="powerpc\platforms\powernv\pci.c" line="204"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/pci.c" file="powerpc\platforms\powernv\pci.c" line="205"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/setup.c" file="powerpc\platforms\powernv\setup.c" line="220"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/powernv/subcore.c" file="powerpc\platforms\powernv\subcore.c" line="362"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;result&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;result&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/ps3/htab.c" file="powerpc\platforms\ps3\htab.c" line="160"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!USE_DYNAMIC_DMA&amp;#039; is always true" verbose="Condition &amp;#039;!USE_DYNAMIC_DMA&amp;#039; is always true">
            <location file0="powerpc/platforms/ps3/mm.c" file="powerpc\platforms\ps3\mm.c" line="865"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;result&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;result&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/ps3/mm.c" file="powerpc\platforms\ps3\mm.c" line="223"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;result&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;result&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/ps3/mm.c" file="powerpc\platforms\ps3\mm.c" line="332"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/ps3/mm.c" file="powerpc\platforms\ps3\mm.c" line="523"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!USE_DYNAMIC_DMA&amp;#039; is always false" verbose="Condition &amp;#039;!USE_DYNAMIC_DMA&amp;#039; is always false">
            <location file0="powerpc/platforms/ps3/mm.c" file="powerpc\platforms\ps3\mm.c" line="865"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;VALUES_64_COUNT&amp;gt;INDEX_64_COUNT&amp;#039; is always false" verbose="Condition &amp;#039;VALUES_64_COUNT&amp;gt;INDEX_64_COUNT&amp;#039; is always false">
            <location file0="powerpc/platforms/ps3/os-area.c" file="powerpc\platforms\ps3\os-area.c" line="654"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;VALUES_32_COUNT&amp;gt;INDEX_32_COUNT&amp;#039; is always false" verbose="Condition &amp;#039;VALUES_32_COUNT&amp;gt;INDEX_32_COUNT&amp;#039; is always false">
            <location file0="powerpc/platforms/ps3/os-area.c" file="powerpc\platforms\ps3\os-area.c" line="656"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;VALUES_16_COUNT&amp;gt;INDEX_16_COUNT&amp;#039; is always false" verbose="Condition &amp;#039;VALUES_16_COUNT&amp;gt;INDEX_16_COUNT&amp;#039; is always false">
            <location file0="powerpc/platforms/ps3/os-area.c" file="powerpc\platforms\ps3\os-area.c" line="658"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)db&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)db&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/ps3/os-area.c" file="powerpc\platforms\ps3\os-area.c" line="477"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)db&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)db&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/ps3/os-area.c" file="powerpc\platforms\ps3\os-area.c" line="479"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)header&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)header&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/platforms/ps3/os-area.c" file="powerpc\platforms\ps3\os-area.c" line="716"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;error&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;error&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/ps3/repository.c" file="powerpc\platforms\ps3\repository.c" line="534"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;table::name&amp;#039; is never used." verbose="struct member &amp;#039;table::name&amp;#039; is never used.">
            <location file0="powerpc/platforms/ps3/spu.c" file="powerpc\platforms\ps3\spu.c" line="213"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;table::addr&amp;#039; is never used." verbose="struct member &amp;#039;table::addr&amp;#039; is never used.">
            <location file0="powerpc/platforms/ps3/spu.c" file="powerpc\platforms\ps3\spu.c" line="213"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;table::size&amp;#039; is never used." verbose="struct member &amp;#039;table::size&amp;#039; is never used.">
            <location file0="powerpc/platforms/ps3/spu.c" file="powerpc\platforms\ps3\spu.c" line="213"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file0="powerpc/platforms/ps3/system-bus.c" file="powerpc\platforms\ps3\system-bus.c" line="602"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/cmm.c" file="powerpc\platforms\pseries\cmm.c" line="123"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/cmm.c" file="powerpc\platforms\pseries\cmm.c" line="124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/cmm.c" file="powerpc\platforms\pseries\cmm.c" line="217"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;timeleft&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;timeleft&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/cmm.c" file="powerpc\platforms\pseries\cmm.c" line="348"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;.&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;.&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="powerpc/platforms/pseries/cmm.c" file="powerpc\platforms\pseries\cmm.c" line="225"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;read_size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;read_size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/dtl.c" file="powerpc\platforms\pseries\dtl.c" line="298"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;enable&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;enable&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/eeh_pseries.c" file="powerpc\platforms\pseries\eeh_pseries.c" line="250"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/eeh_pseries.c" file="powerpc\platforms\pseries\eeh_pseries.c" line="638"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/hotplug-cpu.c" file="powerpc\platforms\pseries\hotplug-cpu.c" line="450"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/hotplug-cpu.c" file="powerpc\platforms\pseries\hotplug-cpu.c" line="479"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/hotplug-cpu.c" file="powerpc\platforms\pseries\hotplug-cpu.c" line="721"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/hotplug-cpu.c" file="powerpc\platforms\pseries\hotplug-cpu.c" line="764"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/hotplug-cpu.c" file="powerpc\platforms\pseries\hotplug-cpu.c" line="867"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pfn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pfn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/hotplug-memory.c" file="powerpc\platforms\pseries\hotplug-memory.c" line="458"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/hvcserver.c" file="powerpc\platforms\pseries\hvcserver.c" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;element&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;element&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/hvcserver.c" file="powerpc\platforms\pseries\hvcserver.c" line="83"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;retval&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;retval&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/hvcserver.c" file="powerpc\platforms\pseries\hvcserver.c" line="151"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;event&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;event&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/io_event_irq.c" file="powerpc\platforms\pseries\io_event_irq.c" line="127"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rtas_rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rtas_rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/io_event_irq.c" file="powerpc\platforms\pseries\io_event_irq.c" line="128"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;limit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;limit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/iommu.c" file="powerpc\platforms\pseries\iommu.c" line="448"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;limit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;limit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/iommu.c" file="powerpc\platforms\pseries\iommu.c" line="491"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tbl&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tbl&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/iommu.c" file="powerpc\platforms\pseries\iommu.c" line="744"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tbl&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tbl&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/iommu.c" file="powerpc\platforms\pseries\iommu.c" line="793"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tbl&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tbl&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/iommu.c" file="powerpc\platforms\pseries\iommu.c" line="1274"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tces&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tces&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/pseries/iommu.c" file="powerpc\platforms\pseries\iommu.c" line="155"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tces&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tces&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/pseries/iommu.c" file="powerpc\platforms\pseries\iommu.c" line="175"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lpar_rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lpar_rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/lpar.c" file="powerpc\platforms\pseries\lpar.c" line="224"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lpar_rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lpar_rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/lpar.c" file="powerpc\platforms\pseries\lpar.c" line="266"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lpar_rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lpar_rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/lpar.c" file="powerpc\platforms\pseries\lpar.c" line="354"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vpn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vpn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/lpar.c" file="powerpc\platforms\pseries\lpar.c" line="612"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;valid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;valid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/lpar.c" file="powerpc\platforms\pseries\lpar.c" line="517"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;perf_level&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;perf_level&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/lparcfg.c" file="powerpc\platforms\pseries\lparcfg.c" line="162"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lp_index_ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lp_index_ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/lparcfg.c" file="powerpc\platforms\pseries\lparcfg.c" line="782"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;local_buffer&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;local_buffer&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/pseries/lparcfg.c" file="powerpc\platforms\pseries\lparcfg.c" line="406"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/mobility.c" file="powerpc\platforms\pseries\mobility.c" line="288"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/msi.c" file="powerpc\platforms\pseries\msi.c" line="206"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/msi.c" file="powerpc\platforms\pseries\msi.c" line="306"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/pci_dlpar.c" file="powerpc\platforms\pseries\pci_dlpar.c" line="76"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/pseries_energy.c" file="powerpc\platforms\pseries\pseries_energy.c" line="145"/>
        </error>
        <error id="redundantCopy" severity="performance" msg="Buffer &amp;#039;global_mce_data_buf&amp;#039; is being written before its old content has been used." verbose="Buffer &amp;#039;global_mce_data_buf&amp;#039; is being written before its old content has been used.">
            <location file0="powerpc/platforms/pseries/ras.c" file="powerpc\platforms\pseries\ras.c" line="397"/>
            <location file0="powerpc/platforms/pseries/ras.c" file="powerpc\platforms\pseries\ras.c" line="398"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;errp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;errp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/ras.c" file="powerpc\platforms\pseries\ras.c" line="504"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;status&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;status&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/platforms/pseries/ras.c" file="powerpc\platforms\pseries\ras.c" line="273"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;status&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;status&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/scanlog.c" file="powerpc\platforms\pseries\scanlog.c" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;wait_time&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;wait_time&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/scanlog.c" file="powerpc\platforms\pseries\scanlog.c" line="52"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;status&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;status&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/scanlog.c" file="powerpc\platforms\pseries\scanlog.c" line="138"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/setup.c" file="powerpc\platforms\pseries\setup.c" line="383"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;delay&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;delay&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/setup.c" file="powerpc\platforms\pseries\setup.c" line="384"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/platforms/pseries/setup.c" file="powerpc\platforms\pseries\setup.c" line="278"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%ld in format string (no. 1) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;.">
            <location file0="powerpc/sysdev/axonram.c" file="powerpc\sysdev\axonram.c" line="81"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;user_mem&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;user_mem&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/axonram.c" file="powerpc\sysdev\axonram.c" line="113"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)bank.io_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)bank.io_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/sysdev/axonram.c" file="powerpc\sysdev\axonram.c" line="159"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;i&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;i&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/sysdev/cpm2_pic.c" file="powerpc\sysdev\cpm2_pic.c" line="286"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/dcr.c" file="powerpc\sysdev\dcr.c" line="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/dcr.c" file="powerpc\sysdev\dcr.c" line="31"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;vnew&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;vnew&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/sysdev/ehv_pic.c" file="powerpc\sysdev\ehv_pic.c" line="131"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/sysdev/fsl_gtm.c" file="powerpc\sysdev\fsl_gtm.c" line="234"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/sysdev/fsl_gtm.c" file="powerpc\sysdev\fsl_gtm.c" line="235"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/sysdev/fsl_gtm.c" file="powerpc\sysdev\fsl_gtm.c" line="237"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/sysdev/fsl_gtm.c" file="powerpc\sysdev\fsl_gtm.c" line="251"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/sysdev/fsl_gtm.c" file="powerpc\sysdev\fsl_gtm.c" line="342"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;errint&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;errint&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/fsl_mpic_err.c" file="powerpc\sysdev\fsl_mpic_err.c" line="113"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cascade_irq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cascade_irq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/fsl_mpic_err.c" file="powerpc\sysdev\fsl_mpic_err.c" line="114"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;msir_index&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;msir_index&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="powerpc/sysdev/fsl_msi.c" file="powerpc\sysdev\fsl_msi.c" line="317"/>
            <location file0="powerpc/sysdev/fsl_msi.c" file="powerpc\sysdev\fsl_msi.c" line="326"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/fsl_pci.c" file="powerpc\sysdev\fsl_pci.c" line="1262"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/fsl_pci.c" file="powerpc\sysdev\fsl_pci.c" line="567"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;primary&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;primary&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/fsl_rcpm.c" file="powerpc\sysdev\fsl_rcpm.c" line="166"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/fsl_rio.c" file="powerpc\sysdev\fsl_rio.c" line="437"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;fsl_dbell.dbell_ring.virt&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;fsl_dbell.dbell_ring.virt&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/sysdev/fsl_rmu.c" file="powerpc\sysdev\fsl_rmu.c" line="336"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;rmu.msg_tx_ring.virt_buffer[rmu.msg_tx_ring.tx_slot]&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;rmu.msg_tx_ring.virt_buffer[rmu.msg_tx_ring.tx_slot]&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/sysdev/fsl_rmu.c" file="powerpc\sysdev\fsl_rmu.c" line="757"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;rmu.msg_rx_ring.virt&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;rmu.msg_rx_ring.virt&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/sysdev/fsl_rmu.c" file="powerpc\sysdev\fsl_rmu.c" line="1101"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/mmio_nvram.c" file="powerpc\sysdev\mmio_nvram.c" line="106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/mpic.c" file="powerpc\sysdev\mpic.c" line="1987"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/mpic.c" file="powerpc\sysdev\mpic.c" line="2218"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="powerpc/sysdev/mpic_msgr.c" file="powerpc\sysdev\mpic_msgr.c" line="130"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="powerpc/sysdev/mpic_msgr.c" file="powerpc\sysdev\mpic_msgr.c" line="167"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/mpic_msi.c" file="powerpc\sysdev\mpic_msi.c" line="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;map&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;map&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/mpic_timer.c" file="powerpc\sysdev\mpic_timer.c" line="153"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/mpic_timer.c" file="powerpc\sysdev\mpic_timer.c" line="257"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;.&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;.&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="powerpc/sysdev/mpic_timer.c" file="powerpc\sysdev\mpic_timer.c" line="505"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pos&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pos&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/mpic_u3msi.c" file="powerpc\sysdev\mpic_u3msi.c" line="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;virq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;virq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/mpic_u3msi.c" file="powerpc\sysdev\mpic_u3msi.c" line="139"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hwirq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hwirq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/mpic_u3msi.c" file="powerpc\sysdev\mpic_u3msi.c" line="143"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;count&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;count&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="powerpc/sysdev/mv64x60_pci.c" file="powerpc\sysdev\mv64x60_pci.c" line="70"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/ppc4xx_hsta_msi.c" file="powerpc\sysdev\ppc4xx_hsta_msi.c" line="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hwirq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hwirq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/ppc4xx_hsta_msi.c" file="powerpc\sysdev\ppc4xx_hsta_msi.c" line="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;virq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;virq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/ppc4xx_msi.c" file="powerpc\sysdev\ppc4xx_msi.c" line="88"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;virq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;virq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/ppc4xx_msi.c" file="powerpc\sysdev\ppc4xx_msi.c" line="247"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;message&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;message&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/ppc4xx_pci.c" file="powerpc\sysdev\ppc4xx_pci.c" line="1823"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)port.hose.cfg_data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)port.hose.cfg_data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/sysdev/ppc4xx_pci.c" file="powerpc\sysdev\ppc4xx_pci.c" line="1881"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/scom.c" file="powerpc\sysdev\scom.c" line="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/scom.c" file="powerpc\sysdev\scom.c" line="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/scom.c" file="powerpc\sysdev\scom.c" line="137"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/scom.c" file="powerpc\sysdev\scom.c" line="191"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/tsi108_pci.c" file="powerpc\sysdev\tsi108_pci.c" line="307"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mask&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mask&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/tsi108_pci.c" file="powerpc\sysdev\tsi108_pci.c" line="309"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/tsi108_pci.c" file="powerpc\sysdev\tsi108_pci.c" line="418"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;irp_cfg&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;irp_cfg&amp;#039; is assigned a value that is never used.">
            <location file0="powerpc/sysdev/tsi108_pci.c" file="powerpc\sysdev\tsi108_pci.c" line="278"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/udbg_memcons.c" file="powerpc\sysdev\udbg_memcons.c" line="68"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/sysdev/xilinx_intc.c" file="powerpc\sysdev\xilinx_intc.c" line="80"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/sysdev/xilinx_intc.c" file="powerpc\sysdev\xilinx_intc.c" line="96"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/sysdev/xilinx_intc.c" file="powerpc\sysdev\xilinx_intc.c" line="102"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/sysdev/xilinx_intc.c" file="powerpc\sysdev\xilinx_intc.c" line="122"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/sysdev/xilinx_intc.c" file="powerpc\sysdev\xilinx_intc.c" line="130"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="powerpc/sysdev/xilinx_intc.c" file="powerpc\sysdev\xilinx_intc.c" line="233"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hwirq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hwirq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/sysdev/ge/ge_pic.c" file="powerpc\sysdev\ge\ge_pic.c" line="246"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/nonstdio.c" file="powerpc\xmon\nonstdio.c" line="120"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/nonstdio.c" file="powerpc\xmon\nonstdio.c" line="196"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/spu-dis.c" file="powerpc\xmon\spu-dis.c" line="116"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hex_value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hex_value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/spu-dis.c" file="powerpc\xmon\spu-dis.c" line="117"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="1059"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;stepped&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;stepped&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="1265"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="1513"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="1759"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="2139"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="2369"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;q&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;q&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="2369"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="2416"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;q&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;q&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="2416"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;inc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;inc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="2561"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nslash&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nslash&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="2561"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="2825"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="2825"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="3107"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="3107"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="3182"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;inst&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;inst&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="3184"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ok&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ok&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="3447"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lrat&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lrat&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4044"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4185"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4186"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4187"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4189"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4190"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4191"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4192"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4193"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4194"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4195"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4203"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4204"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4205"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4206"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4207"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="4208"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;last_speaker&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;last_speaker&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="380"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="381"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;first_cpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;first_cpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="1321"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;last_cpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;last_cpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="powerpc/xmon/xmon.c" file="powerpc\xmon\xmon.c" line="1321"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ops&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ops&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/appldata/appldata_base.c" file="s390\appldata\appldata_base.c" line="128"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ops&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ops&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/appldata/appldata_base.c" file="s390\appldata\appldata_base.c" line="545"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ops&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ops&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/appldata/appldata_base.c" file="s390\appldata\appldata_base.c" line="581"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/appldata/appldata_os.c" file="s390\appldata\appldata_os.c" line="102"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/boot/compressed/misc.c" file="s390\boot\compressed\misc.c" line="152"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;start&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/boot/compressed/misc.c" file="s390\boot\compressed\misc.c" line="152"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/crypto/aes_s390.c" file="s390\crypto\aes_s390.c" line="265"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/crypto/aes_s390.c" file="s390\crypto\aes_s390.c" line="392"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/crypto/aes_s390.c" file="s390\crypto\aes_s390.c" line="569"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ctrptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ctrptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/crypto/aes_s390.c" file="s390\crypto\aes_s390.c" line="738"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/crypto/aes_s390.c" file="s390\crypto\aes_s390.c" line="739"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: xts_param" verbose="Uninitialized variable: xts_param">
            <location file0="s390/crypto/aes_s390.c" file="s390\crypto\aes_s390.c" line="594"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/crypto/des_s390.c" file="s390\crypto\des_s390.c" line="95"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/crypto/des_s390.c" file="s390\crypto\des_s390.c" line="116"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ctrptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ctrptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/crypto/des_s390.c" file="s390\crypto\des_s390.c" line="397"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/crypto/des_s390.c" file="s390\crypto\des_s390.c" line="398"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/crypto/prng.c" file="s390\crypto\prng.c" line="471"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;chunk&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;chunk&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/crypto/prng.c" file="s390\crypto\prng.c" line="515"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/crypto/prng.c" file="s390\crypto\prng.c" line="515"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/hypfs/hypfs_diag.c" file="s390\hypfs\hypfs_diag.c" line="544"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;page_align_ptr(base+sizeof(d204.hdr))&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;page_align_ptr(base+sizeof(d204.hdr))&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/hypfs/hypfs_diag.c" file="s390\hypfs\hypfs_diag.c" line="544"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;part_hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;part_hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/hypfs/hypfs_diag.c" file="s390\hypfs\hypfs_diag.c" line="685"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;cpu_info&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;cpu_info&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/hypfs/hypfs_diag.c" file="s390\hypfs\hypfs_diag.c" line="697"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;phys_hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;phys_hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/hypfs/hypfs_diag.c" file="s390\hypfs\hypfs_diag.c" line="744"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;cpu_info&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;cpu_info&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/hypfs/hypfs_diag.c" file="s390\hypfs\hypfs_diag.c" line="756"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;time_hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;time_hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/hypfs/hypfs_diag.c" file="s390\hypfs\hypfs_diag.c" line="785"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;residual_cnt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;residual_cnt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/hypfs/hypfs_vm.c" file="s390\hypfs\hypfs_vm.c" line="60"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/hypfs/hypfs_vm.c" file="s390\hypfs\hypfs_vm.c" line="113"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cache&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cache&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/cache.c" file="s390\kernel\cache.c" line="78"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pvt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pvt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/cache.c" file="s390\kernel\cache.c" line="197"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __user*)frame&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __user*)frame&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/compat_signal.c" file="s390\kernel\compat_signal.c" line="539"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __user*)frame+frame_size&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __user*)frame+frame_size&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/compat_signal.c" file="s390\kernel\compat_signal.c" line="539"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;response_len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;response_len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/cpcmd.c" file="s390\kernel\cpcmd.c" line="67"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lowbuf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lowbuf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/cpcmd.c" file="s390\kernel\cpcmd.c" line="99"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file0="s390/kernel/crash_dump.c" file="s390\kernel\crash_dump.c" line="603"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;from&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;from&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/crash_dump.c" file="s390\kernel\crash_dump.c" line="143"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;from&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;from&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/crash_dump.c" file="s390\kernel\crash_dump.c" line="209"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;size_old&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;size_old&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/crash_dump.c" file="s390\kernel\crash_dump.c" line="299"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/crash_dump.c" file="s390\kernel\crash_dump.c" line="300"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;size_hsa&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;size_hsa&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/crash_dump.c" file="s390\kernel\crash_dump.c" line="334"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/crash_dump.c" file="s390\kernel\crash_dump.c" line="196"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/crash_dump.c" file="s390\kernel\crash_dump.c" line="197"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/crash_dump.c" file="s390\kernel\crash_dump.c" line="253"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/crash_dump.c" file="s390\kernel\crash_dump.c" line="254"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)(pfn&amp;lt;&amp;lt;PAGE_SHIFT)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)(pfn&amp;lt;&amp;lt;PAGE_SHIFT)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/crash_dump.c" file="s390\kernel\crash_dump.c" line="275"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/crash_dump.c" file="s390\kernel\crash_dump.c" line="400"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/crash_dump.c" file="s390\kernel\crash_dump.c" line="403"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/crash_dump.c" file="s390\kernel\crash_dump.c" line="486"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/crash_dump.c" file="s390\kernel\crash_dump.c" line="499"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/debug.c" file="s390\kernel\debug.c" line="505"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/debug.c" file="s390\kernel\debug.c" line="1674"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prec&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prec&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/diag.c" file="s390\kernel\diag.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/diag.c" file="s390\kernel\diag.c" line="55"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="s390/kernel/dis.c" file="s390\kernel\dis.c" line="2021"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="s390/kernel/dis.c" file="s390\kernel\dis.c" line="2025"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="s390/kernel/dis.c" file="s390\kernel\dis.c" line="2029"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="s390/kernel/dis.c" file="s390\kernel\dis.c" line="2033"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="s390/kernel/dis.c" file="s390\kernel\dis.c" line="2037"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%i in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="s390/kernel/dis.c" file="s390\kernel\dis.c" line="2044"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ops&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ops&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/dis.c" file="s390\kernel\dis.c" line="1973"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;operand&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;operand&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/dis.c" file="s390\kernel\dis.c" line="1974"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/dis.c" file="s390\kernel\dis.c" line="1975"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;separator&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;separator&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/dis.c" file="s390\kernel\dis.c" line="1976"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/dis.c" file="s390\kernel\dis.c" line="1978"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;opsize&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;opsize&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/dis.c" file="s390\kernel\dis.c" line="2081"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/dis.c" file="s390\kernel\dis.c" line="2195"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;opsize&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;opsize&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/dis.c" file="s390\kernel\dis.c" line="2196"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PAGE_DEFAULT_KEY&amp;#039; since the value of &amp;#039;PAGE_DEFAULT_KEY&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PAGE_DEFAULT_KEY&amp;#039; since the value of &amp;#039;PAGE_DEFAULT_KEY&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="s390\kernel\early.c" line="229"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%lld in format string (no. 1) requires &amp;#039;long long *&amp;#039; but the argument type is &amp;#039;unsigned long long *&amp;#039;." verbose="%lld in format string (no. 1) requires &amp;#039;long long *&amp;#039; but the argument type is &amp;#039;unsigned long long *&amp;#039;.">
            <location file0="s390/kernel/ipl.c" file="s390\kernel\ipl.c" line="876"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%lld in format string (no. 1) requires &amp;#039;long long *&amp;#039; but the argument type is &amp;#039;unsigned long long *&amp;#039;." verbose="%lld in format string (no. 1) requires &amp;#039;long long *&amp;#039; but the argument type is &amp;#039;unsigned long long *&amp;#039;.">
            <location file0="s390/kernel/ipl.c" file="s390\kernel\ipl.c" line="878"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%lld in format string (no. 1) requires &amp;#039;long long *&amp;#039; but the argument type is &amp;#039;unsigned long long *&amp;#039;." verbose="%lld in format string (no. 1) requires &amp;#039;long long *&amp;#039; but the argument type is &amp;#039;unsigned long long *&amp;#039;.">
            <location file0="s390/kernel/ipl.c" file="s390\kernel\ipl.c" line="1636"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%lld in format string (no. 1) requires &amp;#039;long long *&amp;#039; but the argument type is &amp;#039;unsigned long long *&amp;#039;." verbose="%lld in format string (no. 1) requires &amp;#039;long long *&amp;#039; but the argument type is &amp;#039;unsigned long long *&amp;#039;.">
            <location file0="s390/kernel/ipl.c" file="s390\kernel\ipl.c" line="1638"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/ipl.c" file="s390\kernel\ipl.c" line="344"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;has_lowercase&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;has_lowercase&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/ipl.c" file="s390\kernel\ipl.c" line="346"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;padding&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;padding&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/ipl.c" file="s390\kernel\ipl.c" line="838"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;kcb.kprobe_status&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;kcb.kprobe_status&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="s390/kernel/kprobes.c" file="s390\kernel\kprobes.c" line="232"/>
            <location file0="s390/kernel/kprobes.c" file="s390\kernel\kprobes.c" line="234"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;umax&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;umax&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/module.c" file="s390\kernel\module.c" line="211"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;min&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;min&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/module.c" file="s390\kernel\module.c" line="212"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;max&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;max&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/module.c" file="s390\kernel\module.c" line="212"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/module.c" file="s390\kernel\module.c" line="548"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/module.c" file="s390\kernel\module.c" line="160"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/module.c" file="s390\kernel\module.c" line="161"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/module.c" file="s390\kernel\module.c" line="190"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hwc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hwc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/perf_cpum_sf.c" file="s390\kernel\perf_cpum_sf.c" line="1038"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;return_address&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;return_address&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/process.c" file="s390\kernel\process.c" line="225"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)*pos&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)*pos&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/processor.c" file="s390\kernel\processor.c" line="187"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/ptrace.c" file="s390\kernel\ptrace.c" line="1382"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;restart_stack&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;restart_stack&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/setup.c" file="s390\kernel\setup.c" line="413"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SCLP_CONSOLE;CONFIG_SCLP_VT220_CONSOLE&amp;#039; since the value of &amp;#039;CONFIG_SCLP_CONSOLE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SCLP_CONSOLE;CONFIG_SCLP_VT220_CONSOLE&amp;#039; since the value of &amp;#039;CONFIG_SCLP_CONSOLE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="s390\kernel\setup.c" line="243"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SCLP_CONSOLE;CONFIG_SCLP_VT220_CONSOLE&amp;#039; since the value of &amp;#039;CONFIG_SCLP_VT220_CONSOLE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SCLP_CONSOLE;CONFIG_SCLP_VT220_CONSOLE&amp;#039; since the value of &amp;#039;CONFIG_SCLP_VT220_CONSOLE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="s390\kernel\setup.c" line="239"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/signal.c" file="s390\kernel\signal.c" line="194"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/signal.c" file="s390\kernel\signal.c" line="221"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __user*)frame&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __user*)frame&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/signal.c" file="s390\kernel\signal.c" line="416"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __user*)frame+frame_size&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __user*)frame+frame_size&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/signal.c" file="s390\kernel\signal.c" line="416"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/smp.c" file="s390\kernel\smp.c" line="118"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;address&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;address&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/smp.c" file="s390\kernel\smp.c" line="806"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used.">
            <location file0="s390/kernel/smp.c" file="s390\kernel\smp.c" line="157"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/sysinfo.c" file="s390\kernel\sysinfo.c" line="65"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;topo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;topo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kernel/topology.c" file="s390\kernel\topology.c" line="272"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/uprobes.c" file="s390\kernel\uprobes.c" line="303"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso64_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso64_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/vdso.c" file="s390\kernel\vdso.c" line="348"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso32_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso32_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kernel/vdso.c" file="s390\kernel\vdso.c" line="327"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;authority_table_addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;authority_table_addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="456"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;eax&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;eax&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="458"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;_len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;_len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="1119"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gpa&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gpa&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="1119"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;_len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;_len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="1196"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gpa&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gpa&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="1196"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;currlen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;currlen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="1281"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="1177"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="1215"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;region3_table_entry_fc1::av&amp;#039; is never used." verbose="struct member &amp;#039;region3_table_entry_fc1::av&amp;#039; is never used.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="94"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;region3_table_entry_fc1::acc&amp;#039; is never used." verbose="struct member &amp;#039;region3_table_entry_fc1::acc&amp;#039; is never used.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="95"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;region3_table_entry_fc1::f&amp;#039; is never used." verbose="struct member &amp;#039;region3_table_entry_fc1::f&amp;#039; is never used.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="96"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;segment_entry_fc1::av&amp;#039; is never used." verbose="struct member &amp;#039;segment_entry_fc1::av&amp;#039; is never used.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="140"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;segment_entry_fc1::acc&amp;#039; is never used." verbose="struct member &amp;#039;segment_entry_fc1::acc&amp;#039; is never used.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="141"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;segment_entry_fc1::f&amp;#039; is never used." verbose="struct member &amp;#039;segment_entry_fc1::f&amp;#039; is never used.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="142"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;vaddress::bx&amp;#039; is never used." verbose="union member &amp;#039;vaddress::bx&amp;#039; is never used.">
            <location file0="s390/kvm/gaccess.c" file="s390\kvm\gaccess.c" line="206"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses.">
            <location file0="s390/kvm/guestdbg.c" file="s390\kvm\guestdbg.c" line="651"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/guestdbg.c" file="s390\kvm\guestdbg.c" line="89"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/guestdbg.c" file="s390\kvm\guestdbg.c" line="89"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/guestdbg.c" file="s390\kvm\guestdbg.c" line="138"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/guestdbg.c" file="s390\kvm\guestdbg.c" line="138"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/guestdbg.c" file="s390\kvm\guestdbg.c" line="142"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hw_wp_info&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hw_wp_info&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/guestdbg.c" file="s390\kvm\guestdbg.c" line="365"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;wp_info&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;wp_info&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/guestdbg.c" file="s390\kvm\guestdbg.c" line="435"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;new_as&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;new_as&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/guestdbg.c" file="s390\kvm\guestdbg.c" line="626"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/intercept.c" file="s390\kvm\intercept.c" line="98"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/interrupt.c" file="s390\kvm\interrupt.c" line="1457"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nr_tries&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nr_tries&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/interrupt.c" file="s390\kvm\interrupt.c" line="1768"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cpuaddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cpuaddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/interrupt.c" file="s390\kvm\interrupt.c" line="2946"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;address&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;address&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/kvm-s390.c" file="s390\kvm\kvm-s390.c" line="482"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hva&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hva&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/kvm-s390.c" file="s390\kvm\kvm-s390.c" line="1395"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/kvm-s390.c" file="s390\kvm\kvm-s390.c" line="1703"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prefix&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prefix&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/kvm-s390.c" file="s390\kvm\kvm-s390.c" line="2702"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;exit_reason&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;exit_reason&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/kvm-s390.c" file="s390\kvm\kvm-s390.c" line="3418"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dest_vcpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dest_vcpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/sigp.c" file="s390\kvm\sigp.c" line="573"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;diag224_buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;diag224_buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kvm/sthyi.c" file="s390\kvm\sthyi.c" line="159"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;diag204_buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;diag204_buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kvm/sthyi.c" file="s390\kvm\sthyi.c" line="388"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;diag204_buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;diag204_buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/kvm/sthyi.c" file="s390\kvm\sthyi.c" line="404"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;page&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;page&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/vsie.c" file="s390\kvm\vsie.c" line="443"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vsie_page&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vsie_page&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/vsie.c" file="s390\kvm\vsie.c" line="1386"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;page&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;page&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/kvm/vsie.c" file="s390\kvm\vsie.c" line="1387"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;owner&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;owner&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/lib/spinlock.c" file="s390\lib\spinlock.c" line="61"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;owner&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;owner&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/lib/spinlock.c" file="s390\lib\spinlock.c" line="125"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;owner&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;owner&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/lib/spinlock.c" file="s390\lib\spinlock.c" line="193"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/lib/spinlock.c" file="s390\lib\spinlock.c" line="220"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/lib/spinlock.c" file="s390\lib\spinlock.c" line="263"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/lib/spinlock.c" file="s390\lib\spinlock.c" line="338"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/lib/spinlock.c" file="s390\lib\spinlock.c" line="386"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/lib/spinlock.c" file="s390\lib\spinlock.c" line="294"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;s&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;s&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/lib/string.c" file="s390\lib\string.c" line="318"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;s&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;s&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/lib/string.c" file="s390\lib\string.c" line="363"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/lib/uaccess.c" file="s390\lib\uaccess.c" line="373"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/cmm.c" file="s390\mm\cmm.c" line="68"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/cmm.c" file="s390\mm\cmm.c" line="124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/cmm.c" file="s390\mm\cmm.c" line="180"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/cmm.c" file="s390\mm\cmm.c" line="392"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;seconds&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;seconds&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/cmm.c" file="s390\mm\cmm.c" line="392"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;.&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;.&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="s390/mm/cmm.c" file="s390\mm\cmm.c" line="131"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/dump_pagetables.c" file="s390\mm\dump_pagetables.c" line="129"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/dump_pagetables.c" file="s390\mm\dump_pagetables.c" line="130"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/dump_pagetables.c" file="s390\mm\dump_pagetables.c" line="147"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pud&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pud&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/dump_pagetables.c" file="s390\mm\dump_pagetables.c" line="180"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pgd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pgd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/dump_pagetables.c" file="s390\mm\dump_pagetables.c" line="211"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="s390/mm/dump_pagetables.c" file="s390\mm\dump_pagetables.c" line="59"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/extmem.c" file="s390\mm\extmem.c" line="442"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tsk&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tsk&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/fault.c" file="s390\mm\fault.c" line="982"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;next&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;next&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="292"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flush&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flush&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="622"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="817"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vmaddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vmaddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="841"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="1131"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="1132"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vmaddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vmaddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="1221"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="1223"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vmaddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vmaddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="1319"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="1321"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="1322"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vmaddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vmaddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="2463"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;paddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;paddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="2463"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sptep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sptep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="2465"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="2560"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;raddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;raddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="2560"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)from&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)from&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="545"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;asce&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;asce&amp;#039; is assigned a value that is never used.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="1508"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;asce&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;asce&amp;#039; is assigned a value that is never used.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="1575"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;asce&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;asce&amp;#039; is assigned a value that is never used.">
            <location file0="s390/mm/gmap.c" file="s390\mm\gmap.c" line="1642"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;head&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;head&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/gup.c" file="s390\mm\gup.c" line="23"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;ptep++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;ptep++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="s390/mm/gup.c" file="s390\mm\gup.c" line="67"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="s390/mm/gup.c" file="s390\mm\gup.c" line="101"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pmdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pmdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="s390/mm/gup.c" file="s390\mm\gup.c" line="175"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="s390/mm/gup.c" file="s390\mm\gup.c" line="208"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pudp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pudp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="s390/mm/gup.c" file="s390\mm\gup.c" line="271"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="s390/mm/gup.c" file="s390\mm\gup.c" line="325"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pudp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pudp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/hugetlbpage.c" file="s390\mm\hugetlbpage.c" line="205"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/maccess.c" file="s390\mm\maccess.c" line="198"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/maccess.c" file="s390\mm\maccess.c" line="229"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/mm/maccess.c" file="s390\mm\maccess.c" line="174"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/mm/maccess.c" file="s390\mm\maccess.c" line="179"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/mmap.c" file="s390\mm\mmap.c" line="105"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/mmap.c" file="s390\mm\mmap.c" line="153"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/mmap.c" file="s390\mm\mmap.c" line="243"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/mmap.c" file="s390\mm\mmap.c" line="275"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;table&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;table&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/pageattr.c" file="s390\mm\pageattr.c" line="71"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;next&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;next&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/pageattr.c" file="s390\mm\pageattr.c" line="196"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;next&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;next&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/pageattr.c" file="s390\mm\pageattr.c" line="298"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgdp++,addr=next,addr&amp;lt;end&amp;amp;&amp;amp;!rc&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgdp++,addr=next,addr&amp;lt;end&amp;amp;&amp;amp;!rc&amp;#039; depends on order of evaluation of side effects">
            <location file0="s390/mm/pageattr.c" file="s390\mm\pageattr.c" line="382"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;address&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;address&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/pageattr.c" file="s390\mm\pageattr.c" line="443"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/pageattr.c" file="s390\mm\pageattr.c" line="444"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pgd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pgd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/pageattr.c" file="s390\mm\pageattr.c" line="445"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pud&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pud&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/pageattr.c" file="s390\mm\pageattr.c" line="446"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/pageattr.c" file="s390\mm\pageattr.c" line="447"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/pageattr.c" file="s390\mm\pageattr.c" line="448"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mask&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mask&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/pgalloc.c" file="s390\mm\pgalloc.c" line="189"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/pgalloc.c" file="s390\mm\pgalloc.c" line="189"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/pgalloc.c" file="s390\mm\pgalloc.c" line="267"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mask&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mask&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/pgalloc.c" file="s390\mm\pgalloc.c" line="267"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;table&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;table&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/pgalloc.c" file="s390\mm\pgalloc.c" line="161"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses.">
            <location file0="s390/mm/pgtable.c" file="s390\mm\pgtable.c" line="842"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;cc&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;cc&amp;#039; is assigned a value that is never used.">
            <location file0="s390/mm/pgtable.c" file="s390\mm\pgtable.c" line="908"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pg_dir&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pg_dir&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/mm/vmem.c" file="s390\mm\vmem.c" line="199"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/net/bpf_jit_comp.c" file="s390\net\bpf_jit_comp.c" line="395"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/numa/mode_emu.c" file="s390\numa\mode_emu.c" line="249"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cores_free&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cores_free&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/numa/mode_emu.c" file="s390\numa\mode_emu.c" line="271"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/numa/mode_emu.c" file="s390\numa\mode_emu.c" line="409"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;drawer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;drawer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/numa/mode_emu.c" file="s390\numa\mode_emu.c" line="409"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;book&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;book&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/numa/mode_emu.c" file="s390\numa\mode_emu.c" line="409"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/numa/mode_emu.c" file="s390\numa\mode_emu.c" line="409"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;top&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;top&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/numa/mode_emu.c" file="s390\numa\mode_emu.c" line="410"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmpchild&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmpchild&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/numa/toptree.c" file="s390\numa\toptree.c" line="175"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/numa/toptree.c" file="s390\numa\toptree.c" line="210"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/numa/toptree.c" file="s390\numa\toptree.c" line="280"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/numa/toptree.c" file="s390\numa\toptree.c" line="280"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;res&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;res&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/pci/pci.c" file="s390\pci\pci.c" line="766"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)ZPCI_ADDR(idx)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)ZPCI_ADDR(idx)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="s390/pci/pci.c" file="s390\pci\pci.c" line="305"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;exists&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;exists&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/pci/pci_clp.c" file="s390\pci\pci_clp.c" line="702"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/tools/gen_facilities.c" file="s390\tools\gen_facilities.c" line="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dword&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dword&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="s390/tools/gen_facilities.c" file="s390\tools\gen_facilities.c" line="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ti&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ti&amp;#039; is assigned a value that is never used.">
            <location file0="score/kernel/process.c" file="score\kernel\process.c" line="72"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;regs&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;regs&amp;#039; is assigned a value that is never used.">
            <location file0="score/kernel/process.c" file="score\kernel\process.c" line="74"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="score/kernel/ptrace.c" file="score\kernel\ptrace.c" line="46"/>
            <location file0="score/kernel/ptrace.c" file="score\kernel\ptrace.c" line="50"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="score/kernel/ptrace.c" file="score\kernel\ptrace.c" line="74"/>
            <location file0="score/kernel/ptrace.c" file="score\kernel\ptrace.c" line="78"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="score/mm/cache.c" file="score\mm\cache.c" line="88"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MODULE_START&amp;#039; since the value of &amp;#039;MODULE_START&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MODULE_START&amp;#039; since the value of &amp;#039;MODULE_START&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="score\mm\fault.c" line="73"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/boards/mach-cayman/irq.c" file="sh\boards\mach-cayman\irq.c" line="108"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/boards/mach-cayman/irq.c" file="sh\boards\mach-cayman\irq.c" line="134"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nibble&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nibble&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/boards/mach-cayman/panic.c" file="sh\boards\mach-cayman\panic.c" line="29"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;backup&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;backup&amp;#039; is assigned a value that is never used.">
            <location file0="sh/boards/mach-hp6xx/hp6xx_apm.c" file="sh\boards\mach-hp6xx\hp6xx_apm.c" line="38"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)3017801728&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)3017801728&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/boards/mach-r2d/setup.c" file="sh\boards\mach-r2d\setup.c" line="323"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="sh/boards/mach-sdk7786/setup.c" file="sh\boards\mach-sdk7786\setup.c" line="231"/>
            <location file0="sh/boards/mach-sdk7786/setup.c" file="sh\boards\mach-sdk7786\setup.c" line="237"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;&amp;#039; was not checked because its code equals another one.">
            <location file="sh\drivers\push-switch.c" line="0"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error">
            <location file0="sh/drivers/push-switch.c" file="sh\drivers\push-switch.c" line="27"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;channel&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;channel&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="sh/drivers/dma/dma-api.c" file="sh\drivers\dma\dma-api.c" line="239"/>
            <location file0="sh/drivers/dma/dma-api.c" file="sh\drivers\dma\dma-api.c" line="243"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;channel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;channel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/drivers/dma/dma-api.c" file="sh\drivers\dma\dma-api.c" line="89"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;result&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;result&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/drivers/dma/dma-api.c" file="sh\drivers\dma\dma-api.c" line="241"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;g2_channel::xfer_stat&amp;#039; is never used." verbose="struct member &amp;#039;g2_channel::xfer_stat&amp;#039; is never used.">
            <location file0="sh/drivers/dma/dma-g2.c" file="sh\drivers\dma\dma-g2.c" line="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/drivers/dma/dma-sh.c" file="sh\drivers\dma\dma-sh.c" line="181"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/drivers/dma/dma-sh.c" file="sh\drivers\dma\dma-sh.c" line="203"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_CPU_SH4;DMAE1_IRQ&amp;#039; since the value of &amp;#039;DMAE1_IRQ&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_CPU_SH4;DMAE1_IRQ&amp;#039; since the value of &amp;#039;DMAE1_IRQ&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="sh\drivers\dma\dma-sh.c" line="345"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;DMTE4_IRQ&amp;#039; since the value of &amp;#039;DMTE4_IRQ&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;DMTE4_IRQ&amp;#039; since the value of &amp;#039;DMTE4_IRQ&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="sh\drivers\dma\dma-sh.c" line="76"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;DMTE6_IRQ&amp;#039; since the value of &amp;#039;DMTE6_IRQ&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;DMTE6_IRQ&amp;#039; since the value of &amp;#039;DMTE6_IRQ&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="sh\drivers\dma\dma-sh.c" line="80"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;DMTE8_IRQ&amp;#039; since the value of &amp;#039;DMTE8_IRQ&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;DMTE8_IRQ&amp;#039; since the value of &amp;#039;DMTE8_IRQ&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="sh\drivers\dma\dma-sh.c" line="84"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;SH_DMAC_BASE1&amp;#039; since the value of &amp;#039;SH_DMAC_BASE1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;SH_DMAC_BASE1&amp;#039; since the value of &amp;#039;SH_DMAC_BASE1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="sh\drivers\dma\dma-sh.c" line="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/drivers/dma/dmabrg.c" file="sh\drivers\dma\dmabrg.c" line="89"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;res&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;res&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/drivers/pci/pci.c" file="sh\drivers\pci\pci.c" line="40"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/crash_dump.c" file="sh\kernel\crash_dump.c" line="39"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/crash_dump.c" file="sh\kernel\crash_dump.c" line="47"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/dumpstack.c" file="sh\kernel\dumpstack.c" line="33"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;cie.cie_pointer&amp;gt;=cie_tmp.cie_pointer&amp;#039; is always true" verbose="Condition &amp;#039;cie.cie_pointer&amp;gt;=cie_tmp.cie_pointer&amp;#039; is always true">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="953"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="157"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;insn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;insn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="451"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting a negative value is undefined behaviour" verbose="Shifting a negative value is undefined behaviour">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="222"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="848"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="852"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="855"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="858"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="867"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="872"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="881"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="885"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="897"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="907"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="1018"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="1028"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="1034"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="1200"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="1204"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="1207"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;end&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;end&amp;#039; is assigned a value that is never used.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="1053"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="1253"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/dwarf.c" file="sh\kernel\dwarf.c" line="1255"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/io.c" file="sh\kernel\io.c" line="68"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/io.c" file="sh\kernel\io.c" line="69"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/io.c" file="sh\kernel\io.c" line="76"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/io.c" file="sh\kernel\io.c" line="77"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/io.c" file="sh\kernel\io.c" line="94"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/io.c" file="sh\kernel\io.c" line="95"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/io.c" file="sh\kernel\io.c" line="102"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/io.c" file="sh\kernel\io.c" line="103"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/io.c" file="sh\kernel\io.c" line="120"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;res&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;res&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/io_trapped.c" file="sh\kernel\io_trapped.c" line="206"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/io_trapped.c" file="sh\kernel\io_trapped.c" line="208"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="sh/kernel/io_trapped.c" file="sh\kernel\io_trapped.c" line="101"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/kgdb.c" file="sh\kernel\kgdb.c" line="238"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/kgdb.c" file="sh\kernel\kgdb.c" line="252"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/module.c" file="sh\kernel\module.c" line="47"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/module.c" file="sh\kernel\module.c" line="57"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;addr&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;addr&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="sh/kernel/ptrace_32.c" file="sh\kernel\ptrace_32.c" line="411"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;addr&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;addr&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="sh/kernel/ptrace_32.c" file="sh\kernel\ptrace_32.c" line="482"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="sh/kernel/ptrace_32.c" file="sh\kernel\ptrace_32.c" line="297"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;addr&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;addr&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="sh/kernel/ptrace_64.c" file="sh\kernel\ptrace_64.c" line="421"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;addr&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;addr&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="sh/kernel/ptrace_64.c" file="sh\kernel\ptrace_64.c" line="464"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;current_sr&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;current_sr&amp;#039; is assigned a value that is never used.">
            <location file0="sh/kernel/signal_64.c" file="sh\kernel\signal_64.c" line="256"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: signal" verbose="Unused variable: signal">
            <location file0="sh/kernel/signal_64.c" file="sh\kernel\signal_64.c" line="420"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/unwinder.c" file="sh\kernel\unwinder.c" line="153"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;csr&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;csr&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="sh/kernel/cpu/adc.c" file="sh\kernel\cpu\adc.c" line="21"/>
            <location file0="sh/kernel/cpu/adc.c" file="sh\kernel\cpu\adc.c" line="22"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CCR_CACHE_EMODE;CONFIG_SUPERH32&amp;#039; since the value of &amp;#039;CCR_CACHE_EMODE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CCR_CACHE_EMODE;CONFIG_SUPERH32&amp;#039; since the value of &amp;#039;CCR_CACHE_EMODE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="sh\kernel\cpu\init.c" line="152"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CCR_CACHE_EMODE;CONFIG_SUPERH32&amp;#039; since the value of &amp;#039;CCR_CACHE_EMODE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CCR_CACHE_EMODE;CONFIG_SUPERH32&amp;#039; since the value of &amp;#039;CCR_CACHE_EMODE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="sh\kernel\cpu\init.c" line="189"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CCR_CACHE_EMODE;CONFIG_SUPERH32&amp;#039; since the value of &amp;#039;CCR_CACHE_EMODE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CCR_CACHE_EMODE;CONFIG_SUPERH32&amp;#039; since the value of &amp;#039;CCR_CACHE_EMODE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="sh\kernel\cpu\init.c" line="193"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CCR_CACHE_ORA;CONFIG_SUPERH32&amp;#039; since the value of &amp;#039;CCR_CACHE_ORA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CCR_CACHE_ORA;CONFIG_SUPERH32&amp;#039; since the value of &amp;#039;CCR_CACHE_ORA&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="sh\kernel\cpu\init.c" line="140"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;du&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;du&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/cpu/sh2a/fpu.c" file="sh\kernel\cpu\sh2a\fpu.c" line="494"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dl&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dl&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/cpu/sh2a/fpu.c" file="sh\kernel\cpu\sh2a\fpu.c" line="494"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;exp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;exp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/cpu/sh2a/fpu.c" file="sh\kernel\cpu\sh2a\fpu.c" line="496"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;du&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;du&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/cpu/sh4/fpu.c" file="sh\kernel\cpu\sh4\fpu.c" line="152"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dl&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dl&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/cpu/sh4/fpu.c" file="sh\kernel\cpu\sh4\fpu.c" line="152"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;exp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;exp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/cpu/sh4/fpu.c" file="sh\kernel\cpu\sh4\fpu.c" line="154"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;isTiny&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;isTiny&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/cpu/sh4/softfloat.c" file="sh\kernel\cpu\sh4\softfloat.c" line="444"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;isTiny&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;isTiny&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/cpu/sh4/softfloat.c" file="sh\kernel\cpu\sh4\softfloat.c" line="514"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;b1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;b1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/cpu/sh4/softfloat.c" file="sh\kernel\cpu\sh4\softfloat.c" line="848"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="sh/kernel/cpu/sh4a/intc-shx3.c" file="sh\kernel\cpu\sh4a\intc-shx3.c" line="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/kernel/cpu/sh4a/serial-sh7722.c" file="sh\kernel\cpu\sh4a\serial-sh7722.c" line="9"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/cpu/shmobile/pm.c" file="sh\kernel\cpu\shmobile\pm.c" line="110"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/cpu/shmobile/pm.c" file="sh\kernel\cpu\shmobile\pm.c" line="116"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/cpu/shmobile/pm.c" file="sh\kernel\cpu\shmobile\pm.c" line="122"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;onchip_mem&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;onchip_mem&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/cpu/shmobile/pm.c" file="sh\kernel\cpu\shmobile\pm.c" line="125"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;onchip_mem&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;onchip_mem&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sh/kernel/cpu/shmobile/pm.c" file="sh\kernel\cpu\shmobile\pm.c" line="126"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;du&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;du&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/math-emu/math.c" file="sh\math-emu\math.c" line="534"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dl&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dl&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/math-emu/math.c" file="sh\math-emu\math.c" line="534"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;exp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;exp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/math-emu/math.c" file="sh\math-emu\math.c" line="536"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mode&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mode&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/alignment.c" file="sh\mm\alignment.c" line="148"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="sh/mm/cache-debugfs.c" file="sh\mm\cache-debugfs.c" line="97"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/cache-sh2a.c" file="sh\mm\cache-sh2a.c" line="142"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/cache-sh2a.c" file="sh\mm\cache-sh2a.c" line="178"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;a&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;a&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/cache-sh4.c" file="sh\mm\cache-sh4.c" line="362"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ea&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ea&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/cache-sh4.c" file="sh\mm\cache-sh4.c" line="362"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/cache-sh4.c" file="sh\mm\cache-sh4.c" line="362"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;start&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;start&amp;#039; is assigned a value that is never used.">
            <location file0="sh/mm/cache-sh4.c" file="sh\mm\cache-sh4.c" line="316"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;end&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;end&amp;#039; is assigned a value that is never used.">
            <location file0="sh/mm/cache-sh4.c" file="sh\mm\cache-sh4.c" line="317"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;eaddr0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;eaddr0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/cache-sh5.c" file="sh\mm\cache-sh5.c" line="270"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;eaddr1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;eaddr1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/cache-sh5.c" file="sh\mm\cache-sh5.c" line="270"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;eaddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;eaddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/cache-sh5.c" file="sh\mm\cache-sh5.c" line="393"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;eaddr_end&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;eaddr_end&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/cache-sh5.c" file="sh\mm\cache-sh5.c" line="393"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pte++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pte++,addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="sh/mm/cache-sh5.c" file="sh\mm\cache-sh5.c" line="469"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;SH_CCR&amp;#039; since the value of &amp;#039;SH_CCR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;SH_CCR&amp;#039; since the value of &amp;#039;SH_CCR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="sh\mm\cache.c" line="339"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pmdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pmdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="sh/mm/gup.c" file="sh\mm\gup.c" line="164"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pudp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pudp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="sh/mm/gup.c" file="sh\mm\gup.c" line="193"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="sh/mm/gup.c" file="sh\mm\gup.c" line="246"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="sh/mm/gup.c" file="sh\mm\gup.c" line="308"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pud&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pud&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/hugetlbpage.c" file="sh\mm\hugetlbpage.c" line="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/hugetlbpage.c" file="sh\mm\hugetlbpage.c" line="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pud&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pud&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/hugetlbpage.c" file="sh\mm\hugetlbpage.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/hugetlbpage.c" file="sh\mm\hugetlbpage.c" line="56"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;!pud&amp;#039; is redundant or there is possible null pointer dereference: pud." verbose="Either the condition &amp;#039;!pud&amp;#039; is redundant or there is possible null pointer dereference: pud.">
            <location file0="sh/mm/init.c" file="sh\mm\init.c" line="63"/>
            <location file0="sh/mm/init.c" file="sh\mm\init.c" line="61"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;!pmd&amp;#039; is redundant or there is possible null pointer dereference: pmd." verbose="Either the condition &amp;#039;!pmd&amp;#039; is redundant or there is possible null pointer dereference: pmd.">
            <location file0="sh/mm/init.c" file="sh\mm\init.c" line="71"/>
            <location file0="sh/mm/init.c" file="sh\mm\init.c" line="69"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/mmap.c" file="sh\mm\mmap.c" line="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/mmap.c" file="sh\mm\mmap.c" line="101"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;expevt_lookup::is_write_access&amp;#039; is never used." verbose="struct member &amp;#039;expevt_lookup::is_write_access&amp;#039; is never used.">
            <location file0="sh/mm/tlbex_64.c" file="sh\mm\tlbex_64.c" line="113"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sh/mm/tlbflush_64.c" file="sh\mm\tlbflush_64.c" line="73"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/boot/piggyback.c" file="sparc\boot\piggyback.c" line="176"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/btext.c" file="sparc\kernel\btext.c" line="174"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/btext.c" file="sparc\kernel\btext.c" line="303"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/btext.c" file="sparc\kernel\btext.c" line="324"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/btext.c" file="sparc\kernel\btext.c" line="342"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;new_index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;new_index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/cpumap.c" file="sparc\kernel\cpumap.c" line="384"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous3::all&amp;#039; is never used." verbose="union member &amp;#039;Anonymous3::all&amp;#039; is never used.">
            <location file0="sparc/kernel/ds.c" file="sparc\kernel\ds.c" line="877"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous4::all&amp;#039; is never used." verbose="union member &amp;#039;Anonymous4::all&amp;#039; is never used.">
            <location file0="sparc/kernel/ds.c" file="sparc\kernel\ds.c" line="877"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/ioport.c" file="sparc\kernel\ioport.c" line="633"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/ioport.c" file="sparc\kernel\ioport.c" line="634"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/ioport.c" file="sparc\kernel\ioport.c" line="682"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/ioport.c" file="sparc\kernel\ioport.c" line="683"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/ioport.c" file="sparc\kernel\ioport.c" line="697"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/ioport.c" file="sparc\kernel\ioport.c" line="698"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nm&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nm&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/ioport.c" file="sparc\kernel\ioport.c" line="754"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;len&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;len&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="sparc/kernel/ioport.c" file="sparc\kernel\ioport.c" line="298"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;len&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;len&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="sparc/kernel/ioport.c" file="sparc\kernel\ioport.c" line="404"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/kernel/irq_64.c" file="sparc\kernel\kstack.h" line="99"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/kernel/irq_64.c" file="sparc\kernel\kstack.h" line="101"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;sp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;sp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/kernel/irq_64.c" file="sparc\kernel\irq_64.c" line="963"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/kernel/ldc.c" file="sparc\kernel\ldc.c" line="1882"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/kernel/ldc.c" file="sparc\kernel\ldc.c" line="2192"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;has_io&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;has_io&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/leon_pci.c" file="sparc\kernel\leon_pci.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;has_mem&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;has_mem&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/leon_pci.c" file="sparc\kernel\leon_pci.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/leon_pci_grpci1.c" file="sparc\kernel\leon_pci_grpci1.c" line="413"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/leon_pci_grpci2.c" file="sparc\kernel\leon_pci_grpci2.c" line="556"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;grpci2_bd_chan::nchan&amp;#039; is never used." verbose="struct member &amp;#039;grpci2_bd_chan::nchan&amp;#039; is never used.">
            <location file0="sparc/kernel/leon_pci_grpci2.c" file="sparc\kernel\leon_pci_grpci2.c" line="148"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;grpci2_bd_chan::nbd&amp;#039; is never used." verbose="struct member &amp;#039;grpci2_bd_chan::nbd&amp;#039; is never used.">
            <location file0="sparc/kernel/leon_pci_grpci2.c" file="sparc\kernel\leon_pci_grpci2.c" line="149"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;grpci2_bd_chan::res&amp;#039; is never used." verbose="struct member &amp;#039;grpci2_bd_chan::res&amp;#039; is never used.">
            <location file0="sparc/kernel/leon_pci_grpci2.c" file="sparc\kernel\leon_pci_grpci2.c" line="150"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;grpci2_bd_data::pci_adr&amp;#039; is never used." verbose="struct member &amp;#039;grpci2_bd_data::pci_adr&amp;#039; is never used.">
            <location file0="sparc/kernel/leon_pci_grpci2.c" file="sparc\kernel\leon_pci_grpci2.c" line="163"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;grpci2_bd_data::ahb_adr&amp;#039; is never used." verbose="struct member &amp;#039;grpci2_bd_data::ahb_adr&amp;#039; is never used.">
            <location file0="sparc/kernel/leon_pci_grpci2.c" file="sparc\kernel\leon_pci_grpci2.c" line="164"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;grpci2_bd_data::next&amp;#039; is never used." verbose="struct member &amp;#039;grpci2_bd_data::next&amp;#039; is never used.">
            <location file0="sparc/kernel/leon_pci_grpci2.c" file="sparc\kernel\leon_pci_grpci2.c" line="165"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;grpci2_cap_first::pci2ahb_map&amp;#039; is never used." verbose="struct member &amp;#039;grpci2_cap_first::pci2ahb_map&amp;#039; is never used.">
            <location file0="sparc/kernel/leon_pci_grpci2.c" file="sparc\kernel\leon_pci_grpci2.c" line="185"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;grpci2_cap_first::ext2ahb_map&amp;#039; is never used." verbose="struct member &amp;#039;grpci2_cap_first::ext2ahb_map&amp;#039; is never used.">
            <location file0="sparc/kernel/leon_pci_grpci2.c" file="sparc\kernel\leon_pci_grpci2.c" line="186"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;grpci2_cap_first::pcibar_size&amp;#039; is never used." verbose="struct member &amp;#039;grpci2_cap_first::pcibar_size&amp;#039; is never used.">
            <location file0="sparc/kernel/leon_pci_grpci2.c" file="sparc\kernel\leon_pci_grpci2.c" line="188"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)node_block(mdesc)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)node_block(mdesc)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/kernel/mdesc.c" file="sparc\kernel\mdesc.c" line="432"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)name_block(mdesc)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)name_block(mdesc)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/kernel/mdesc.c" file="sparc\kernel\mdesc.c" line="437"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/kernel/mdesc.c" file="sparc\kernel\mdesc.c" line="515"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/module.c" file="sparc\kernel\module.c" line="105"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;loc32&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;loc32&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/module.c" file="sparc\kernel\module.c" line="106"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;strtab&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;strtab&amp;#039; is assigned a value that is never used.">
            <location file0="sparc/kernel/module.c" file="sparc\kernel\module.c" line="80"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/kernel/module.c" file="sparc\kernel\module.c" line="205"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/kernel/module.c" file="sparc\kernel\module.c" line="223"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/kernel/module.c" file="sparc\kernel\module.c" line="229"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/pci.c" file="sparc\kernel\pci.c" line="655"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/pci.c" file="sparc\kernel\pci.c" line="731"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pbm.msi_queues&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pbm.msi_queues&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/kernel/pci_fire.c" file="sparc\kernel\pci_fire.c" line="165"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;err&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;err&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="sparc/kernel/pci_psycho.c" file="sparc\kernel\pci_psycho.c" line="348"/>
            <location file0="sparc/kernel/pci_psycho.c" file="sparc\kernel\pci_psycho.c" line="350"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;err&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;err&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="sparc/kernel/pci_psycho.c" file="sparc\kernel\pci_psycho.c" line="350"/>
            <location file0="sparc/kernel/pci_psycho.c" file="sparc\kernel\pci_psycho.c" line="357"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/pci_schizo.c" file="sparc\kernel\pci_schizo.c" line="257"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;num&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;num&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/pci_sun4v.c" file="sparc\kernel\pci_sun4v.c" line="254"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/pci_sun4v.c" file="sparc\kernel\pci_sun4v.c" line="597"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pbm.msi_queues&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pbm.msi_queues&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/kernel/pci_sun4v.c" file="sparc\kernel\pci_sun4v.c" line="831"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/pcic.c" file="sparc\kernel\pcic.c" line="505"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;address&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;address&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/pcic.c" file="sparc\kernel\pcic.c" line="538"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/pcic.c" file="sparc\kernel\pcic.c" line="539"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;has_io&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;has_io&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/pcic.c" file="sparc\kernel\pcic.c" line="709"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;has_mem&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;has_mem&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/pcic.c" file="sparc\kernel\pcic.c" line="709"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/pcic.c" file="sparc\kernel\pcic.c" line="713"/>
        </error>
        <error id="truncLongCastReturn" severity="style" msg="int result is returned as long value. If the return value is long to avoid loss of information, then you have loss of information." verbose="int result is returned as long value. If the return value is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example &amp;#039;return a*b;&amp;#039; =&amp;gt; &amp;#039;return (long)a*b&amp;#039;.">
            <location file0="sparc/kernel/pcic.c" file="sparc\kernel\pcic.c" line="921"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: real_irq" verbose="Uninitialized variable: real_irq">
            <location file0="sparc/kernel/pcic.c" file="sparc\kernel\pcic.c" line="669"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/pcr.c" file="sparc\kernel\pcr.c" line="113"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;current_idx_dmy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;current_idx_dmy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/perf_event.c" file="sparc\kernel\perf_event.c" line="1584"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/process_32.c" file="sparc\kernel\process_32.c" line="161"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous0::pr_dregs&amp;#039; is never used." verbose="union member &amp;#039;Anonymous0::pr_dregs&amp;#039; is never used.">
            <location file0="sparc/kernel/process_64.c" file="sparc\kernel\process_64.c" line="818"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;irq_trans::init&amp;#039; is never used." verbose="struct member &amp;#039;irq_trans::init&amp;#039; is never used.">
            <location file0="sparc/kernel/prom_irqtrans.c" file="sparc\kernel\prom_irqtrans.c" line="841"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;fq::insnaddr&amp;#039; is never used." verbose="struct member &amp;#039;fq::insnaddr&amp;#039; is never used.">
            <location file0="sparc/kernel/ptrace_32.c" file="sparc\kernel\ptrace_32.c" line="418"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;fq::insn&amp;#039; is never used." verbose="struct member &amp;#039;fq::insn&amp;#039; is never used.">
            <location file0="sparc/kernel/ptrace_32.c" file="sparc\kernel\ptrace_32.c" line="419"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/ptrace_64.c" file="sparc\kernel\ptrace_64.c" line="1008"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;compat_fq::insnaddr&amp;#039; is never used." verbose="struct member &amp;#039;compat_fq::insnaddr&amp;#039; is never used.">
            <location file0="sparc/kernel/ptrace_64.c" file="sparc\kernel\ptrace_64.c" line="1097"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;compat_fq::insn&amp;#039; is never used." verbose="struct member &amp;#039;compat_fq::insn&amp;#039; is never used.">
            <location file0="sparc/kernel/ptrace_64.c" file="sparc\kernel\ptrace_64.c" line="1098"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/smp_64.c" file="sparc\kernel\smp_64.c" line="181"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/smp_64.c" file="sparc\kernel\smp_64.c" line="181"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tm&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tm&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/smp_64.c" file="sparc\kernel\smp_64.c" line="181"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/smp_64.c" file="sparc\kernel\smp_64.c" line="221"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;adj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;adj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/smp_64.c" file="sparc\kernel\smp_64.c" line="221"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;adjust_latency&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;adjust_latency&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/smp_64.c" file="sparc\kernel\smp_64.c" line="221"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;done&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;done&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/smp_64.c" file="sparc\kernel\smp_64.c" line="221"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/smp_64.c" file="sparc\kernel\smp_64.c" line="293"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/smp_64.c" file="sparc\kernel\smp_64.c" line="1735"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/sys_sparc_64.c" file="sparc\kernel\sys_sparc_64.c" line="96"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/sys_sparc_64.c" file="sparc\kernel\sys_sparc_64.c" line="176"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;afar&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;afar&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/traps_64.c" file="sparc\kernel\traps_64.c" line="1427"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;types&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;types&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/traps_64.c" file="sparc\kernel\traps_64.c" line="2128"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/kernel/vio.c" file="sparc\kernel\vio.c" line="84"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;Anonymous0::all&amp;#039; is never used." verbose="union member &amp;#039;Anonymous0::all&amp;#039; is never used.">
            <location file0="sparc/kernel/viohs.c" file="sparc\kernel\viohs.c" line="197"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/lib/PeeCeeI.c" file="sparc\lib\PeeCeeI.c" line="31"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/lib/PeeCeeI.c" file="sparc\lib\PeeCeeI.c" line="54"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/lib/PeeCeeI.c" file="sparc\lib\PeeCeeI.c" line="65"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/lib/PeeCeeI.c" file="sparc\lib\PeeCeeI.c" line="67"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/lib/PeeCeeI.c" file="sparc\lib\PeeCeeI.c" line="75"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/lib/PeeCeeI.c" file="sparc\lib\PeeCeeI.c" line="76"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/lib/PeeCeeI.c" file="sparc\lib\PeeCeeI.c" line="84"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/lib/PeeCeeI.c" file="sparc\lib\PeeCeeI.c" line="92"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/lib/PeeCeeI.c" file="sparc\lib\PeeCeeI.c" line="100"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;off_new&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;off_new&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/lib/bitext.c" file="sparc\lib\bitext.c" line="30"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;freg&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;freg&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="416"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="420"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="335"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="335"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="344"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="344"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="346"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="346"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="348"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="348"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="350"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="350"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="352"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="352"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="354"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="354"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="356"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="356"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="358"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="358"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="372"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="372"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="374"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="374"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="376"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="376"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="378"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="378"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="380"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="380"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="382"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="382"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="386"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="386"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="393"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="393"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="395"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="395"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="397"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="397"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="399"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="399"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="401"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="401"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="403"/>
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="403"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;insn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;insn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="165"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fsr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fsr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/math-emu/math_32.c" file="sparc\math-emu\math_32.c" line="325"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="226"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="226"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="228"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="228"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="237"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="237"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="239"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="239"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="241"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="241"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="243"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="243"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="245"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="245"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="247"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="247"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="249"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="249"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="251"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="251"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="263"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="263"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="272"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="272"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="289"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="289"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="291"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="291"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="293"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="293"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="295"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="295"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="297"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="297"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="299"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="299"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="302"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="302"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="304"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="304"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="310"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="310"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="319"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="319"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="321"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="321"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="468"/>
            <location file0="sparc/math-emu/math_64.c" file="sparc\math-emu\math_64.c" line="468"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="sparc/mm/gup.c" file="sparc\mm\gup.c" line="117"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pmdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pmdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="sparc/mm/gup.c" file="sparc\mm\gup.c" line="173"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pudp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pudp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="sparc/mm/gup.c" file="sparc\mm\gup.c" line="202"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="sparc/mm/gup.c" file="sparc\mm\gup.c" line="240"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="sparc/mm/gup.c" file="sparc\mm\gup.c" line="298"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;type&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;type&amp;#039; is assigned a value that is never used.">
            <location file0="sparc/mm/highmem.c" file="sparc\mm\highmem.c" line="102"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;addr&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;addr&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="sparc/mm/hugetlbpage.c" file="sparc\mm\hugetlbpage.c" line="65"/>
            <location file0="sparc/mm/hugetlbpage.c" file="sparc\mm\hugetlbpage.c" line="77"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/hugetlbpage.c" file="sparc\mm\hugetlbpage.c" line="102"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pud&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pud&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/hugetlbpage.c" file="sparc\mm\hugetlbpage.c" line="171"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pmd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="sparc/mm/hugetlbpage.c" file="sparc\mm\hugetlbpage.c" line="280"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pud++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="sparc/mm/hugetlbpage.c" file="sparc\mm\hugetlbpage.c" line="333"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgd++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="sparc/mm/hugetlbpage.c" file="sparc\mm\hugetlbpage.c" line="382"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;curr_pfn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;curr_pfn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/init_32.c" file="sparc\mm\init_32.c" line="101"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vaddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vaddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/io-unit.c" file="sparc\mm\io-unit.c" line="220"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/io-unit.c" file="sparc\mm\io-unit.c" line="220"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;page&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;page&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/io-unit.c" file="sparc\mm\io-unit.c" line="246"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/iommu.c" file="sparc\mm\iommu.c" line="273"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;page&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;page&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/iommu.c" file="sparc\mm\iommu.c" line="289"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/iommu.c" file="sparc\mm\iommu.c" line="290"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/iommu.c" file="sparc\mm\iommu.c" line="354"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;page&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;page&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/iommu.c" file="sparc\mm\iommu.c" line="372"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting a negative value is undefined behaviour" verbose="Shifting a negative value is undefined behaviour">
            <location file0="sparc/mm/leon_mm.c" file="sparc\mm\leon_mm.c" line="227"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting a negative value is undefined behaviour" verbose="Shifting a negative value is undefined behaviour">
            <location file0="sparc/mm/leon_mm.c" file="sparc\mm\leon_mm.c" line="232"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting a negative value is undefined behaviour" verbose="Shifting a negative value is undefined behaviour">
            <location file0="sparc/mm/leon_mm.c" file="sparc\mm\leon_mm.c" line="237"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;clear&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;clear&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="sparc/mm/srmmu.c" file="sparc\mm\srmmu.c" line="1280"/>
            <location file0="sparc/mm/srmmu.c" file="sparc\mm\srmmu.c" line="1281"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/srmmu.c" file="sparc\mm\srmmu.c" line="527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/srmmu.c" file="sparc\mm\srmmu.c" line="1164"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;smp_catch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;smp_catch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/srmmu.c" file="sparc\mm\srmmu.c" line="1618"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bpreg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bpreg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/srmmu.c" file="sparc\mm\srmmu.c" line="1639"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;clear&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;clear&amp;#039; is assigned a value that is never used.">
            <location file0="sparc/mm/srmmu.c" file="sparc\mm\srmmu.c" line="1281"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;clear&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;clear&amp;#039; is assigned a value that is never used.">
            <location file0="sparc/mm/srmmu.c" file="sparc\mm\srmmu.c" line="1466"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nentries&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nentries&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/tsb.c" file="sparc\mm\tsb.c" line="103"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;base&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;base&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/tsb.c" file="sparc\mm\tsb.c" line="103"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nentries&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nentries&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/tsb.c" file="sparc\mm\tsb.c" line="141"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;base&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;base&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/mm/tsb.c" file="sparc\mm\tsb.c" line="141"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;image&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;image&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/net/bpf_jit_comp.c" file="sparc\net\bpf_jit_comp.c" line="737"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;image+addrs[i]&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;image+addrs[i]&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/net/bpf_jit_comp.c" file="sparc\net\bpf_jit_comp.c" line="737"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;image&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;image&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/net/bpf_jit_comp.c" file="sparc\net\bpf_jit_comp.c" line="773"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;image+addrs[i]&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;image+addrs[i]&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/net/bpf_jit_comp.c" file="sparc\net\bpf_jit_comp.c" line="773"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;image&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;image&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/net/bpf_jit_comp.c" file="sparc\net\bpf_jit_comp.c" line="898"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;image&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;image&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="sparc/net/bpf_jit_comp.c" file="sparc\net\bpf_jit_comp.c" line="945"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_CMDLINE&amp;#039; since the value of &amp;#039;CONFIG_CMDLINE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_CMDLINE&amp;#039; since the value of &amp;#039;CONFIG_CMDLINE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="sparc\prom\bootstr_64.c" line="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;num_ranges&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;num_ranges&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/prom/ranges.c" file="sparc\prom\ranges.c" line="115"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;num_parent_ranges&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;num_parent_ranges&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/prom/ranges.c" file="sparc\prom\ranges.c" line="129"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;error&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;error&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/prom/tree_32.c" file="sparc\prom\tree_32.c" line="210"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;error&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;error&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="sparc/prom/tree_64.c" file="sparc\prom\tree_64.c" line="259"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;__gxio_ring_t::ring_idx&amp;#039; is never used." verbose="union member &amp;#039;__gxio_ring_t::ring_idx&amp;#039; is never used.">
            <location file0="tile/gxio/dma_queue.c" file="tile\gxio\dma_queue.c" line="38"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;__gxio_ring_t::gen&amp;#039; is never used." verbose="union member &amp;#039;__gxio_ring_t::gen&amp;#039; is never used.">
            <location file0="tile/gxio/dma_queue.c" file="tile\gxio\dma_queue.c" line="40"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;__gxio_ring_t::__reserved&amp;#039; is never used." verbose="union member &amp;#039;__gxio_ring_t::__reserved&amp;#039; is never used.">
            <location file0="tile/gxio/dma_queue.c" file="tile\gxio\dma_queue.c" line="41"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;__gxio_ring_t::__reserved&amp;#039; is never used." verbose="union member &amp;#039;__gxio_ring_t::__reserved&amp;#039; is never used.">
            <location file0="tile/gxio/dma_queue.c" file="tile\gxio\dma_queue.c" line="43"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;__gxio_ring_t::gen&amp;#039; is never used." verbose="union member &amp;#039;__gxio_ring_t::gen&amp;#039; is never used.">
            <location file0="tile/gxio/dma_queue.c" file="tile\gxio\dma_queue.c" line="44"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;__gxio_ring_t::ring_idx&amp;#039; is never used." verbose="union member &amp;#039;__gxio_ring_t::ring_idx&amp;#039; is never used.">
            <location file0="tile/gxio/dma_queue.c" file="tile\gxio\dma_queue.c" line="46"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="tile/gxio/mpipe.c" file="tile\gxio\mpipe.c" line="45"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="tile/gxio/trio.c" file="tile\gxio\trio.c" line="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/kernel/hardwall.c" file="tile\kernel\hardwall.c" line="553"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;task&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;task&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/kernel/hardwall.c" file="tile\kernel\hardwall.c" line="1232"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/kernel/hardwall.c" file="tile\kernel\hardwall.c" line="1232"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/kernel/hardwall.c" file="tile\kernel\hardwall.c" line="1233"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="tile/kernel/kgdb.c" file="tile\kernel\kgdb.c" line="106"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="tile/kernel/kgdb.c" file="tile\kernel\kgdb.c" line="124"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tag&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tag&amp;#039; is assigned a value that is never used.">
            <location file0="tile/kernel/messaging.c" file="tile\kernel\messaging.c" line="99"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/kernel/module.c" file="tile\kernel\module.c" line="150"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/kernel/module.c" file="tile\kernel\module.c" line="151"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="tile/kernel/module.c" file="tile\kernel\module.c" line="160"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/kernel/pci.c" file="tile\kernel\pci.c" line="452"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/kernel/pci.c" file="tile\kernel\pci.c" line="453"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hwc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hwc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/kernel/perf_event.c" file="tile\kernel\perf_event.c" line="1004"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp_reg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp_reg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/kernel/single_step.c" file="tile\kernel\single_step.c" line="358"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/kernel/stack.c" file="tile\kernel\stack.c" line="372"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/kernel/unaligned.c" file="tile\kernel\unaligned.c" line="936"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/kernel/unaligned.c" file="tile\kernel\unaligned.c" line="936"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __user*)(TASK_SIZE-68719476736UL)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __user*)(TASK_SIZE-68719476736UL)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="tile/kernel/unaligned.c" file="tile\kernel\unaligned.c" line="1822"/>
        </error>
        <error id="signConversion" severity="warning" msg="Suspicious code: sign conversion of -1 in calculation because &amp;#039;-1&amp;#039; has a negative value" verbose="Suspicious code: sign conversion of -1 in calculation because &amp;#039;-1&amp;#039; has a negative value">
            <location file0="tile/kernel/unaligned.c" file="tile\kernel\unaligned.c" line="1218"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vdso_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vdso_kbase&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="tile/kernel/vdso.c" file="tile\kernel\vdso.c" line="63"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/kernel/vdso/vgettimeofday.c" file="tile\kernel\vdso\vgettimeofday.c" line="144"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;syscall_return_value::value&amp;#039; is never used." verbose="struct member &amp;#039;syscall_return_value::value&amp;#039; is never used.">
            <location file0="tile/kernel/vdso/vgettimeofday.c" file="tile\kernel\vdso\vgettimeofday.c" line="42"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;syscall_return_value::error&amp;#039; is never used." verbose="struct member &amp;#039;syscall_return_value::error&amp;#039; is never used.">
            <location file0="tile/kernel/vdso/vgettimeofday.c" file="tile\kernel\vdso\vgettimeofday.c" line="43"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;a&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;a&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/lib/cpumask.c" file="tile\lib\cpumask.c" line="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;b&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;b&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/lib/cpumask.c" file="tile\lib\cpumask.c" line="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp4&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp4&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/lib/memcpy_64.c" file="tile\lib\memcpy_64.c" line="187"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp5&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp5&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/lib/memcpy_64.c" file="tile\lib\memcpy_64.c" line="187"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp6&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp6&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/lib/memcpy_64.c" file="tile\lib\memcpy_64.c" line="187"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp7&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp7&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/lib/memcpy_64.c" file="tile\lib\memcpy_64.c" line="187"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp8&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp8&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/lib/memcpy_64.c" file="tile\lib\memcpy_64.c" line="187"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="tile/lib/memcpy_user_64.c" file="tile\lib\memcpy_user_64.c" line="94"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to+n&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to+n&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="tile/lib/memcpy_user_64.c" file="tile\lib\memcpy_user_64.c" line="94"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;idx&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;idx&amp;#039; is assigned a value that is never used.">
            <location file0="tile/mm/highmem.c" file="tile\mm\highmem.c" line="271"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;is_32bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;is_32bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="tile/mm/mmap.c" file="tile\mm\mmap.c" line="61"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;chan&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;chan&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/chan_kern.c" file="um\drivers\chan_kern.c" line="123"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/chan_kern.c" file="um\drivers\chan_kern.c" line="124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;chan&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;chan&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/chan_kern.c" file="um\drivers\chan_kern.c" line="214"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/chan_kern.c" file="um\drivers\chan_kern.c" line="243"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;chan&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;chan&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/chan_kern.c" file="um\drivers\chan_kern.c" line="427"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;in&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;in&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/chan_kern.c" file="um\drivers\chan_kern.c" line="615"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;thread&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;thread&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/chan_user.c" file="um\drivers\chan_user.c" line="330"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/chan_user.c" file="um\drivers\chan_user.c" line="330"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;remaining&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;remaining&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/cow_user.c" file="um\drivers\cow_user.c" line="155"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/fd.c" file="um\drivers\fd.c" line="64"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;winch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;winch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/line.c" file="um\drivers\line.c" line="870"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;wtty&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;wtty&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/line.c" file="um\drivers\line.c" line="871"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;winch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;winch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/line.c" file="um\drivers\line.c" line="894"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/mconsole_kern.c" file="um\drivers\mconsole_kern.c" line="288"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/mconsole_kern.c" file="um\drivers\mconsole_kern.c" line="547"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/mconsole_kern.c" file="um\drivers\mconsole_kern.c" line="657"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/mconsole_user.c" file="um\drivers\mconsole_user.c" line="62"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/mconsole_user.c" file="um\drivers\mconsole_user.c" line="86"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/mconsole_user.c" file="um\drivers\mconsole_user.c" line="149"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/mconsole_user.c" file="um\drivers\mconsole_user.c" line="149"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;match&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;match&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/net_kern.c" file="um\drivers\net_kern.c" line="697"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;transport&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;transport&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/net_kern.c" file="um\drivers\net_kern.c" line="727"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr_buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr_buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/net_kern.c" file="um\drivers\net_kern.c" line="883"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;netmask_buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;netmask_buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/net_kern.c" file="um\drivers\net_kern.c" line="883"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;port&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;port&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/port_kern.c" file="um\drivers\port_kern.c" line="148"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;port&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;port&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/port_kern.c" file="um\drivers\port_kern.c" line="349"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/port_user.c" file="um\drivers\port_user.c" line="88"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/pty.c" file="um\drivers\pty.c" line="147"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/random.c" file="um\drivers\random.c" line="56"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/slip_common.c" file="um\drivers\slip_common.h" line="58"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;err&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;err&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="um/drivers/slip_user.c" file="um\drivers\slip_user.c" line="103"/>
            <location file0="um/drivers/slip_user.c" file="um\drivers\slip_user.c" line="107"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/tty.c" file="um\drivers\tty.c" line="53"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/ubd_kern.c" file="um\drivers\ubd_kern.c" line="507"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/ubd_kern.c" file="um\drivers\ubd_kern.c" line="1431"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;req&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;req&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/ubd_kern.c" file="um\drivers\ubd_kern.c" line="1521"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/ubd_kern.c" file="um\drivers\ubd_kern.c" line="1683"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/ubd_kern.c" file="um\drivers\ubd_kern.c" line="1684"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/ubd_kern.c" file="um\drivers\ubd_kern.c" line="1684"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/drivers/ubd_kern.c" file="um\drivers\ubd_kern.c" line="1775"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting a negative value is undefined behaviour" verbose="Shifting a negative value is undefined behaviour">
            <location file0="um/drivers/ubd_kern.c" file="um\drivers\ubd_kern.c" line="1018"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;SUBARCH_EXECVE1&amp;#039; since the value of &amp;#039;SUBARCH_EXECVE1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;SUBARCH_EXECVE1&amp;#039; since the value of &amp;#039;SUBARCH_EXECVE1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="um\kernel\exec.c" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/kernel/irq.c" file="um\kernel\irq.c" line="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/kernel/irq.c" file="um\kernel\irq.c" line="319"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/kernel/irq.c" file="um\kernel\irq.c" line="364"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/kernel/irq.c" file="um\kernel\irq.c" line="475"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;size&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;size&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="um/kernel/maccess.c" file="um\kernel\maccess.c" line="17"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="um/kernel/maccess.c" file="um\kernel\maccess.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/kernel/physmem.c" file="um\kernel\physmem.c" line="219"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ip&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ip&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/kernel/process.c" file="um\kernel\process.c" line="414"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;n&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;n&amp;#039; is assigned a value that is never used.">
            <location file0="um/kernel/process.c" file="um\kernel\process.c" line="148"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PTRACE_GETREGS&amp;#039; since the value of &amp;#039;PTRACE_GETREGS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PTRACE_GETREGS&amp;#039; since the value of &amp;#039;PTRACE_GETREGS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="um\kernel\ptrace.c" line="70"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;PTRACE_SETREGS&amp;#039; since the value of &amp;#039;PTRACE_SETREGS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;PTRACE_SETREGS&amp;#039; since the value of &amp;#039;PTRACE_SETREGS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="um\kernel\ptrace.c" line="91"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;SUBARCH_SET_SINGLESTEPPING&amp;#039; since the value of &amp;#039;SUBARCH_SET_SINGLESTEPPING&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;SUBARCH_SET_SINGLESTEPPING&amp;#039; since the value of &amp;#039;SUBARCH_SET_SINGLESTEPPING&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="um\kernel\ptrace.c" line="19"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;SUBARCH_SET_SINGLESTEPPING&amp;#039; since the value of &amp;#039;SUBARCH_SET_SINGLESTEPPING&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;SUBARCH_SET_SINGLESTEPPING&amp;#039; since the value of &amp;#039;SUBARCH_SET_SINGLESTEPPING&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="um\kernel\ptrace.c" line="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/kernel/stacktrace.c" file="um\kernel\stacktrace.c" line="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;op&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;op&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/kernel/tlb.c" file="um\kernel\tlb.c" line="69"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;last&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;last&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/kernel/tlb.c" file="um\kernel\tlb.c" line="115"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;last&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;last&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/kernel/tlb.c" file="um\kernel\tlb.c" line="157"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;last&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;last&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/kernel/tlb.c" file="um\kernel\tlb.c" line="197"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pgd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pgd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/kernel/tlb.c" file="um\kernel\tlb.c" line="393"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pte++,addr+=PAGE_SIZE,(addr&amp;lt;end)&amp;amp;&amp;amp;!ret&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pte++,addr+=PAGE_SIZE,(addr&amp;lt;end)&amp;amp;&amp;amp;!ret&amp;#039; depends on order of evaluation of side effects">
            <location file0="um/kernel/tlb.c" file="um\kernel\tlb.c" line="283"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pmd++,addr=next,(addr&amp;lt;end)&amp;amp;&amp;amp;!ret&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pmd++,addr=next,(addr&amp;lt;end)&amp;amp;&amp;amp;!ret&amp;#039; depends on order of evaluation of side effects">
            <location file0="um/kernel/tlb.c" file="um\kernel\tlb.c" line="312"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pud++,addr=next,(addr&amp;lt;end)&amp;amp;&amp;amp;!ret&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pud++,addr=next,(addr&amp;lt;end)&amp;amp;&amp;amp;!ret&amp;#039; depends on order of evaluation of side effects">
            <location file0="um/kernel/tlb.c" file="um\kernel\tlb.c" line="341"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgd++,addr=next,(addr&amp;lt;end_addr)&amp;amp;&amp;amp;!ret&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgd++,addr=next,(addr&amp;lt;end_addr)&amp;amp;&amp;amp;!ret&amp;#039; depends on order of evaluation of side effects">
            <location file0="um/kernel/tlb.c" file="um\kernel\tlb.c" line="371"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/kernel/skas/uaccess.c" file="um\kernel\skas\uaccess.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/aio.c" file="um\os-Linux\aio.c" line="201"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/aio.c" file="um\os-Linux\aio.c" line="383"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/aio.c" file="um\os-Linux\aio.c" line="111"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/file.c" file="um\os-Linux\file.c" line="230"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="um/os-Linux/file.c" file="um\os-Linux\file.c" line="82"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="um/os-Linux/file.c" file="um\os-Linux\file.c" line="83"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="um/os-Linux/file.c" file="um\os-Linux\file.c" line="84"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="um/os-Linux/file.c" file="um\os-Linux\file.c" line="85"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/irq.c" file="um\os-Linux\irq.c" line="26"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;O_TMPFILE&amp;#039; since the value of &amp;#039;O_TMPFILE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;O_TMPFILE&amp;#039; since the value of &amp;#039;O_TMPFILE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="um\os-Linux\mem.c" line="136"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/sigio.c" file="um\os-Linux\sigio.c" line="56"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;save_pending&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;save_pending&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/signal.c" file="um\os-Linux\signal.c" line="304"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;nsecs&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;nsecs&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="um/os-Linux/time.c" file="um\os-Linux\time.c" line="186"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;sec&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;sec&amp;#039; is assigned a value that is never used.">
            <location file0="um/os-Linux/time.c" file="um\os-Linux\time.c" line="135"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/drivers/tuntap_user.c" file="um\os-Linux\drivers\tuntap_user.c" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;output&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;output&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/drivers/tuntap_user.c" file="um\os-Linux\drivers\tuntap_user.c" line="155"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fds&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fds&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/drivers/tuntap_user.c" file="um\os-Linux\drivers\tuntap_user.c" line="156"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/skas/mem.c" file="um\os-Linux\skas\mem.c" line="52"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/skas/mem.c" file="um\os-Linux\skas\mem.c" line="54"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;syscall&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;syscall&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/skas/mem.c" file="um\os-Linux\skas\mem.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/skas/mem.c" file="um\os-Linux\skas\mem.c" line="164"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/skas/process.c" file="um\os-Linux\skas\process.c" line="161"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/skas/process.c" file="um\os-Linux\skas\process.c" line="365"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;op&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;op&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/skas/process.c" file="um\os-Linux\skas\process.c" line="365"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;local_using_sysemu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;local_using_sysemu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="um/os-Linux/skas/process.c" file="um\os-Linux\skas\process.c" line="367"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;__SIGNAL_FRAMESIZE&amp;#039; since the value of &amp;#039;__SIGNAL_FRAMESIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;__SIGNAL_FRAMESIZE&amp;#039; since the value of &amp;#039;__SIGNAL_FRAMESIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="um\os-Linux\skas\process.c" line="506"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="unicore32/kernel/hibernate.c" file="unicore32\kernel\hibernate.c" line="81"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="unicore32/kernel/irq.c" file="unicore32\kernel\irq.c" line="140"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;checksum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="unicore32/kernel/pm.c" file="unicore32\kernel\pm.c" line="30"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="unicore32/kernel/process.c" file="unicore32\kernel\process.c" line="177"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="unicore32/kernel/process.c" file="unicore32\kernel\process.c" line="178"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="unicore32/kernel/process.c" file="unicore32\kernel\process.c" line="179"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="unicore32/kernel/process.c" file="unicore32\kernel\process.c" line="180"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)vectors&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)vectors&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="unicore32/kernel/traps.c" file="unicore32\kernel\traps.c" line="363"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="unicore32/mm/fault.c" file="unicore32\mm\fault.c" line="193"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;kbc_err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;kbc_err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/a20.c" file="x86\boot\a20.c" line="146"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/cmdline.c" file="x86\boot\cmdline.c" line="131"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/cpu.c" file="x86\boot\cpu.c" line="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pos&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pos&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/early_serial_console.c" file="x86\boot\early_serial_console.c" line="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;delta&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;delta&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/string.c" file="x86\boot\string.c" line="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/string.c" file="x86\boot\string.c" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/string.c" file="x86\boot\string.c" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/tty.c" file="x86\boot\tty.c" line="134"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/video-mode.c" file="x86\boot\video-mode.c" line="65"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;key&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;key&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/video.c" file="x86\boot\video.c" line="260"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/video.c" file="x86\boot\video.c" line="261"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;uga_handle&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;uga_handle&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/compressed/eboot.c" file="x86\boot\compressed\eboot.c" line="824"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: status" verbose="Unused variable: status">
            <location file0="x86/boot/compressed/eboot.c" file="x86\boot\compressed\eboot.c" line="995"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: size" verbose="Unused variable: size">
            <location file0="x86/boot/compressed/eboot.c" file="x86\boot\compressed\eboot.c" line="996"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start_orig&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start_orig&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/compressed/kaslr.c" file="x86\boot\compressed\kaslr.c" line="335"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: slot_area" verbose="Unused variable: slot_area">
            <location file0="x86/boot/compressed/kaslr.c" file="x86\boot\compressed\kaslr.c" line="334"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_64&amp;#039; since the value of &amp;#039;CONFIG_X86_64&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_64&amp;#039; since the value of &amp;#039;CONFIG_X86_64&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\boot\compressed\kaslr.c" line="528"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;phdr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;phdr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/compressed/misc.c" file="x86\boot\compressed\misc.c" line="323"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;output&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;output&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/boot/compressed/misc.c" file="x86\boot\compressed\misc.c" line="348"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;output&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;output&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/boot/compressed/misc.c" file="x86\boot\compressed\misc.c" line="363"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dest&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/boot/compressed/misc.c" file="x86\boot\compressed\misc.c" line="359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;phdr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;phdr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/compressed/misc.c" file="x86\boot\compressed\misc.c" line="320"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_64;CONFIG_X86_NEED_RELOCS&amp;#039; since the value of &amp;#039;CONFIG_X86_64&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_64;CONFIG_X86_NEED_RELOCS&amp;#039; since the value of &amp;#039;CONFIG_X86_64&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\boot\compressed\misc.c" line="229"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/boot/compressed/misc.c" file="x86\boot\compressed\misc.c" line="205"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;output&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;output&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/boot/compressed/misc.c" file="x86\boot\compressed\misc.c" line="261"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;output+output_len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;output+output_len&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/boot/compressed/misc.c" file="x86\boot\compressed\misc.c" line="261"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;long&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;long&amp;#039;.">
            <location file0="x86/boot/compressed/mkpiggy.c" file="x86\boot\compressed\mkpiggy.c" line="73"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="x86/boot/tools/build.c" file="x86\boot\tools\build.c" line="425"/>
        </error>
        <error id="va_end_missing" severity="error" msg="va_list &amp;#039;args&amp;#039; was opened but not closed by va_end()." verbose="va_list &amp;#039;args&amp;#039; was opened but not closed by va_end().">
            <location file0="x86/boot/tools/build.c" file="x86\boot\tools\build.c" line="140"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;addr&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;addr&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="x86/boot/tools/build.c" file="x86\boot\tools\build.c" line="267"/>
            <location file0="x86/boot/tools/build.c" file="x86\boot\tools\build.c" line="271"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prealign&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prealign&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/crypto/crc32-pclmul_glue.c" file="x86\crypto\crc32-pclmul_glue.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;blocks&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;blocks&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/crypto/poly1305_glue.c" file="x86\crypto\poly1305_glue.c" line="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;datalen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;datalen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/crypto/poly1305_glue.c" file="x86\crypto\poly1305_glue.c" line="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ctx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ctx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/crypto/sha1-mb/sha1_mb.c" file="x86\crypto\sha1-mb\sha1_mb.c" line="371"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/crypto/sha1-mb/sha1_mb.c" file="x86\crypto\sha1-mb\sha1_mb.c" line="508"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sha_ctx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sha_ctx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/crypto/sha1-mb/sha1_mb.c" file="x86\crypto\sha1-mb\sha1_mb.c" line="1006"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: data" verbose="Uninitialized variable: data">
            <location file0="x86/crypto/sha1-mb/sha1_mb.c" file="x86\crypto\sha1-mb\sha1_mb.c" line="745"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ctx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ctx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/crypto/sha256-mb/sha256_mb.c" file="x86\crypto\sha256-mb\sha256_mb.c" line="366"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/crypto/sha256-mb/sha256_mb.c" file="x86\crypto\sha256-mb\sha256_mb.c" line="507"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sha_ctx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sha_ctx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/crypto/sha256-mb/sha256_mb.c" file="x86\crypto\sha256-mb\sha256_mb.c" line="1007"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: data" verbose="Uninitialized variable: data">
            <location file0="x86/crypto/sha256-mb/sha256_mb.c" file="x86\crypto\sha256-mb\sha256_mb.c" line="744"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;&amp;#039; was not checked because its code equals another one.">
            <location file="x86\crypto\sha512-mb\sha512_mb.c" line="0"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error">
            <location file0="x86/crypto/sha512-mb/sha512_mb.c" file="x86\crypto\sha512-mb\sha512_mb.c" line="1036"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;SHA512_PADLENGTHFIELD_SIZE=16&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;SHA512_PADLENGTHFIELD_SIZE=16&amp;#039; was not checked because its code equals another one.">
            <location file="x86\crypto\sha512-mb\sha512_mb.c" line="0"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;SHA_MB_DEBUG&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;SHA_MB_DEBUG&amp;#039; was not checked because its code equals another one.">
            <location file="x86\crypto\sha512-mb\sha512_mb.c" line="0"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed.">
            <location file0="x86/entry/vdso/vdso2c.c" file="x86\entry\vdso\vdso2c.c" line="128"/>
        </error>
        <error id="va_end_missing" severity="error" msg="va_list &amp;#039;ap&amp;#039; was opened but not closed by va_end()." verbose="va_list &amp;#039;ap&amp;#039; was opened but not closed by va_end().">
            <location file0="x86/entry/vdso/vdso2c.c" file="x86\entry\vdso\vdso2c.c" line="129"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/entry/vdso/vdso2c.c" file="x86\entry\vdso\vdso2c.h" line="23"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/entry/vdso/vdso2c.c" file="x86\entry\vdso\vdso2c.h" line="56"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/entry/vdso/vdso2c.c" file="x86\entry\vdso\vdso2c.h" line="57"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/entry/vdso/vdso2c.c" file="x86\entry\vdso\vdso2c.h" line="91"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/entry/vdso/vdso2c.c" file="x86\entry\vdso\vdso2c.h" line="93"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/entry/vdso/vdso2c.c" file="x86\entry\vdso\vdso2c.h" line="97"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/entry/vdso/vdso2c.c" file="x86\entry\vdso\vdso2c.h" line="117"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/entry/vdso/vdso2c.c" file="x86\entry\vdso\vdso2c.h" line="126"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/entry/vdso/vdso2c.c" file="x86\entry\vdso\vdso2c.h" line="128"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;raw_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/entry/vdso/vdso2c.c" file="x86\entry\vdso\vdso2c.h" line="230"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/entry/vdso/vma.c" file="x86\entry\vdso\vma.c" line="251"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hwc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hwc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/core.c" file="x86\events\core.c" line="1290"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/core.c" file="x86\events\core.c" line="1291"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/core.c" file="x86\events\core.c" line="2813"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/amd/ibs.c" file="x86\events\amd\ibs.c" line="303"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;reg&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;reg&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="x86/events/amd/iommu.c" file="x86\events\amd\iommu.c" line="291"/>
            <location file0="x86/events/amd/iommu.c" file="x86\events\amd\iommu.c" line="293"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;prev_raw_count&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;prev_raw_count&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="x86/events/amd/iommu.c" file="x86\events\amd\iommu.c" line="371"/>
            <location file0="x86/events/amd/iommu.c" file="x86\events\amd\iommu.c" line="383"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;config&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;config&amp;#039; is assigned a value that is never used.">
            <location file0="x86/events/amd/iommu.c" file="x86\events\amd\iommu.c" line="419"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;next_space&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;next_space&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/bts.c" file="x86\events\intel\bts.c" line="434"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gap&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gap&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/bts.c" file="x86\events\intel\bts.c" line="434"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;skip&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;skip&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/bts.c" file="x86\events\intel\bts.c" line="434"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;next_buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;next_buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/bts.c" file="x86\events\intel\bts.c" line="435"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/bts.c" file="x86\events\intel\bts.c" line="437"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xl&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xl&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/core.c" file="x86\events\intel\core.c" line="2856"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/core.c" file="x86\events\intel\core.c" line="3368"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/cqm.c" file="x86\events\intel\cqm.c" line="1346"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;kaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;kaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/events/intel/ds.c" file="x86\events\intel\ds.c" line="1208"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;at&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;at&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/events/intel/ds.c" file="x86\events\intel\ds.c" line="1428"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;at&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;at&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/events/intel/ds.c" file="x86\events\intel\ds.c" line="1478"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;at&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;at&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/events/intel/ds.c" file="x86\events\intel\ds.c" line="1565"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;intel_x86_pebs_dse::ld_reserved&amp;#039; is never used." verbose="union member &amp;#039;intel_x86_pebs_dse::ld_reserved&amp;#039; is never used.">
            <location file0="x86/events/intel/ds.c" file="x86\events\intel\ds.c" line="36"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;intel_x86_pebs_dse::st_reserved1&amp;#039; is never used." verbose="union member &amp;#039;intel_x86_pebs_dse::st_reserved1&amp;#039; is never used.">
            <location file0="x86/events/intel/ds.c" file="x86\events\intel\ds.c" line="41"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;intel_x86_pebs_dse::st_reserved2&amp;#039; is never used." verbose="union member &amp;#039;intel_x86_pebs_dse::st_reserved2&amp;#039; is never used.">
            <location file0="x86/events/intel/ds.c" file="x86\events\intel\ds.c" line="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;is_64bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;is_64bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/ds.c" file="x86\events\intel\ds.c" line="1116"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lbr_idx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lbr_idx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/lbr.c" file="x86\events\intel\lbr.c" line="368"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lbr_idx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lbr_idx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/lbr.c" file="x86\events\intel\lbr.c" line="399"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;task_ctx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;task_ctx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/lbr.c" file="x86\events\intel\lbr.c" line="473"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;task_ctx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;task_ctx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/lbr.c" file="x86\events\intel\lbr.c" line="518"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bytes_left&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bytes_left&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/lbr.c" file="x86\events\intel\lbr.c" line="908"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/p4.c" file="x86\events\intel\p4.c" line="1289"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/pt.c" file="x86\events\intel\pt.c" line="1119"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;event&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;event&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/pt.c" file="x86\events\intel\pt.c" line="1409"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;head&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;head&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/events/intel/pt.c" file="x86\events\intel\pt.c" line="878"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;box&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;box&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/uncore.c" file="x86\events\intel\uncore.c" line="951"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/uncore.c" file="x86\events\intel\uncore.c" line="952"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pkg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pkg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/uncore.c" file="x86\events\intel\uncore.c" line="952"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/uncore.c" file="x86\events\intel\uncore.c" line="995"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/uncore.c" file="x86\events\intel\uncore.c" line="1234"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;box&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;box&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/uncore.c" file="x86\events\intel\uncore.c" line="1446"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/uncore_snb.c" file="x86\events\intel\uncore_snb.c" line="794"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;box.io_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;box.io_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/events/intel/uncore_snb.c" file="x86\events\intel\uncore_snb.c" line="371"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nodeid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nodeid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/uncore_snbep.c" file="x86\events\intel\uncore_snbep.c" line="1354"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;segment&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;segment&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/events/intel/uncore_snbep.c" file="x86\events\intel\uncore_snbep.c" line="1354"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/alternative.c" file="x86\kernel\alternative.c" line="789"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/alternative.c" file="x86\kernel\alternative.c" line="795"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mod&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mod&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/alternative.c" file="x86\kernel\alternative.c" line="612"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;GENERIC_NOP1&amp;#039; since the value of &amp;#039;GENERIC_NOP1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;GENERIC_NOP1&amp;#039; since the value of &amp;#039;GENERIC_NOP1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\alternative.c" line="93"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;K7_NOP1&amp;#039; since the value of &amp;#039;K7_NOP1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;K7_NOP1&amp;#039; since the value of &amp;#039;K7_NOP1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\alternative.c" line="149"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;K8_NOP1&amp;#039; since the value of &amp;#039;K8_NOP1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;K8_NOP1&amp;#039; since the value of &amp;#039;K8_NOP1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\alternative.c" line="121"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;P6_NOP1&amp;#039; since the value of &amp;#039;P6_NOP1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;P6_NOP1&amp;#039; since the value of &amp;#039;P6_NOP1&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\alternative.c" line="177"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;align_mask&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;align_mask&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/amd_gart_64.c" file="x86\kernel\amd_gart_64.c" line="575"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;page&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;page&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/amd_gart_64.c" file="x86\kernel\amd_gart_64.c" line="576"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/amd_gart_64.c" file="x86\kernel\amd_gart_64.c" line="847"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/apm_32.c" file="x86\kernel\apm_32.c" line="1627"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;power_stat&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;power_stat&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/apm_32.c" file="x86\kernel\apm_32.c" line="2072"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bat_stat&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bat_stat&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/apm_32.c" file="x86\kernel\apm_32.c" line="2073"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;eng_error&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;eng_error&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/apm_32.c" file="x86\kernel\apm_32.c" line="1283"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;crash_mem::nr_ranges&amp;#039; is never used." verbose="struct member &amp;#039;crash_mem::nr_ranges&amp;#039; is never used.">
            <location file0="x86/kernel/crash.c" file="x86\kernel\crash.c" line="53"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;crash_elf_data::image&amp;#039; is never used." verbose="struct member &amp;#039;crash_elf_data::image&amp;#039; is never used.">
            <location file0="x86/kernel/crash.c" file="x86\kernel\crash.c" line="60"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;crash_elf_data::max_nr_ranges&amp;#039; is never used." verbose="struct member &amp;#039;crash_elf_data::max_nr_ranges&amp;#039; is never used.">
            <location file0="x86/kernel/crash.c" file="x86\kernel\crash.c" line="65"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;crash_elf_data::ehdr&amp;#039; is never used." verbose="struct member &amp;#039;crash_elf_data::ehdr&amp;#039; is never used.">
            <location file0="x86/kernel/crash.c" file="x86\kernel\crash.c" line="68"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;crash_elf_data::bufp&amp;#039; is never used." verbose="struct member &amp;#039;crash_elf_data::bufp&amp;#039; is never used.">
            <location file0="x86/kernel/crash.c" file="x86\kernel\crash.c" line="70"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;crash_memmap_data::params&amp;#039; is never used." verbose="struct member &amp;#039;crash_memmap_data::params&amp;#039; is never used.">
            <location file0="x86/kernel/crash.c" file="x86\kernel\crash.c" line="77"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;crash_memmap_data::type&amp;#039; is never used." verbose="struct member &amp;#039;crash_memmap_data::type&amp;#039; is never used.">
            <location file0="x86/kernel/crash.c" file="x86\kernel\crash.c" line="79"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/crash.c" file="x86\kernel\crash.c" line="263"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/crash.c" file="x86\kernel\crash.c" line="263"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mstart&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mstart&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/crash.c" file="x86\kernel\crash.c" line="401"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mend&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mend&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/crash.c" file="x86\kernel\crash.c" line="401"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;notes_addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;notes_addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/crash.c" file="x86\kernel\crash.c" line="462"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ced.bufp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ced.bufp&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/crash.c" file="x86\kernel\crash.c" line="425"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/crash_dump_32.c" file="x86\kernel\crash_dump_32.c" line="69"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;kdump_buf_page&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;kdump_buf_page&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/crash_dump_32.c" file="x86\kernel\crash_dump_32.c" line="85"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/crash_dump_64.c" file="x86\kernel\crash_dump_64.c" line="45"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/crash_dump_64.c" file="x86\kernel\crash_dump_64.c" line="53"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tss&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tss&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/doublefault.c" file="x86\kernel\doublefault.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/dumpstack_32.c" file="x86\kernel\dumpstack_32.c" line="193"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;regs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;regs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/dumpstack_64.c" file="x86\kernel\dumpstack_64.c" line="58"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/dumpstack_64.c" file="x86\kernel\dumpstack_64.c" line="239"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;c!=&amp;#039;\r&amp;#039;&amp;#039; is always true" verbose="Condition &amp;#039;c!=&amp;#039;\r&amp;#039;&amp;#039; is always true">
            <location file0="x86/kernel/early_printk.c" file="x86\kernel\early_printk.c" line="77"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;trampoline&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;trampoline&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/ftrace.c" file="x86\kernel\ftrace.c" line="860"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;trampoline&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;trampoline&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/ftrace.c" file="x86\kernel\ftrace.c" line="870"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;trampoline+size&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;trampoline+size&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/ftrace.c" file="x86\kernel\ftrace.c" line="870"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;trampoline&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;trampoline&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/ftrace.c" file="x86\kernel\ftrace.c" line="874"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;trampoline&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;trampoline&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/ftrace.c" file="x86\kernel\ftrace.c" line="890"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/ftrace.c" file="x86\kernel\ftrace.c" line="982"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)FTRACE_REGS_ADDR&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)FTRACE_REGS_ADDR&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/ftrace.c" file="x86\kernel\ftrace.c" line="1019"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)FTRACE_ADDR&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)FTRACE_ADDR&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/ftrace.c" file="x86\kernel\ftrace.c" line="1023"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ops.trampoline&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ops.trampoline&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/ftrace.c" file="x86\kernel\ftrace.c" line="1040"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;clc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;clc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/hpet.c" file="x86\kernel\hpet.c" line="1456"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)entry.code&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)entry.code&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/jump_label.c" file="x86\kernel\jump_label.c" line="126"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: default_nop" verbose="Buffer is accessed out of bounds: default_nop">
            <location file0="x86/kernel/jump_label.c" file="x86\kernel\jump_label.c" line="59"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: default_nop" verbose="Buffer is accessed out of bounds: default_nop">
            <location file0="x86/kernel/jump_label.c" file="x86\kernel\jump_label.c" line="92"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)params&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)params&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/kexec-bzimage64.c" file="x86\kernel\kexec-bzimage64.c" line="129"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)params&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)params&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/kexec-bzimage64.c" file="x86\kernel\kexec-bzimage64.c" line="153"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sd&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sd&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/kexec-bzimage64.c" file="x86\kernel\kexec-bzimage64.c" line="154"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pevent&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pevent&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/kgdb.c" file="x86\kernel\kgdb.c" line="321"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/kgdb.c" file="x86\kernel\kgdb.c" line="112"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/kgdb.c" file="x86\kernel\kgdb.c" line="132"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)&amp;amp;boot_params&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)&amp;amp;boot_params&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/ksysfs.c" file="x86\kernel\ksysfs.c" line="35"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/ksysfs.c" file="x86\kernel\ksysfs.c" line="224"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/ldt.c" file="x86\kernel\ldt.c" line="214"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cnt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cnt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/livepatch.c" file="x86\kernel\livepatch.c" line="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aseg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aseg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/livepatch.c" file="x86\kernel\livepatch.c" line="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pseg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pseg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/livepatch.c" file="x86\kernel\livepatch.c" line="30"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;aseg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;aseg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/livepatch.c" file="x86\kernel\livepatch.c" line="72"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pseg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pseg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/livepatch.c" file="x86\kernel\livepatch.c" line="78"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/module.c" file="x86\kernel\module.c" line="173"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/module.c" file="x86\kernel\module.c" line="252"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;aseg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;aseg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/module.c" file="x86\kernel\module.c" line="281"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;lseg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;lseg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/module.c" file="x86\kernel\module.c" line="289"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;tseg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;tseg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/module.c" file="x86\kernel\module.c" line="290"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;pseg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;pseg&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/module.c" file="x86\kernel\module.c" line="296"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sym&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sym&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/module.c" file="x86\kernel\module.c" line="116"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/module.c" file="x86\kernel\module.c" line="117"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)sechdrs[sechdrs[relsec].sh_info].sh_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/module.c" file="x86\kernel\module.c" line="126"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;erroff&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;erroff&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/pci-calgary_64.c" file="x86\kernel\pci-calgary_64.c" line="937"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;end&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;end&amp;#039; is assigned a value that is never used.">
            <location file0="x86/kernel/pci-calgary_64.c" file="x86\kernel\pci-calgary_64.c" line="229"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TIF_SYSCALL_EMU&amp;#039; since the value of &amp;#039;TIF_SYSCALL_EMU&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TIF_SYSCALL_EMU&amp;#039; since the value of &amp;#039;TIF_SYSCALL_EMU&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\ptrace.c" line="936"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used.">
            <location file0="x86/kernel/quirks.c" file="x86\kernel\quirks.c" line="112"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used.">
            <location file0="x86/kernel/quirks.c" file="x86\kernel\quirks.c" line="216"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used.">
            <location file0="x86/kernel/quirks.c" file="x86\kernel\quirks.c" line="245"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used.">
            <location file0="x86/kernel/quirks.c" file="x86\kernel\quirks.c" line="351"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used.">
            <location file0="x86/kernel/quirks.c" file="x86\kernel\quirks.c" line="502"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/reboot_fixups_32.c" file="x86\kernel\reboot_fixups_32.c" line="86"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/reboot_fixups_32.c" file="x86\kernel\reboot_fixups_32.c" line="87"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/resource.c" file="x86\kernel\resource.c" line="38"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)__va(max_pfn*PAGE_SIZE-1)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)__va(max_pfn*PAGE_SIZE-1)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/setup.c" file="x86\kernel\setup.c" line="1210"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_IA32_EMULATION&amp;#039; since the value of &amp;#039;CONFIG_IA32_EMULATION&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_IA32_EMULATION&amp;#039; since the value of &amp;#039;CONFIG_IA32_EMULATION&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\signal.c" line="766"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\signal.c" line="157"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\signal.c" line="270"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\signal.c" line="282"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\signal.c" line="772"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_64&amp;#039; since the value of &amp;#039;CONFIG_X86_64&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_64&amp;#039; since the value of &amp;#039;CONFIG_X86_64&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\signal.c" line="257"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_X32_ABI&amp;#039; since the value of &amp;#039;CONFIG_X86_X32_ABI&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_X32_ABI&amp;#039; since the value of &amp;#039;CONFIG_X86_X32_ABI&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\signal.c" line="777"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;send_status&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;send_status&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="x86/kernel/smpboot.c" file="x86\kernel\smpboot.c" line="827"/>
            <location file0="x86/kernel/smpboot.c" file="x86\kernel\smpboot.c" line="838"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/smpboot.c" file="x86\kernel\smpboot.c" line="658"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;maxlvt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;maxlvt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/smpboot.c" file="x86\kernel\smpboot.c" line="752"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;current_node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;current_node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/smpboot.c" file="x86\kernel\smpboot.c" line="952"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/smpboot.c" file="x86\kernel\smpboot.c" line="1107"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;phys_id&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;phys_id&amp;#039; is assigned a value that is never used.">
            <location file0="x86/kernel/smpboot.c" file="x86\kernel\smpboot.c" line="168"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;highest_cstate&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;highest_cstate&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/smpboot.c" file="x86\kernel\smpboot.c" line="1854"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;highest_subcstate&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;highest_subcstate&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/smpboot.c" file="x86\kernel\smpboot.c" line="1855"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/smpboot.c" file="x86\kernel\smpboot.c" line="1857"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/stacktrace.c" file="x86\kernel\stacktrace.c" line="41"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/step.c" file="x86\kernel\step.c" line="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;base&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;base&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/step.c" file="x86\kernel\step.c" line="34"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/sys_x86_64.c" file="x86\kernel\sys_x86_64.c" line="155"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;config&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;config&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/tboot.c" file="x86\kernel\tboot.c" line="566"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;config&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;config&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/tboot.c" file="x86\kernel\tboot.c" line="567"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;heap_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;heap_base&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/tboot.c" file="x86\kernel\tboot.c" line="577"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;heap_ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;heap_ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/tboot.c" file="x86\kernel\tboot.c" line="579"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;heap_ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;heap_ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/tboot.c" file="x86\kernel\tboot.c" line="581"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;heap_ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;heap_ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/tboot.c" file="x86\kernel\tboot.c" line="583"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;heap_ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;heap_ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/tboot.c" file="x86\kernel\tboot.c" line="585"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/tboot.c" file="x86\kernel\tboot.c" line="200"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!result&amp;#039; is always false" verbose="Condition &amp;#039;!result&amp;#039; is always false">
            <location file0="x86/kernel/test_rodata.c" file="x86\kernel\test_rodata.c" line="52"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/vm86_32.c" file="x86\kernel\vm86_32.c" line="998"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/acpi/boot.c" file="x86\kernel\acpi\boot.c" line="659"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;new&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;new&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/acpi/boot.c" file="x86\kernel\acpi\boot.c" line="1943"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="x86/kernel/acpi/boot.c" file="x86\kernel\acpi\boot.c" line="903"/>
            <location file0="x86/kernel/acpi/boot.c" file="x86\kernel\acpi\boot.c" line="907"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::apic_thmr&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::apic_thmr&amp;#039; is never used.">
            <location file0="x86/kernel/apic/apic.c" file="x86\kernel\apic\apic.c" line="2745"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::apic_cmci&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::apic_cmci&amp;#039; is never used.">
            <location file0="x86/kernel/apic/apic.c" file="x86\kernel\apic\apic.c" line="2746"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\apic\apic.c" line="152"/>
        </error>
        <error id="truncLongCastReturn" severity="style" msg="int result is returned as long value. If the return value is long to avoid loss of information, then you have loss of information." verbose="int result is returned as long value. If the return value is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example &amp;#039;return a*b;&amp;#039; =&amp;gt; &amp;#039;return (long)a*b&amp;#039;.">
            <location file0="x86/kernel/apic/apic_flat_64.c" file="x86\kernel\apic\apic_flat_64.c" line="136"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/apic/apic_numachip.c" file="x86\kernel\apic\apic_numachip.c" line="30"/>
        </error>
        <error id="truncLongCastReturn" severity="style" msg="int result is returned as long value. If the return value is long to avoid loss of information, then you have loss of information." verbose="int result is returned as long value. If the return value is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example &amp;#039;return a*b;&amp;#039; =&amp;gt; &amp;#039;return (long)a*b&amp;#039;.">
            <location file0="x86/kernel/apic/apic_numachip.c" file="x86\kernel\apic\apic_numachip.c" line="44"/>
        </error>
        <error id="truncLongCastReturn" severity="style" msg="int result is returned as long value. If the return value is long to avoid loss of information, then you have loss of information." verbose="int result is returned as long value. If the return value is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example &amp;#039;return a*b;&amp;#039; =&amp;gt; &amp;#039;return (long)a*b&amp;#039;.">
            <location file0="x86/kernel/apic/apic_numachip.c" file="x86\kernel\apic\apic_numachip.c" line="57"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;arch_trigger_cpumask_backtrace&amp;#039; since the value of &amp;#039;arch_trigger_cpumask_backtrace&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;arch_trigger_cpumask_backtrace&amp;#039; since the value of &amp;#039;arch_trigger_cpumask_backtrace&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\apic\hw_nmi.c" line="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/apic/io_apic.c" file="x86\kernel\apic\io_apic.c" line="1126"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/apic/io_apic.c" file="x86\kernel\apic\io_apic.c" line="1170"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;entry&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;entry&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/apic/io_apic.c" file="x86\kernel\apic\io_apic.c" line="2136"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cfg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cfg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/apic/io_apic.c" file="x86\kernel\apic\io_apic.c" line="2185"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/apic/io_apic.c" file="x86\kernel\apic\io_apic.c" line="3289"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)__fix_to_virt(FIX_IO_APIC_BASE_0+idx)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)__fix_to_virt(FIX_IO_APIC_BASE_0+idx)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/apic/io_apic.c" file="x86\kernel\apic\io_apic.c" line="295"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: irq" verbose="Uninitialized variable: irq">
            <location file0="x86/kernel/apic/io_apic.c" file="x86\kernel\apic\io_apic.c" line="1203"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: irq" verbose="Uninitialized variable: irq">
            <location file0="x86/kernel/apic/io_apic.c" file="x86\kernel\apic\io_apic.c" line="1223"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/apic/io_apic.c" file="x86\kernel\apic\io_apic.c" line="2708"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_SMP&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SMP&amp;#039; since the value of &amp;#039;CONFIG_SMP&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\apic\vector.c" line="635"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/apic/vector.c" file="x86\kernel\apic\vector.c" line="503"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cpus_in_cluster_ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cpus_in_cluster_ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/apic/x2apic_cluster.c" file="x86\kernel\apic\x2apic_cluster.c" line="37"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting a negative value is undefined behaviour" verbose="Shifting a negative value is undefined behaviour">
            <location file0="x86/kernel/apic/x2apic_uv_x.c" file="x86\kernel\apic\x2apic_uv_x.c" line="209"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index_min&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index_min&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/common.c" file="x86\kernel\cpu\common.c" line="1378"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index_max&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index_max&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/common.c" file="x86\kernel\cpu\common.c" line="1378"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/common.c" file="x86\kernel\cpu\common.c" line="1698"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ccr2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ccr2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/cyrix.c" file="x86\kernel\cpu\cyrix.c" line="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/cyrix.c" file="x86\kernel\cpu\cyrix.c" line="102"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;trace&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;trace&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/intel_cacheinfo.c" file="x86\kernel\cpu\intel_cacheinfo.c" line="773"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l2_id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l2_id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/intel_cacheinfo.c" file="x86\kernel\cpu\intel_cacheinfo.c" line="776"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l3_id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l3_id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/intel_cacheinfo.c" file="x86\kernel\cpu\intel_cacheinfo.c" line="776"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;num_threads_sharing&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;num_threads_sharing&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/intel_cacheinfo.c" file="x86\kernel\cpu\intel_cacheinfo.c" line="776"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index_msb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index_msb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/intel_cacheinfo.c" file="x86\kernel\cpu\intel_cacheinfo.c" line="776"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/intel_cacheinfo.c" file="x86\kernel\cpu\intel_cacheinfo.c" line="1132"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::reserved&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::reserved&amp;#039; is never used.">
            <location file0="x86/kernel/cpu/intel_cacheinfo.c" file="x86\kernel\cpu\intel_cacheinfo.c" line="133"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;l3_cache::res&amp;#039; is never used." verbose="union member &amp;#039;l3_cache::res&amp;#039; is never used.">
            <location file0="x86/kernel/cpu/intel_cacheinfo.c" file="x86\kernel\cpu\intel_cacheinfo.c" line="208"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting a negative value is undefined behaviour" verbose="Shifting a negative value is undefined behaviour">
            <location file0="x86/kernel/cpu/topology.c" file="x86\kernel\cpu\topology.c" line="85"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lpj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lpj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/vmware.c" file="x86\kernel\cpu\vmware.c" line="60"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/mcheck/mce-genpool.c" file="x86\kernel\cpu\mcheck\mce-genpool.c" line="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mce&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mce&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/mcheck/mce-genpool.c" file="x86\kernel\cpu\mcheck\mce-genpool.c" line="88"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pfn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pfn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/mcheck/mce.c" file="x86\kernel\cpu\mcheck\mce.c" line="694"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;eq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;eq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/microcode/amd.c" file="x86\kernel\cpu\microcode\amd.c" line="158"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;crnt_size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;crnt_size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/microcode/amd.c" file="x86\kernel\cpu\microcode\amd.c" line="964"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_BLK_DEV_INITRD;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_BLK_DEV_INITRD;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\cpu\microcode\amd.c" line="743"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\cpu\microcode\amd.c" line="743"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp_ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp_ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/microcode/core.c" file="x86\kernel\cpu\microcode\core.c" line="476"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/microcode/intel.c" file="x86\kernel\cpu\microcode\intel.c" line="73"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sig&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sig&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/microcode/intel.c" file="x86\kernel\cpu\microcode\intel.c" line="295"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/microcode/intel.c" file="x86\kernel\cpu\microcode\intel.c" line="295"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/microcode/intel.c" file="x86\kernel\cpu\microcode\intel.c" line="979"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)mc_header&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)mc_header&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/cpu/microcode/intel.c" file="x86\kernel\cpu\microcode\intel.c" line="192"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)mc_header+data_size&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)mc_header+data_size&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/cpu/microcode/intel.c" file="x86\kernel\cpu\microcode\intel.c" line="192"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ext_header&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ext_header&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/cpu/microcode/intel.c" file="x86\kernel\cpu\microcode\intel.c" line="193"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_BLK_DEV_INITRD&amp;#039; since the value of &amp;#039;CONFIG_BLK_DEV_INITRD&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_BLK_DEV_INITRD&amp;#039; since the value of &amp;#039;CONFIG_BLK_DEV_INITRD&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\cpu\microcode\intel.c" line="756"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_BLK_DEV_INITRD;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_BLK_DEV_INITRD&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_BLK_DEV_INITRD;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_BLK_DEV_INITRD&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\cpu\microcode\intel.c" line="756"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_BLK_DEV_INITRD;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_BLK_DEV_INITRD;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kernel\cpu\microcode\intel.c" line="782"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;total_size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;total_size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/microcode/intel.c" file="x86\kernel\cpu\microcode\intel.c" line="459"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data_size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data_size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/microcode/intel.c" file="x86\kernel\cpu\microcode\intel.c" line="459"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;date&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;date&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/microcode/intel.c" file="x86\kernel\cpu\microcode\intel.c" line="459"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)mc_saved_header&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)mc_saved_header&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/cpu/microcode/intel.c" file="x86\kernel\cpu\microcode\intel.c" line="505"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)mc_saved_header+data_size&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)mc_saved_header+data_size&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/cpu/microcode/intel.c" file="x86\kernel\cpu\microcode\intel.c" line="505"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ext_header&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ext_header&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/cpu/microcode/intel.c" file="x86\kernel\cpu\microcode\intel.c" line="507"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ext_sig&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ext_sig&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/microcode/intel_lib.c" file="x86\kernel\cpu\microcode\intel_lib.c" line="57"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/cpu/microcode/intel_lib.c" file="x86\kernel\cpu\microcode\intel_lib.c" line="100"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ext_header&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ext_header&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/cpu/microcode/intel_lib.c" file="x86\kernel\cpu\microcode\intel_lib.c" line="171"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;mc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;mc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/cpu/microcode/intel_lib.c" file="x86\kernel\cpu\microcode\intel_lib.c" line="212"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)ext_hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)ext_hdr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/cpu/microcode/intel_lib.c" file="x86\kernel\cpu\microcode\intel_lib.c" line="213"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;var_mtrr_state::range_startk&amp;#039; is never used." verbose="struct member &amp;#039;var_mtrr_state::range_startk&amp;#039; is never used.">
            <location file0="x86/kernel/cpu/mtrr/cleanup.c" file="x86\kernel\cpu\mtrr\cleanup.c" line="45"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;var_mtrr_state::range_sizek&amp;#039; is never used." verbose="struct member &amp;#039;var_mtrr_state::range_sizek&amp;#039; is never used.">
            <location file0="x86/kernel/cpu/mtrr/cleanup.c" file="x86\kernel\cpu\mtrr\cleanup.c" line="46"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;var_mtrr_state::chunk_sizek&amp;#039; is never used." verbose="struct member &amp;#039;var_mtrr_state::chunk_sizek&amp;#039; is never used.">
            <location file0="x86/kernel/cpu/mtrr/cleanup.c" file="x86\kernel\cpu\mtrr\cleanup.c" line="47"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;var_mtrr_state::gran_sizek&amp;#039; is never used." verbose="struct member &amp;#039;var_mtrr_state::gran_sizek&amp;#039; is never used.">
            <location file0="x86/kernel/cpu/mtrr/cleanup.c" file="x86\kernel\cpu\mtrr\cleanup.c" line="48"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;var_mtrr_state::reg&amp;#039; is never used." verbose="struct member &amp;#039;var_mtrr_state::reg&amp;#039; is never used.">
            <location file0="x86/kernel/cpu/mtrr/cleanup.c" file="x86\kernel\cpu\mtrr\cleanup.c" line="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/mtrr/cyrix.c" file="x86\kernel\cpu\mtrr\cyrix.c" line="109"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/mtrr/if.c" file="x86\kernel\cpu\mtrr\if.c" line="127"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/mtrr/if.c" file="x86\kernel\cpu\mtrr\if.c" line="512"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;max&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;max&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/cpu/mtrr/if.c" file="x86\kernel\cpu\mtrr\if.c" line="512"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)&amp;amp;(fxsave).st_space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)&amp;amp;(fxsave).st_space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/fpu/regset.c" file="x86\kernel\fpu\regset.c" line="223"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;fpstate&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;fpstate&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/fpu/signal.c" file="x86\kernel\fpu\signal.c" line="50"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/fpu/signal.c" file="x86\kernel\fpu\signal.c" line="110"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;buf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/fpu/signal.c" file="x86\kernel\fpu\signal.c" line="464"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)fx&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)fx&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/fpu/xstate.c" file="x86\kernel\fpu\xstate.c" line="226"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)&amp;amp;init_fpstate.xsave&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)&amp;amp;init_fpstate.xsave&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/fpu/xstate.c" file="x86\kernel\fpu\xstate.c" line="227"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)xsave&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)xsave&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/fpu/xstate.c" file="x86\kernel\fpu\xstate.c" line="869"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;kbuf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;kbuf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/fpu/xstate.c" file="x86\kernel\fpu\xstate.c" line="1041"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ubuf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ubuf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/fpu/xstate.c" file="x86\kernel\fpu\xstate.c" line="1045"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;kbuf&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;kbuf&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/fpu/xstate.c" file="x86\kernel\fpu\xstate.c" line="1158"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ubuf&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ubuf&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/fpu/xstate.c" file="x86\kernel\fpu\xstate.c" line="1162"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;kbuf&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;kbuf&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/fpu/xstate.c" file="x86\kernel\fpu\xstate.c" line="1191"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ubuf&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ubuf&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/fpu/xstate.c" file="x86\kernel\fpu\xstate.c" line="1195"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;__addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;__addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/kprobes/core.c" file="x86\kernel\kprobes\core.c" line="348"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)orig_ip&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)orig_ip&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/kprobes/core.c" file="x86\kernel\kprobes\core.c" line="1059"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/kprobes/opt.c" file="x86\kernel\kprobes\opt.c" line="194"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/kprobes/opt.c" file="x86\kernel\kprobes\opt.c" line="347"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;op&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;op&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kernel/kprobes/opt.c" file="x86\kernel\kprobes\opt.c" line="515"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kernel/kprobes/opt.c" file="x86\kernel\kprobes\opt.c" line="52"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;e&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;e&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/assigned-dev.c" file="x86\kvm\assigned-dev.c" line="164"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/assigned-dev.c" file="x86\kvm\assigned-dev.c" line="490"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;bitmap&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;bitmap&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/assigned-dev.c" file="x86\kvm\lapic.h" line="119"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/assigned-dev.c" file="x86\kvm\lapic.h" line="124"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/assigned-dev.c" file="x86\kvm\lapic.h" line="134"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/assigned-dev.c" file="x86\kvm\lapic.h" line="139"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;|&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file0="x86/kvm/cpuid.c" file="x86\kvm\cpuid.c" line="420"/>
            <location file0="x86/kvm/cpuid.c" file="x86\kvm\cpuid.c" line="419"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;function&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;function&amp;#039; is assigned a value that is never used.">
            <location file0="x86/kvm/cpuid.c" file="x86\kvm\cpuid.c" line="1119"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses.">
            <location file0="x86/kvm/emulate.c" file="x86\kvm\emulate.c" line="4094"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;rc&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;rc&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="x86/kvm/emulate.c" file="x86\kvm\emulate.c" line="2524"/>
            <location file0="x86/kvm/emulate.c" file="x86\kvm\emulate.c" line="2539"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sv&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sv&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/emulate.c" file="x86\kvm\emulate.c" line="1607"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mask&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mask&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/emulate.c" file="x86\kvm\emulate.c" line="1607"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)em_setcc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)em_setcc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/emulate.c" file="x86\kvm\emulate.c" line="1115"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;fop&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;fop&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/emulate.c" file="x86\kvm\emulate.c" line="6290"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;stimer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;stimer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/hyperv.c" file="x86\kvm\hyperv.c" line="186"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: param" verbose="Uninitialized variable: param">
            <location file0="x86/kvm/hyperv.c" file="x86\kvm\hyperv.c" line="1529"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: param" verbose="Uninitialized variable: param">
            <location file0="x86/kvm/hyperv.c" file="x86\kvm\hyperv.c" line="1530"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: param" verbose="Uninitialized variable: param">
            <location file0="x86/kvm/hyperv.c" file="x86\kvm\hyperv.c" line="1531"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: param" verbose="Uninitialized variable: param">
            <location file0="x86/kvm/hyperv.c" file="x86\kvm\hyperv.c" line="1532"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vcpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vcpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/i8254.c" file="x86\kvm\i8254.c" line="273"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/i8254.c" file="x86\kvm\i8254.c" line="274"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;channel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;channel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/i8254.c" file="x86\kvm\i8254.c" line="490"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;access&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;access&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/i8254.c" file="x86\kvm\i8254.c" line="490"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/i8254.c" file="x86\kvm\i8254.c" line="736"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;irq2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;irq2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/i8259.c" file="x86\kvm\i8259.c" line="295"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;priority&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;priority&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/i8259.c" file="x86\kvm\i8259.c" line="392"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/i8259.c" file="x86\kvm\i8259.c" line="392"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;e&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;e&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/ioapic.c" file="x86\kvm\ioapic.c" line="268"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;kimn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;kimn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/irq_comm.c" file="x86\kvm\irq_comm.c" line="292"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="360"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="379"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="872"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="968"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vector&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vector&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="2269"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mode&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mode&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="2269"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;trig_mode&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;trig_mode&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="2269"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;bitmap&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;bitmap&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="77"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="84"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="85"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;bitmap&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;bitmap&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="90"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;bitmap&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;bitmap&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="95"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;bitmap&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;bitmap&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="100"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;bitmap&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;bitmap&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="365"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;bitmap&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;bitmap&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="384"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="401"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="419"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="455"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="461"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="474"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="521"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="531"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="1089"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="1093"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="1097"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="1211"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="1525"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="1529"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;apic.regs&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/lapic.c" file="x86\kvm\lapic.c" line="2518"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;linfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;linfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="883"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;linfo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;linfo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="944"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rmap_head&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rmap_head&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="1475"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rmap_head&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rmap_head&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="1501"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rmap_head&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rmap_head&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="1541"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slots&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slots&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="1717"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="2048"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;quadrant&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;quadrant&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="2399"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="2606"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rmap_count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rmap_count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="2998"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pfec&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pfec&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="4525"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;wf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;wf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="4527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;uf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;uf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="4527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ff&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ff&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="4527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;smapf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;smapf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="4527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="5007"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;quadrant&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;quadrant&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="5098"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slots&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slots&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="5496"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slots&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slots&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="5919"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\mmu.c" line="1790"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="225"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="594"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="978"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;level&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;level&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="979"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sptep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sptep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="980"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptep_user&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptep_user&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="1181"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="1181"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sptep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sptep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="1181"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &amp;#039;no_present&amp;#039; is not used." verbose="Label &amp;#039;no_present&amp;#039; is not used.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="1181"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &amp;#039;retry_walk&amp;#039; is not used." verbose="Label &amp;#039;retry_walk&amp;#039; is not used.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="1181"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &amp;#039;error&amp;#039; is not used." verbose="Label &amp;#039;error&amp;#039; is not used.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="1181"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &amp;#039;out_gpte_changed&amp;#039; is not used." verbose="Label &amp;#039;out_gpte_changed&amp;#039; is not used.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="1181"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &amp;#039;out_unlock&amp;#039; is not used." verbose="Label &amp;#039;out_unlock&amp;#039; is not used.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="1181"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)host_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)host_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="399"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)host_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)host_addr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="1181"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used.">
            <location file0="x86/kvm/mmu.c" file="x86\kvm\paging_tmpl.h" line="1181"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mtrr_seg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mtrr_seg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/mtrr.c" file="x86\kvm\mtrr.c" line="313"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting a negative value is undefined behaviour" verbose="Shifting a negative value is undefined behaviour">
            <location file0="x86/kvm/mtrr.c" file="x86\kvm\mtrr.c" line="433"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="x86/kvm/pmu_amd.c" file="x86\kvm\pmu_amd.c" line="106"/>
            <location file0="x86/kvm/pmu_amd.c" file="x86\kvm\pmu_amd.c" line="108"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!(data&amp;amp;18446744073709548612ULL)&amp;#039; is always true" verbose="Condition &amp;#039;!(data&amp;amp;18446744073709548612ULL)&amp;#039; is always true">
            <location file0="x86/kvm/pmu_intel.c" file="x86\kvm\pmu_intel.c" line="242"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;new_entry&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;new_entry&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="x86/kvm/svm.c" file="x86\kvm\svm.c" line="1490"/>
            <location file0="x86/kvm/svm.c" file="x86\kvm\svm.c" line="1491"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;svm_init_data::r&amp;#039; is never used." verbose="struct member &amp;#039;svm_init_data::r&amp;#039; is never used.">
            <location file0="x86/kvm/svm.c" file="x86\kvm\svm.c" line="538"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_LOCAL_APIC&amp;#039; since the value of &amp;#039;CONFIG_X86_LOCAL_APIC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_LOCAL_APIC&amp;#039; since the value of &amp;#039;CONFIG_X86_LOCAL_APIC&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\kvm\svm.c" line="1194"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses.">
            <location file0="x86/kvm/vmx.c" file="x86\kvm\vmx.c" line="11231"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rflags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rflags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/vmx.c" file="x86\kvm\vmx.c" line="2612"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;save_rflags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;save_rflags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/vmx.c" file="x86\kvm\vmx.c" line="2612"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;max_irr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;max_irr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/vmx.c" file="x86\kvm\vmx.c" line="5608"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vapic_page&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vapic_page&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/vmx.c" file="x86\kvm\vmx.c" line="5609"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cr2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cr2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/vmx.c" file="x86\kvm\vmx.c" line="6508"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;field&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;field&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/vmx.c" file="x86\kvm\vmx.c" line="8750"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;unblock_nmi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;unblock_nmi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/vmx.c" file="x86\kvm\vmx.c" line="10404"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/vmx.c" file="x86\kvm\vmx.c" line="11412"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dest&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dest&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/vmx.c" file="x86\kvm\vmx.c" line="13153"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dest&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dest&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/vmx.c" file="x86\kvm\vmx.c" line="13245"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/vmx.c" file="x86\kvm\vmx.c" line="13246"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)vmx.nested.pi_desc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)vmx.nested.pi_desc&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/vmx.c" file="x86\kvm\vmx.c" line="11344"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/x86.c" file="x86\kvm\x86.c" line="1022"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/x86.c" file="x86\kvm\x86.c" line="5387"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/kvm/x86.c" file="x86\kvm\x86.c" line="5413"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;v&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;v&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/x86.c" file="x86\kvm\x86.c" line="5403"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;v&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;v&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/x86.c" file="x86\kvm\x86.c" line="5431"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/x86.c" file="x86\kvm\x86.c" line="5524"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;data&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/x86.c" file="x86\kvm\x86.c" line="5630"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;val&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;val&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/x86.c" file="x86\kvm\x86.c" line="5817"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;val&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;val&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/kvm/x86.c" file="x86\kvm\x86.c" line="5866"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/lib/cmdline.c" file="x86\lib\cmdline.c" line="32"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/csum-wrappers_64.c" file="x86\lib\csum-wrappers_64.c" line="57"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/csum-wrappers_64.c" file="x86\lib\csum-wrappers_64.c" line="58"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;src&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/csum-wrappers_64.c" file="x86\lib\csum-wrappers_64.c" line="123"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/csum-wrappers_64.c" file="x86\lib\csum-wrappers_64.c" line="124"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;kaddr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;kaddr&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/insn.c" file="x86\lib\insn.c" line="66"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/mmx_32.c" file="x86\lib\mmx_32.c" line="84"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/mmx_32.c" file="x86\lib\mmx_32.c" line="85"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/mmx_32.c" file="x86\lib\mmx_32.c" line="109"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/mmx_32.c" file="x86\lib\mmx_32.c" line="110"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;page&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;page&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/mmx_32.c" file="x86\lib\mmx_32.c" line="284"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/mmx_32.c" file="x86\lib\mmx_32.c" line="336"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/mmx_32.c" file="x86\lib\mmx_32.c" line="337"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;page&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;page&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/mmx_32.c" file="x86\lib\mmx_32.c" line="152"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/mmx_32.c" file="x86\lib\mmx_32.c" line="213"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/mmx_32.c" file="x86\lib\mmx_32.c" line="214"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;from&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;from&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/mmx_32.c" file="x86\lib\mmx_32.c" line="237"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;to&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/lib/mmx_32.c" file="x86\lib\mmx_32.c" line="238"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::name&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::name&amp;#039; is never used.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="284"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="217"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="219"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="220"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="221"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="222"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="223"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="224"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="225"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="226"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="227"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="228"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="231"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="234"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="235"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="236"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="237"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="238"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="239"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/errors.c" file="x86\math-emu\errors.c" line="240"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;st_new_ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;st_new_ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/math-emu/fpu_aux.c" file="x86\math-emu\fpu_aux.c" line="106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;regnr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;regnr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/math-emu/fpu_entry.c" file="x86\math-emu\fpu_entry.c" line="785"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;space&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/math-emu/fpu_entry.c" file="x86\math-emu\fpu_entry.c" line="805"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;space&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;space&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/math-emu/fpu_entry.c" file="x86\math-emu\fpu_entry.c" line="865"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;q&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;q&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/math-emu/fpu_trig.c" file="x86\math-emu\fpu_trig.c" line="690"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;q&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;q&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/math-emu/fpu_trig.c" file="x86\math-emu\fpu_trig.c" line="770"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;q&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;q&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/math-emu/fpu_trig.c" file="x86\math-emu\fpu_trig.c" line="983"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/math-emu/fpu_trig.c" file="x86\math-emu\fpu_trig.c" line="1038"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;st_new_ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;st_new_ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/math-emu/fpu_trig.c" file="x86\math-emu\fpu_trig.c" line="861"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;st_new_ptr&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;st_new_ptr&amp;#039; is assigned a value that is never used.">
            <location file0="x86/math-emu/fpu_trig.c" file="x86\math-emu\fpu_trig.c" line="872"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;seg_top&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;seg_top&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/math-emu/get_address.c" file="x86\math-emu\get_address.c" line="158"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: argSignif.msw" verbose="Uninitialized struct member: argSignif.msw">
            <location file0="x86/math-emu/poly_2xm1.c" file="x86\math-emu\poly_2xm1.c" line="78"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: Numer.msw" verbose="Uninitialized struct member: Numer.msw">
            <location file0="x86/math-emu/poly_l2.c" file="x86\math-emu\poly_l2.c" line="253"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fix_up&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fix_up&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/math-emu/poly_sin.c" file="x86\math-emu\poly_sin.c" line="65"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;adj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;adj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/math-emu/poly_sin.c" file="x86\math-emu\poly_sin.c" line="65"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;exp2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;exp2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/math-emu/poly_sin.c" file="x86\math-emu\poly_sin.c" line="224"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;echange&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;echange&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/math-emu/poly_sin.c" file="x86\math-emu\poly_sin.c" line="224"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: fix_up.msw" verbose="Uninitialized struct member: fix_up.msw">
            <location file0="x86/math-emu/poly_sin.c" file="x86\math-emu\poly_sin.c" line="394"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;adj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;adj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/math-emu/poly_tan.c" file="x86\math-emu\poly_tan.c" line="60"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: accum.lsw" verbose="Uninitialized struct member: accum.lsw">
            <location file0="x86/math-emu/poly_tan.c" file="x86\math-emu\poly_tan.c" line="125"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;saved_sign&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;saved_sign&amp;#039; is assigned a value that is never used.">
            <location file0="x86/math-emu/reg_divide.c" file="x86\math-emu\reg_divide.c" line="87"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from long double* to integer* is not portable due to different binary data representations on different platforms." verbose="Casting from long double* to integer* is not portable due to different binary data representations on different platforms.">
            <location file0="x86/math-emu/reg_ld_str.c" file="x86\math-emu\reg_ld_str.c" line="425"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;regnr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;regnr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/math-emu/reg_ld_str.c" file="x86\math-emu\reg_ld_str.c" line="1490"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/math-emu/reg_ld_str.c" file="x86\math-emu\reg_ld_str.c" line="370"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;delta&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;delta&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/mm/dump_pagetables.c" file="x86\mm\dump_pagetables.c" line="266"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/mm/fault.c" file="x86\mm\fault.c" line="770"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;addr+=PAGE_SIZE,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="x86/mm/gup.c" file="x86\mm\gup.c" line="206"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pmdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pmdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="x86/mm/gup.c" file="x86\mm\gup.c" line="295"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pudp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pudp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="x86/mm/gup.c" file="x86\mm\gup.c" line="368"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="x86/mm/gup.c" file="x86\mm\gup.c" line="435"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;pgdp++,addr=next,addr!=end&amp;#039; depends on order of evaluation of side effects">
            <location file0="x86/mm/gup.c" file="x86\mm\gup.c" line="524"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/mm/hugetlbpage.c" file="x86\mm\hugetlbpage.c" line="134"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\mm\init.c" line="313"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)__va(max_low_pfn*PAGE_SIZE-1)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)__va(max_low_pfn*PAGE_SIZE-1)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/init_32.c" file="x86\mm\init_32.c" line="775"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)__va(highstart_pfn*PAGE_SIZE-1)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)__va(highstart_pfn*PAGE_SIZE-1)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/init_32.c" file="x86\mm\init_32.c" line="773"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pgd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pgd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/mm/init_64.c" file="x86\mm\init_64.c" line="1485"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/mm/init_64.c" file="x86\mm\init_64.c" line="1493"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)__va(max_pfn*PAGE_SIZE-1)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)__va(max_pfn*PAGE_SIZE-1)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/init_64.c" file="x86\mm\init_64.c" line="747"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/ioremap.c" file="x86\mm\ioremap.c" line="452"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)PAGE_OFFSET&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)PAGE_OFFSET&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/kasan_init_64.c" file="x86\mm\kasan_init_64.c" line="131"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_EFI&amp;#039; since the value of &amp;#039;CONFIG_EFI&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_EFI&amp;#039; since the value of &amp;#039;CONFIG_EFI&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\mm\kaslr.c" line="112"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_ESPFIX64&amp;#039; since the value of &amp;#039;CONFIG_X86_ESPFIX64&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_ESPFIX64&amp;#039; since the value of &amp;#039;CONFIG_X86_ESPFIX64&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\mm\kaslr.c" line="109"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_ESPFIX64&amp;#039; since the value of &amp;#039;CONFIG_X86_ESPFIX64&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_ESPFIX64&amp;#039; since the value of &amp;#039;CONFIG_X86_ESPFIX64&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\mm\kaslr.c" line="111"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/mm/mmio-mod.c" file="x86\mm\mmio-mod.c" line="490"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/mm/mpx.c" file="x86\mm\mpx.c" line="755"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;need_write&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;need_write&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/mm/mpx.c" file="x86\mm\mpx.c" line="767"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/mm/mpx.c" file="x86\mm\mpx.c" line="1026"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;need_write&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;need_write&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/mm/mpx.c" file="x86\mm\mpx.c" line="1030"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used.">
            <location file0="x86/mm/mpx.c" file="x86\mm\mpx.c" line="494"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;uninitialized_var&amp;#039; is assigned a value that is never used.">
            <location file0="x86/mm/mpx.c" file="x86\mm\mpx.c" line="1102"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_64&amp;#039; since the value of &amp;#039;CONFIG_X86_64&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_64&amp;#039; since the value of &amp;#039;CONFIG_X86_64&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\mm\mpx.c" line="114"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer.">
            <location file0="x86/mm/numa.c" file="x86\mm\numa.c" line="1047"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)__va(max_low_pfn*PAGE_SIZE-1)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)__va(max_low_pfn*PAGE_SIZE-1)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/numa_32.c" file="x86\mm\numa_32.c" line="99"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void*)__va(highstart_pfn*PAGE_SIZE-1)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void*)__va(highstart_pfn*PAGE_SIZE-1)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/numa_32.c" file="x86\mm\numa_32.c" line="97"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pud&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pud&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/mm/pageattr.c" file="x86\mm\pageattr.c" line="1260"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/mm/pageattr.c" file="x86\mm\pageattr.c" line="1493"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/mm/pageattr.c" file="x86\mm\pageattr.c" line="1572"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;vaddr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/pageattr.c" file="x86\mm\pageattr.c" line="142"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/pageattr.c" file="x86\mm\pageattr.c" line="151"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;page&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;page&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/mm/pat.c" file="x86\mm\pat.c" line="574"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_DEBUG_FS;CONFIG_X86_PAT&amp;#039; since the value of &amp;#039;CONFIG_X86_PAT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_DEBUG_FS;CONFIG_X86_PAT&amp;#039; since the value of &amp;#039;CONFIG_X86_PAT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\mm\pat.c" line="41"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_PAT&amp;#039; since the value of &amp;#039;CONFIG_X86_PAT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_PAT&amp;#039; since the value of &amp;#039;CONFIG_X86_PAT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\mm\pat.c" line="41"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;newdata.start&amp;gt;data.start&amp;#039; is always true" verbose="Condition &amp;#039;newdata.start&amp;gt;data.start&amp;#039; is always true">
            <location file0="x86/mm/pat_rbtree.c" file="x86\mm\pat_rbtree.c" line="244"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/testmmiotrace.c" file="x86\mm\testmmiotrace.c" line="39"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/testmmiotrace.c" file="x86\mm\testmmiotrace.c" line="44"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/testmmiotrace.c" file="x86\mm\testmmiotrace.c" line="49"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/testmmiotrace.c" file="x86\mm\testmmiotrace.c" line="61"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/testmmiotrace.c" file="x86\mm\testmmiotrace.c" line="67"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/testmmiotrace.c" file="x86\mm\testmmiotrace.c" line="73"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;p&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/mm/testmmiotrace.c" file="x86\mm\testmmiotrace.c" line="87"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;addr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;addr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/oprofile/backtrace.c" file="x86\oprofile\backtrace.c" line="113"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;.">
            <location file0="x86/oprofile/nmi_int.c" file="x86\oprofile\nmi_int.c" line="516"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cccraddr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cccraddr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/oprofile/op_model_p4.c" file="x86\oprofile\op_model_p4.c" line="464"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;.&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;.&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file0="x86/oprofile/op_model_p4.c" file="x86\oprofile\op_model_p4.c" line="619"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/pci/ce4100.c" file="x86\pci\ce4100.c" line="298"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/pci/ce4100.c" file="x86\pci\ce4100.c" line="330"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bar_r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bar_r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/pci/common.c" file="x86\pci\common.c" line="144"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bar&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bar&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/pci/common.c" file="x86\pci\common.c" line="145"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/pci/fixup.c" file="x86\pci\fixup.c" line="265"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bridge&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bridge&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/pci/fixup.c" file="x86\pci\fixup.c" line="344"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/pci/i386.c" file="x86\pci\i386.c" line="384"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/pci/i386.c" file="x86\pci\i386.c" line="429"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/pci/irq.c" file="x86\pci\irq.c" line="997"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/pci/mmconfig-shared.c" file="x86\pci\mmconfig-shared.c" line="759"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)fix_to_virt(FIX_PCIE_MCFG)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)fix_to_virt(FIX_PCIE_MCFG)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/pci/mmconfig_32.c" file="x86\pci\mmconfig_32.c" line="85"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)fix_to_virt(FIX_PCIE_MCFG)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)fix_to_virt(FIX_PCIE_MCFG)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/pci/mmconfig_32.c" file="x86\pci\mmconfig_32.c" line="89"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)fix_to_virt(FIX_PCIE_MCFG)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)fix_to_virt(FIX_PCIE_MCFG)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/pci/mmconfig_32.c" file="x86\pci\mmconfig_32.c" line="93"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)fix_to_virt(FIX_PCIE_MCFG)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)fix_to_virt(FIX_PCIE_MCFG)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/pci/mmconfig_32.c" file="x86\pci\mmconfig_32.c" line="130"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)fix_to_virt(FIX_PCIE_MCFG)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)fix_to_virt(FIX_PCIE_MCFG)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/pci/mmconfig_32.c" file="x86\pci\mmconfig_32.c" line="134"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;(void __iomem*)fix_to_virt(FIX_PCIE_MCFG)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;(void __iomem*)fix_to_virt(FIX_PCIE_MCFG)&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/pci/mmconfig_32.c" file="x86\pci\mmconfig_32.c" line="138"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::checksum&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::checksum&amp;#039; is never used.">
            <location file0="x86/pci/pcbios.c" file="x86\pci\pcbios.c" line="71"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous0::reserved&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous0::reserved&amp;#039; is never used.">
            <location file0="x86/pci/pcbios.c" file="x86\pci\pcbios.c" line="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ep&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ep&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/pci/sta2x11-fixup.c" file="x86\pci\sta2x11-fixup.c" line="99"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;irq&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;irq&amp;#039; is reassigned a value before the old one has been used.">
            <location file0="x86/pci/xen.c" file="x86\pci\xen.c" line="72"/>
            <location file0="x86/pci/xen.c" file="x86\pci\xen.c" line="77"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/platform/atom/pmc_atom.c" file="x86\platform\atom\pmc_atom.c" line="263"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/platform/atom/pmc_atom.c" file="x86\platform\atom\pmc_atom.c" line="264"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/platform/atom/pmc_atom.c" file="x86\platform\atom\pmc_atom.c" line="313"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;status&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;status&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/atom/punit_atom_debug.c" file="x86\platform\atom\punit_atom_debug.c" line="97"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ier&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ier&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/ce4100/ce4100.c" file="x86\platform\ce4100\ce4100.c" line="63"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lsr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lsr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/ce4100/ce4100.c" file="x86\platform\ce4100\ce4100.c" line="63"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dst&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dst&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/efi/early_printk.c" file="x86\platform\efi\early_printk.c" line="92"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;src&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;src&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/efi/early_printk.c" file="x86\platform\efi\early_printk.c" line="92"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;efi_fb&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;efi_fb&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/platform/efi/early_printk.c" file="x86\platform\efi\early_printk.c" line="57"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;dst&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/platform/efi/early_printk.c" file="x86\platform\efi\early_printk.c" line="199"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;entry&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;entry&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/platform/efi/efi.c" file="x86\platform\efi\efi.c" line="741"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;entry&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;entry&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/platform/efi/efi.c" file="x86\platform\efi\efi.c" line="792"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_X86_32&amp;#039; since the value of &amp;#039;CONFIG_X86_32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\platform\efi\efi.c" line="817"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_EFI_MIXED&amp;#039; since the value of &amp;#039;CONFIG_EFI_MIXED&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_EFI_MIXED&amp;#039; since the value of &amp;#039;CONFIG_EFI_MIXED&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\platform\efi\efi_64.c" line="305"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_EFI_MIXED&amp;#039; since the value of &amp;#039;CONFIG_EFI_MIXED&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_EFI_MIXED&amp;#039; since the value of &amp;#039;CONFIG_EFI_MIXED&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\platform\efi\efi_64.c" line="373"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/intel-mid/intel_mid_vrtc.c" file="x86\platform\intel-mid\intel_mid_vrtc.c" line="98"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;year&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;year&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/intel-mid/intel_mid_vrtc.c" file="x86\platform\intel-mid\intel_mid_vrtc.c" line="100"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;busy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;busy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/intel-mid/pwr.c" file="x86\platform\intel-mid\pwr.c" line="140"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;client&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;client&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/intel-mid/sfi.c" file="x86\platform\intel-mid\sfi.c" line="346"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file0="x86/platform/intel-quark/imr.c" file="x86\platform\intel-quark\imr.c" line="252"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses.">
            <location file0="x86/platform/olpc/olpc-xo1-sci.c" file="x86\platform\olpc\olpc-xo1-sci.c" line="134"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;sts&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;sts&amp;#039; is assigned a value that is never used.">
            <location file0="x86/platform/olpc/olpc-xo1-sci.c" file="x86\platform\olpc\olpc-xo1-sci.c" line="401"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bcp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bcp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="180"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bcp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bcp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="202"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="262"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hpp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hpp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="427"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tcpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tcpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="894"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tbcp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tbcp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="895"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="1062"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tcpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tcpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="1184"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tbcp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tbcp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="1185"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pnode&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pnode&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="1267"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;descriptor_status&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;descriptor_status&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="1340"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;status&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;status&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="1341"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;other_msg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;other_msg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="1472"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;stat&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;stat&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="1683"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="1793"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;elements&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;elements&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="1794"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="1879"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gnode&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gnode&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="2188"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tail&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tail&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="2188"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mult2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mult2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="2271"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="2272"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;base&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;base&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="2273"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ts_ns&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ts_ns&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="2275"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/tlb_uv.c" file="x86\platform\uv\tlb_uv.c" line="2443"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dots&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dots&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/uv_nmi.c" file="x86\platform\uv\uv_nmi.c" line="460"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/platform/uv/uv_nmi.c" file="x86\platform\uv\uv_nmi.c" line="843"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/power/hibernate_32.c" file="x86\power\hibernate_32.c" line="92"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mstart&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mstart&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/power/hibernate_64.c" file="x86\power\hibernate_64.c" line="99"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mend&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mend&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/power/hibernate_64.c" file="x86\power\hibernate_64.c" line="99"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/um/ldt.c" file="x86\um\ldt.c" line="477"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/um/ldt.c" file="x86\um\ldt.c" line="91"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;ptr&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/um/ldt.c" file="x86\um\ldt.c" line="112"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TIF_IA32&amp;#039; since the value of &amp;#039;TIF_IA32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TIF_IA32&amp;#039; since the value of &amp;#039;TIF_IA32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\um\ptrace_64.c" line="61"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;TIF_IA32&amp;#039; since the value of &amp;#039;TIF_IA32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;TIF_IA32&amp;#039; since the value of &amp;#039;TIF_IA32&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\um\ptrace_64.c" line="164"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;pid&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;pid&amp;#039; is assigned a value that is never used.">
            <location file0="x86/um/signal.c" file="x86\um\signal.c" line="237"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;pid&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;pid&amp;#039; is assigned a value that is never used.">
            <location file0="x86/um/signal.c" file="x86\um\signal.c" line="342"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;insnbuf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;insnbuf&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="x86/xen/enlighten.c" file="x86\xen\enlighten.c" line="1337"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;USE_SPLIT_PTE_PTLOCKS&amp;#039; since the value of &amp;#039;USE_SPLIT_PTE_PTLOCKS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;USE_SPLIT_PTE_PTLOCKS&amp;#039; since the value of &amp;#039;USE_SPLIT_PTE_PTLOCKS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\xen\mmu.c" line="1875"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;USE_SPLIT_PTE_PTLOCKS&amp;#039; since the value of &amp;#039;USE_SPLIT_PTE_PTLOCKS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;USE_SPLIT_PTE_PTLOCKS&amp;#039; since the value of &amp;#039;USE_SPLIT_PTE_PTLOCKS&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\xen\mmu.c" line="1915"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptechk&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptechk&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/xen/p2m.c" file="x86\xen\p2m.c" line="526"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pmdp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pmdp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/xen/p2m.c" file="x86\xen\p2m.c" line="528"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;topidx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;topidx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/xen/p2m.c" file="x86\xen\p2m.c" line="598"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;top_mfn_p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;top_mfn_p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/xen/p2m.c" file="x86\xen\p2m.c" line="599"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/xen/p2m.c" file="x86\xen\p2m.c" line="602"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_XEN_BALLOON_MEMORY_HOTPLUG_LIMIT&amp;#039; since the value of &amp;#039;CONFIG_XEN_BALLOON_MEMORY_HOTPLUG_LIMIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_XEN_BALLOON_MEMORY_HOTPLUG_LIMIT&amp;#039; since the value of &amp;#039;CONFIG_XEN_BALLOON_MEMORY_HOTPLUG_LIMIT&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="x86\xen\p2m.c" line="469"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/xen/p2m.c" file="x86\xen\p2m.c" line="934"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fixed_counters&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fixed_counters&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/xen/pmu.c" file="x86\xen\pmu.c" line="426"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gdt_mfn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gdt_mfn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/xen/smp.c" file="x86\xen\smp.c" line="479"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cpu&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="x86/xen/suspend.c" file="x86\xen\suspend.c" line="39"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;avail_ram&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;avail_ram&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1.">
            <location file0="xtensa/boot/lib/zmem.c" file="xtensa\boot\lib\zmem.c" line="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ibreakenable&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ibreakenable&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="xtensa/kernel/hw_breakpoint.c" file="xtensa\kernel\hw_breakpoint.c" line="266"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;XCHAL_INTTYPE_MASK_PROFILING&amp;#039; since the value of &amp;#039;XCHAL_INTTYPE_MASK_PROFILING&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;XCHAL_INTTYPE_MASK_PROFILING&amp;#039; since the value of &amp;#039;XCHAL_INTTYPE_MASK_PROFILING&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="xtensa\kernel\irq.c" line="136"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;location&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;location&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="xtensa/kernel/module.c" file="xtensa\kernel\module.c" line="58"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="xtensa/kernel/module.c" file="xtensa\kernel\module.c" line="59"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="xtensa/kernel/pci.c" file="xtensa\kernel\pci.c" line="101"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="xtensa/kernel/pci.c" file="xtensa\kernel\pci.c" line="274"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;a0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;a0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="xtensa/kernel/stacktrace.c" file="xtensa\kernel\stacktrace.c" line="214"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;wmask&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;wmask&amp;#039; is assigned a value that is never used.">
            <location file0="xtensa/kernel/traps.c" file="xtensa\kernel\traps.c" line="490"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;s!=0&amp;#039; is redundant or there is possible null pointer dereference: s." verbose="Either the condition &amp;#039;s!=0&amp;#039; is redundant or there is possible null pointer dereference: s.">
            <location file0="xtensa/platforms/iss/console.c" file="xtensa\platforms\iss\console.c" line="265"/>
            <location file0="xtensa/platforms/iss/console.c" file="xtensa\platforms\iss\console.c" line="267"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rem&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rem&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="xtensa/platforms/iss/network.c" file="xtensa\platforms\iss\network.c" line="255"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="xtensa/platforms/iss/network.c" file="xtensa\platforms\iss\network.c" line="362"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SIMDISK0_FILENAME&amp;#039; since the value of &amp;#039;CONFIG_SIMDISK0_FILENAME&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SIMDISK0_FILENAME&amp;#039; since the value of &amp;#039;CONFIG_SIMDISK0_FILENAME&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="xtensa\platforms\iss\simdisk.c" line="49"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SIMDISK0_FILENAME;CONFIG_SIMDISK1_FILENAME&amp;#039; since the value of &amp;#039;CONFIG_SIMDISK0_FILENAME&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SIMDISK0_FILENAME;CONFIG_SIMDISK1_FILENAME&amp;#039; since the value of &amp;#039;CONFIG_SIMDISK0_FILENAME&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="xtensa\platforms\iss\simdisk.c" line="49"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;CONFIG_SIMDISK0_FILENAME;CONFIG_SIMDISK1_FILENAME&amp;#039; since the value of &amp;#039;CONFIG_SIMDISK1_FILENAME&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;CONFIG_SIMDISK0_FILENAME;CONFIG_SIMDISK1_FILENAME&amp;#039; since the value of &amp;#039;CONFIG_SIMDISK1_FILENAME&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="xtensa\platforms\iss\simdisk.c" line="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file0="xtensa/platforms/xt2000/setup.c" file="xtensa\platforms\xt2000\setup.c" line="91"/>
        </error>
    </errors>
</results>
